
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#include "c3.h"
#include "CivilisationRecord.h"

#include <algorithm>
#include "BitArray.h"
#include "c3errors.h"
#include "CTPDatabase.h"
#include "DBLexer.h"
#include "DBTokens.h"
#include "StrDB.h"

#include "PersonalityRecord.h"
#include "PersonalityRecord.h"
#include "CityStyleRecord.h"
#include "MapIconRecord.h"

CTPDatabase<CivilisationRecord> *g_theCivilisationDB = NULL;

void CivilisationRecord::Init()
{
    m_flags0 = 0;
    m_SingularCivName = 0;
    m_PluralCivName = 0;
    m_CountryName = 0;
    m_LeaderNameMale = 0;
    m_LeaderNameFemale = 0;
    m_EmissaryPhotoMale = 0;
    m_EmissaryPhotoFemale = 0;
    m_PersonalityDescription = 0;
    m_PersonalityMale = 0x7fffffff;
    m_PersonalityFemale = 0x7fffffff;
    m_Parchment = 0;
    m_Capital = 0;
    m_CityStyle = 0x7fffffff;
    memset(m_CityName, 0, sizeof(m_CityName));
    m_numCityName = 0;
    m_NationUnitFlagValue = 0;
    m_HappyInc = 0;
    m_ProductionBonus = 0;
    m_FoodBonus = 0;
    m_CommerceBonus = 0;
    m_ScienceBonus = 0;
    m_IncreaseBoatMovement = 0;
    m_IncreaseHp = 0;
    m_OffenseBonusLandValue = 0.000000;
    m_OffenseBonusWaterValue = 0.000000;
    m_OffenseBonusAirValue = 0.000000;
    m_LowerCrimeValue = 0.000000;
    m_LowerPeaceMovementValue = 0.000000;
    m_GoldPerCitizenValue = 0;
    m_SciencePerPopValue = 0.000000;
    m_ReduceReadinessCostValue = 0;
    m_GoldPerWaterTradeRouteValue = 0;
    m_GoldPerTelevisionValue = 0;
    m_GoldPerInternationalTradeRouteValue = 0;
    m_DecreaseMaintenanceValue = 0;
    m_PollutionPercentValue = 0.000000;
    m_PollutionAmountValue = 0.000000;
    //GovMod Specific flag initialization
    m_hasGovernmentsModified = false;
}

void CivilisationRecord::Serialize(CivArchive &archive)
{
    if(archive.IsStoring()) {
        archive << m_index;
        if(m_name >= 0){
            archive << GetIDText();
        }
        else{
            archive << static_cast<MBCHAR*>(NULL);
        }
        archive << m_flags0;
        {
            MBCHAR* tmpString = g_theStringDB->GetIdStr(m_SingularCivName);
            archive << tmpString;
        }

        {
            MBCHAR* tmpString = g_theStringDB->GetIdStr(m_PluralCivName);
            archive << tmpString;
        }

        {
            MBCHAR* tmpString = g_theStringDB->GetIdStr(m_CountryName);
            archive << tmpString;
        }

        {
            MBCHAR* tmpString = g_theStringDB->GetIdStr(m_LeaderNameMale);
            archive << tmpString;
        }

        {
            MBCHAR* tmpString = g_theStringDB->GetIdStr(m_LeaderNameFemale);
            archive << tmpString;
        }

        {
            MBCHAR* tmpString = g_theStringDB->GetIdStr(m_EmissaryPhotoMale);
            archive << tmpString;
        }

        {
            MBCHAR* tmpString = g_theStringDB->GetIdStr(m_EmissaryPhotoFemale);
            archive << tmpString;
        }

        {
            MBCHAR* tmpString = g_theStringDB->GetIdStr(m_PersonalityDescription);
            archive << tmpString;
        }

        archive << m_PersonalityMale;
        archive << m_PersonalityFemale;
        archive << m_Parchment;
        archive << m_Capital;
        archive << m_CityStyle;

        {
            MBCHAR* tmpString;
            archive << m_numCityName;
            for(sint32 i = 0; i < m_numCityName; ++i){
                tmpString = g_theStringDB->GetIdStr(m_CityName[i]);
                archive << tmpString;
            }
        }

        archive << m_NationUnitFlagValue;
        archive << m_HappyInc;
        archive << m_ProductionBonus;
        archive << m_FoodBonus;
        archive << m_CommerceBonus;
        archive << m_ScienceBonus;
        archive << m_IncreaseBoatMovement;
        archive << m_IncreaseHp;
        archive << m_OffenseBonusLandValue;
        archive << m_OffenseBonusWaterValue;
        archive << m_OffenseBonusAirValue;
        archive << m_LowerCrimeValue;
        archive << m_LowerPeaceMovementValue;
        archive << m_GoldPerCitizenValue;
        archive << m_SciencePerPopValue;
        archive << m_ReduceReadinessCostValue;
        archive << m_GoldPerWaterTradeRouteValue;
        archive << m_GoldPerTelevisionValue;
        archive << m_GoldPerInternationalTradeRouteValue;
        archive << m_DecreaseMaintenanceValue;
        archive << m_PollutionPercentValue;
        archive << m_PollutionAmountValue;
    } else {
        //GovMod Specific flag initialization
        m_hasGovernmentsModified = false;

        archive >> m_index;
        {
            MBCHAR* tmpStr = NULL;
            archive >> tmpStr;
            g_theStringDB->GetStringID(tmpStr, m_name);
            SetTextName(g_theStringDB->GetNameStr(m_name));
        }
        archive >> m_flags0;
        {
            MBCHAR* tmpString = NULL;
            archive >> tmpString;
            g_theStringDB->GetStringID(tmpString, m_SingularCivName);
            delete[] tmpString;
        }

        {
            MBCHAR* tmpString = NULL;
            archive >> tmpString;
            g_theStringDB->GetStringID(tmpString, m_PluralCivName);
            delete[] tmpString;
        }

        {
            MBCHAR* tmpString = NULL;
            archive >> tmpString;
            g_theStringDB->GetStringID(tmpString, m_CountryName);
            delete[] tmpString;
        }

        {
            MBCHAR* tmpString = NULL;
            archive >> tmpString;
            g_theStringDB->GetStringID(tmpString, m_LeaderNameMale);
            delete[] tmpString;
        }

        {
            MBCHAR* tmpString = NULL;
            archive >> tmpString;
            g_theStringDB->GetStringID(tmpString, m_LeaderNameFemale);
            delete[] tmpString;
        }

        {
            MBCHAR* tmpString = NULL;
            archive >> tmpString;
            g_theStringDB->GetStringID(tmpString, m_EmissaryPhotoMale);
            delete[] tmpString;
        }

        {
            MBCHAR* tmpString = NULL;
            archive >> tmpString;
            g_theStringDB->GetStringID(tmpString, m_EmissaryPhotoFemale);
            delete[] tmpString;
        }

        {
            MBCHAR* tmpString = NULL;
            archive >> tmpString;
            g_theStringDB->GetStringID(tmpString, m_PersonalityDescription);
            delete[] tmpString;
        }

        archive >> m_PersonalityMale;
        archive >> m_PersonalityFemale;
        archive >> m_Parchment;
        archive >> m_Capital;
        archive >> m_CityStyle;

        {
            MBCHAR* tmpString;
            archive >> m_numCityName;
            for(sint32 i = 0; i < m_numCityName; ++i){
                tmpString = NULL;
                archive << tmpString;
                g_theStringDB->GetStringID(tmpString, m_CityName[i]);
                delete[] tmpString;
            }
        }

        archive >> m_NationUnitFlagValue;
        archive >> m_HappyInc;
        archive >> m_ProductionBonus;
        archive >> m_FoodBonus;
        archive >> m_CommerceBonus;
        archive >> m_ScienceBonus;
        archive >> m_IncreaseBoatMovement;
        archive >> m_IncreaseHp;
        archive >> m_OffenseBonusLandValue;
        archive >> m_OffenseBonusWaterValue;
        archive >> m_OffenseBonusAirValue;
        archive >> m_LowerCrimeValue;
        archive >> m_LowerPeaceMovementValue;
        archive >> m_GoldPerCitizenValue;
        archive >> m_SciencePerPopValue;
        archive >> m_ReduceReadinessCostValue;
        archive >> m_GoldPerWaterTradeRouteValue;
        archive >> m_GoldPerTelevisionValue;
        archive >> m_GoldPerInternationalTradeRouteValue;
        archive >> m_DecreaseMaintenanceValue;
        archive >> m_PollutionPercentValue;
        archive >> m_PollutionAmountValue;
    }
}

CivilisationRecord::~CivilisationRecord()
{
}

CivilisationRecord const & CivilisationRecord::operator = (CivilisationRecord const & rval)
{
    if (this != &rval)
    {
        m_index = rval.m_index;
        m_flags0 = rval.m_flags0;
        m_hasGovernmentsModified = rval.m_hasGovernmentsModified;

        m_SingularCivName = rval.m_SingularCivName;

        m_PluralCivName = rval.m_PluralCivName;

        m_CountryName = rval.m_CountryName;

        m_LeaderNameMale = rval.m_LeaderNameMale;

        m_LeaderNameFemale = rval.m_LeaderNameFemale;

        m_EmissaryPhotoMale = rval.m_EmissaryPhotoMale;

        m_EmissaryPhotoFemale = rval.m_EmissaryPhotoFemale;

        m_PersonalityDescription = rval.m_PersonalityDescription;

        m_PersonalityMale = rval.m_PersonalityMale;

        m_PersonalityFemale = rval.m_PersonalityFemale;

        m_Parchment = rval.m_Parchment;

        m_Capital = rval.m_Capital;

        m_CityStyle = rval.m_CityStyle;

        std::copy(rval.m_CityName, rval.m_CityName + rval.m_numCityName, m_CityName);

        m_NationUnitFlagValue = rval.m_NationUnitFlagValue;

        m_HappyInc = rval.m_HappyInc;

        m_ProductionBonus = rval.m_ProductionBonus;

        m_FoodBonus = rval.m_FoodBonus;

        m_CommerceBonus = rval.m_CommerceBonus;

        m_ScienceBonus = rval.m_ScienceBonus;

        m_IncreaseBoatMovement = rval.m_IncreaseBoatMovement;

        m_IncreaseHp = rval.m_IncreaseHp;

        m_OffenseBonusLandValue = rval.m_OffenseBonusLandValue;

        m_OffenseBonusWaterValue = rval.m_OffenseBonusWaterValue;

        m_OffenseBonusAirValue = rval.m_OffenseBonusAirValue;

        m_LowerCrimeValue = rval.m_LowerCrimeValue;

        m_LowerPeaceMovementValue = rval.m_LowerPeaceMovementValue;

        m_GoldPerCitizenValue = rval.m_GoldPerCitizenValue;

        m_SciencePerPopValue = rval.m_SciencePerPopValue;

        m_ReduceReadinessCostValue = rval.m_ReduceReadinessCostValue;

        m_GoldPerWaterTradeRouteValue = rval.m_GoldPerWaterTradeRouteValue;

        m_GoldPerTelevisionValue = rval.m_GoldPerTelevisionValue;

        m_GoldPerInternationalTradeRouteValue = rval.m_GoldPerInternationalTradeRouteValue;

        m_DecreaseMaintenanceValue = rval.m_DecreaseMaintenanceValue;

        m_PollutionPercentValue = rval.m_PollutionPercentValue;

        m_PollutionAmountValue = rval.m_PollutionAmountValue;

    }

    return *this;
}

const char *g_Civilisation_Tokens[] =
{
    "SingularCivName",
    "PluralCivName",
    "CountryName",
    "LeaderNameMale",
    "LeaderNameFemale",
    "EmissaryPhotoMale",
    "EmissaryPhotoFemale",
    "PersonalityDescription",
    "PersonalityMale",
    "PersonalityFemale",
    "Parchment",
    "Capital",
    "IsCapital",
    "CityStyle",
    "CityName",
    "NationUnitFlag",
    "NationUnitFlagValue",
    "HappyInc",
    "ProductionBonus",
    "FoodBonus",
    "CommerceBonus",
    "ScienceBonus",
    "IncreaseBoatMovement",
    "IncreaseHp",
    "OffenseBonusLand",
    "OffenseBonusLandValue",
    "OffenseBonusWater",
    "OffenseBonusWaterValue",
    "OffenseBonusAir",
    "OffenseBonusAirValue",
    "LowerCrime",
    "LowerCrimeValue",
    "LowerPeaceMovement",
    "LowerPeaceMovementValue",
    "GoldPerCitizen",
    "GoldPerCitizenValue",
    "SciencePerPop",
    "SciencePerPopValue",
    "ReduceReadinessCost",
    "ReduceReadinessCostValue",
    "GoldPerWaterTradeRoute",
    "GoldPerWaterTradeRouteValue",
    "GoldPerTelevision",
    "GoldPerTelevisionValue",
    "GoldPerInternationalTradeRoute",
    "GoldPerInternationalTradeRouteValue",
    "AllBoatsDeepWater",
    "DecreaseMaintenance",
    "DecreaseMaintenanceValue",
    "PreventConversion",
    "ProtectFromBarbarians",
    "PollutionPercent",
    "PollutionPercentValue",
    "PollutionAmount",
    "PollutionAmountValue",
    "CIV_SINGULAR",
    "CIV_PLURAL",
    "CIV_COUNTRY",
    "CIV_LEADER_NAME",
    "CIV_LEADER_NAME_FEMALE",
    "CIV_EMISSARY_PHOTO",
    "CIV_PERSONALITY_DESCRIPTION",
    "CIV_PERSONALITY_MALE",
    "CIV_PERSONALITY_FEMALE",
    "CIV_PARCHMENT",
    "CITY_IS_CAPITAL",
    "CIV_CITY_STYLE",
    "CIV_CITY_NAME",
};

CivilisationRecordAccessorInfo g_CivilisationRecord_Accessors[] =
{
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* SingularCivName */
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* PluralCivName */
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* CountryName */
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* LeaderNameMale */
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* LeaderNameFemale */
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* EmissaryPhotoMale */
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* EmissaryPhotoFemale */
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* PersonalityDescription */
    { &CivilisationRecord::GetPersonalityMaleIndex, NULL, NULL, NULL, NULL, NULL, NULL },
    { &CivilisationRecord::GetPersonalityFemaleIndex, NULL, NULL, NULL, NULL, NULL, NULL },
    { &CivilisationRecord::GetParchment, NULL, NULL, NULL, NULL, NULL, NULL },
    { &CivilisationRecord::GetCapital, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, &CivilisationRecord::GetIsCapital, NULL, NULL, NULL, NULL, NULL },
    { &CivilisationRecord::GetCityStyleIndex, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* CityName */
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* NationUnitFlag */
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* NationUnitFlag */
    { &CivilisationRecord::GetHappyInc, NULL, NULL, NULL, NULL, NULL, NULL },
    { &CivilisationRecord::GetProductionBonus, NULL, NULL, NULL, NULL, NULL, NULL },
    { &CivilisationRecord::GetFoodBonus, NULL, NULL, NULL, NULL, NULL, NULL },
    { &CivilisationRecord::GetCommerceBonus, NULL, NULL, NULL, NULL, NULL, NULL },
    { &CivilisationRecord::GetScienceBonus, NULL, NULL, NULL, NULL, NULL, NULL },
    { &CivilisationRecord::GetIncreaseBoatMovement, NULL, NULL, NULL, NULL, NULL, NULL },
    { &CivilisationRecord::GetIncreaseHp, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, &CivilisationRecord::GetOffenseBonusLand, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* OffenseBonusLand */
    { NULL, NULL, NULL, NULL, &CivilisationRecord::GetOffenseBonusWater, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* OffenseBonusWater */
    { NULL, NULL, NULL, NULL, &CivilisationRecord::GetOffenseBonusAir, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* OffenseBonusAir */
    { NULL, NULL, NULL, NULL, &CivilisationRecord::GetLowerCrime, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* LowerCrime */
    { NULL, NULL, NULL, NULL, &CivilisationRecord::GetLowerPeaceMovement, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* LowerPeaceMovement */
    { NULL, NULL, NULL, &CivilisationRecord::GetGoldPerCitizen, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* GoldPerCitizen */
    { NULL, NULL, NULL, NULL, &CivilisationRecord::GetSciencePerPop, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* SciencePerPop */
    { NULL, NULL, NULL, &CivilisationRecord::GetReduceReadinessCost, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* ReduceReadinessCost */
    { NULL, NULL, NULL, &CivilisationRecord::GetGoldPerWaterTradeRoute, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* GoldPerWaterTradeRoute */
    { NULL, NULL, NULL, &CivilisationRecord::GetGoldPerTelevision, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* GoldPerTelevision */
    { NULL, NULL, NULL, &CivilisationRecord::GetGoldPerInternationalTradeRoute, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* GoldPerInternationalTradeRoute */
    { NULL, &CivilisationRecord::GetAllBoatsDeepWater, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, &CivilisationRecord::GetDecreaseMaintenance, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* DecreaseMaintenance */
    { NULL, &CivilisationRecord::GetPreventConversion, NULL, NULL, NULL, NULL, NULL },
    { NULL, &CivilisationRecord::GetProtectFromBarbarians, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, &CivilisationRecord::GetPollutionPercent, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* PollutionPercent */
    { NULL, NULL, NULL, NULL, &CivilisationRecord::GetPollutionAmount, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* PollutionAmount */
};

#define k_Token_Civilisation_SingularCivName     ((k_Token_Custom_Base) + 0)
#define k_Token_Civilisation_PluralCivName       ((k_Token_Custom_Base) + 1)
#define k_Token_Civilisation_CountryName         ((k_Token_Custom_Base) + 2)
#define k_Token_Civilisation_LeaderNameMale      ((k_Token_Custom_Base) + 3)
#define k_Token_Civilisation_LeaderNameFemale    ((k_Token_Custom_Base) + 4)
#define k_Token_Civilisation_EmissaryPhotoMale   ((k_Token_Custom_Base) + 5)
#define k_Token_Civilisation_EmissaryPhotoFemale ((k_Token_Custom_Base) + 6)
#define k_Token_Civilisation_PersonalityDescription ((k_Token_Custom_Base) + 7)
#define k_Token_Civilisation_PersonalityMale     ((k_Token_Custom_Base) + 8)
#define k_Token_Civilisation_PersonalityFemale   ((k_Token_Custom_Base) + 9)
#define k_Token_Civilisation_Parchment           ((k_Token_Custom_Base) + 10)
#define k_Token_Civilisation_Capital             ((k_Token_Custom_Base) + 11)
#define k_Token_Civilisation_IsCapital           ((k_Token_Custom_Base) + 12)
#define k_Token_Civilisation_CityStyle           ((k_Token_Custom_Base) + 13)
#define k_Token_Civilisation_CityName            ((k_Token_Custom_Base) + 14)
#define k_Token_Civilisation_NationUnitFlag      ((k_Token_Custom_Base) + 15)
#define k_Token_Civilisation_NationUnitFlag_Value ((k_Token_Custom_Base) + 16)
#define k_Token_Civilisation_HappyInc            ((k_Token_Custom_Base) + 17)
#define k_Token_Civilisation_ProductionBonus     ((k_Token_Custom_Base) + 18)
#define k_Token_Civilisation_FoodBonus           ((k_Token_Custom_Base) + 19)
#define k_Token_Civilisation_CommerceBonus       ((k_Token_Custom_Base) + 20)
#define k_Token_Civilisation_ScienceBonus        ((k_Token_Custom_Base) + 21)
#define k_Token_Civilisation_IncreaseBoatMovement ((k_Token_Custom_Base) + 22)
#define k_Token_Civilisation_IncreaseHp          ((k_Token_Custom_Base) + 23)
#define k_Token_Civilisation_OffenseBonusLand    ((k_Token_Custom_Base) + 24)
#define k_Token_Civilisation_OffenseBonusLand_Value ((k_Token_Custom_Base) + 25)
#define k_Token_Civilisation_OffenseBonusWater   ((k_Token_Custom_Base) + 26)
#define k_Token_Civilisation_OffenseBonusWater_Value ((k_Token_Custom_Base) + 27)
#define k_Token_Civilisation_OffenseBonusAir     ((k_Token_Custom_Base) + 28)
#define k_Token_Civilisation_OffenseBonusAir_Value ((k_Token_Custom_Base) + 29)
#define k_Token_Civilisation_LowerCrime          ((k_Token_Custom_Base) + 30)
#define k_Token_Civilisation_LowerCrime_Value    ((k_Token_Custom_Base) + 31)
#define k_Token_Civilisation_LowerPeaceMovement  ((k_Token_Custom_Base) + 32)
#define k_Token_Civilisation_LowerPeaceMovement_Value ((k_Token_Custom_Base) + 33)
#define k_Token_Civilisation_GoldPerCitizen      ((k_Token_Custom_Base) + 34)
#define k_Token_Civilisation_GoldPerCitizen_Value ((k_Token_Custom_Base) + 35)
#define k_Token_Civilisation_SciencePerPop       ((k_Token_Custom_Base) + 36)
#define k_Token_Civilisation_SciencePerPop_Value ((k_Token_Custom_Base) + 37)
#define k_Token_Civilisation_ReduceReadinessCost ((k_Token_Custom_Base) + 38)
#define k_Token_Civilisation_ReduceReadinessCost_Value ((k_Token_Custom_Base) + 39)
#define k_Token_Civilisation_GoldPerWaterTradeRoute ((k_Token_Custom_Base) + 40)
#define k_Token_Civilisation_GoldPerWaterTradeRoute_Value ((k_Token_Custom_Base) + 41)
#define k_Token_Civilisation_GoldPerTelevision   ((k_Token_Custom_Base) + 42)
#define k_Token_Civilisation_GoldPerTelevision_Value ((k_Token_Custom_Base) + 43)
#define k_Token_Civilisation_GoldPerInternationalTradeRoute ((k_Token_Custom_Base) + 44)
#define k_Token_Civilisation_GoldPerInternationalTradeRoute_Value ((k_Token_Custom_Base) + 45)
#define k_Token_Civilisation_AllBoatsDeepWater   ((k_Token_Custom_Base) + 46)
#define k_Token_Civilisation_DecreaseMaintenance ((k_Token_Custom_Base) + 47)
#define k_Token_Civilisation_DecreaseMaintenance_Value ((k_Token_Custom_Base) + 48)
#define k_Token_Civilisation_PreventConversion   ((k_Token_Custom_Base) + 49)
#define k_Token_Civilisation_ProtectFromBarbarians ((k_Token_Custom_Base) + 50)
#define k_Token_Civilisation_PollutionPercent    ((k_Token_Custom_Base) + 51)
#define k_Token_Civilisation_PollutionPercent_Value ((k_Token_Custom_Base) + 52)
#define k_Token_Civilisation_PollutionAmount     ((k_Token_Custom_Base) + 53)
#define k_Token_Civilisation_PollutionAmount_Value ((k_Token_Custom_Base) + 54)
#define k_Token_Civilisation_CIV_SINGULAR        ((k_Token_Custom_Base) + 55)
#define k_Token_Civilisation_CIV_PLURAL          ((k_Token_Custom_Base) + 56)
#define k_Token_Civilisation_CIV_COUNTRY         ((k_Token_Custom_Base) + 57)
#define k_Token_Civilisation_CIV_LEADER_NAME     ((k_Token_Custom_Base) + 58)
#define k_Token_Civilisation_CIV_LEADER_NAME_FEMALE ((k_Token_Custom_Base) + 59)
#define k_Token_Civilisation_CIV_EMISSARY_PHOTO  ((k_Token_Custom_Base) + 60)
#define k_Token_Civilisation_CIV_PERSONALITY_DESCRIPTION ((k_Token_Custom_Base) + 61)
#define k_Token_Civilisation_CIV_PERSONALITY_MALE ((k_Token_Custom_Base) + 62)
#define k_Token_Civilisation_CIV_PERSONALITY_FEMALE ((k_Token_Custom_Base) + 63)
#define k_Token_Civilisation_CIV_PARCHMENT       ((k_Token_Custom_Base) + 64)
#define k_Token_Civilisation_CITY_IS_CAPITAL     ((k_Token_Custom_Base) + 65)
#define k_Token_Civilisation_CIV_CITY_STYLE      ((k_Token_Custom_Base) + 66)
#define k_Token_Civilisation_CIV_CITY_NAME       ((k_Token_Custom_Base) + 67)
#define k_Token_Civilisation_Max                 ((k_Token_Custom_Base) + 68)


static BitArray s_ParsedTokens(68);
void CivilisationRecord::CheckRequiredFields(DBLexer *lex)
{
    if(!s_ParsedTokens.Bit(k_Token_Civilisation_SingularCivName - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Civilisation_CIV_SINGULAR - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field SingularCivName missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Civilisation_PluralCivName - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Civilisation_CIV_PLURAL - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PluralCivName missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Civilisation_CountryName - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Civilisation_CIV_COUNTRY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field CountryName missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Civilisation_LeaderNameMale - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Civilisation_CIV_LEADER_NAME - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field LeaderNameMale missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Civilisation_LeaderNameFemale - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Civilisation_CIV_LEADER_NAME_FEMALE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field LeaderNameFemale missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Civilisation_EmissaryPhotoMale - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Civilisation_CIV_EMISSARY_PHOTO - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field EmissaryPhotoMale missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Civilisation_EmissaryPhotoFemale - k_Token_Custom_Base)) {
        m_EmissaryPhotoFemale = m_EmissaryPhotoMale;
    }
    if(!s_ParsedTokens.Bit(k_Token_Civilisation_PersonalityDescription - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Civilisation_CIV_PERSONALITY_DESCRIPTION - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PersonalityDescription missing"));
    }
}

sint32 CivilisationRecord::Parse(DBLexer *lex, sint32 numRecords)
{
    bool done = false;
    sint32 result = 0;
    sint32 tok;
    s_ParsedTokens.Clear();
    lex->SetTokens(g_Civilisation_Tokens, k_Token_Civilisation_Max);
    tok = lex->GetToken();
    if(tok == k_Token_Int) {
        tok = lex->GetToken(); // Accept number to make new db compatible with the old database format
    }
    if(tok != k_Token_Name) {
        char newName[256];
        sprintf(newName, "CIVILISATION_%i", numRecords);
        if(!g_theStringDB->GetStringID(newName, m_name)) {
            g_theStringDB->InsertStr(newName, newName);
            if(!g_theStringDB->GetStringID(newName, m_name))
                SetTextName(newName);
        }
    }
    else{
        if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name)) {
            g_theStringDB->InsertStr(lex->GetTokenText(), lex->GetTokenText());
            if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name))
                SetTextName(lex->GetTokenText());
        }
        tok = lex->GetToken();
    }


    if(tok != k_Token_OpenBrace) {
        DBERROR(("Missing open brace"));
        return 0;
    }

    while(!done) {
        tok = lex->GetToken();
        if(tok >= k_Token_Custom_Base && tok < k_Token_Civilisation_Max) {
            s_ParsedTokens.SetBit(tok - k_Token_Custom_Base);
        }
        switch(tok) {
            case k_Token_Civilisation_SingularCivName:
            case k_Token_Civilisation_CIV_SINGULAR:
                if(!lex->GetStringIdAssignment(m_SingularCivName)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_PluralCivName:
            case k_Token_Civilisation_CIV_PLURAL:
                if(!lex->GetStringIdAssignment(m_PluralCivName)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_CountryName:
            case k_Token_Civilisation_CIV_COUNTRY:
                if(!lex->GetStringIdAssignment(m_CountryName)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_LeaderNameMale:
            case k_Token_Civilisation_CIV_LEADER_NAME:
                if(!lex->GetStringIdAssignment(m_LeaderNameMale)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_LeaderNameFemale:
            case k_Token_Civilisation_CIV_LEADER_NAME_FEMALE:
                if(!lex->GetStringIdAssignment(m_LeaderNameFemale)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_EmissaryPhotoMale:
            case k_Token_Civilisation_CIV_EMISSARY_PHOTO:
                if(!lex->GetStringIdAssignment(m_EmissaryPhotoMale)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_EmissaryPhotoFemale:
                if(!lex->GetStringIdAssignment(m_EmissaryPhotoFemale)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_PersonalityDescription:
            case k_Token_Civilisation_CIV_PERSONALITY_DESCRIPTION:
                if(!lex->GetStringIdAssignment(m_PersonalityDescription)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_PersonalityMale:
            case k_Token_Civilisation_CIV_PERSONALITY_MALE:
                if (!g_thePersonalityDB->GetRecordFromLexer(lex, m_PersonalityMale)) {
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_PersonalityFemale:
            case k_Token_Civilisation_CIV_PERSONALITY_FEMALE:
                if (!g_thePersonalityDB->GetRecordFromLexer(lex, m_PersonalityFemale)) {
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_Parchment:
            case k_Token_Civilisation_CIV_PARCHMENT:
                if(!lex->GetIntAssignment(m_Parchment)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_Capital:
                if(!lex->GetIntAssignment(m_Capital)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_IsCapital:
            case k_Token_Civilisation_CITY_IS_CAPITAL:
                m_flags0 |= k_Civilisation_IsCapital_Bit;
                break;
            case k_Token_Civilisation_CityStyle:
            case k_Token_Civilisation_CIV_CITY_STYLE:
                if (!g_theCityStyleDB->GetRecordFromLexer(lex, m_CityStyle)) {
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_CityName:
            case k_Token_Civilisation_CIV_CITY_NAME:
                if(!CTPRecord::ParseStringIdInArray(lex, (sint32 *)m_CityName, &m_numCityName, k_MAX_CityName)) {
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_NationUnitFlag:
                m_flags0 |= k_Civilisation_NationUnitFlag_Bit;
                if(!g_theMapIconDB->GetRecordFromLexer(lex, m_NationUnitFlagValue)) {
                    DBERROR(("Expected record"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_HappyInc:
                if(!lex->GetIntAssignment(m_HappyInc)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_ProductionBonus:
                if(!lex->GetIntAssignment(m_ProductionBonus)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_FoodBonus:
                if(!lex->GetIntAssignment(m_FoodBonus)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_CommerceBonus:
                if(!lex->GetIntAssignment(m_CommerceBonus)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_ScienceBonus:
                if(!lex->GetIntAssignment(m_ScienceBonus)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_IncreaseBoatMovement:
                if(!lex->GetIntAssignment(m_IncreaseBoatMovement)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_IncreaseHp:
                if(!lex->GetIntAssignment(m_IncreaseHp)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_OffenseBonusLand:
                m_flags0 |= k_Civilisation_OffenseBonusLand_Bit;
                if(!lex->GetFloatAssignment(m_OffenseBonusLandValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_OffenseBonusWater:
                m_flags0 |= k_Civilisation_OffenseBonusWater_Bit;
                if(!lex->GetFloatAssignment(m_OffenseBonusWaterValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_OffenseBonusAir:
                m_flags0 |= k_Civilisation_OffenseBonusAir_Bit;
                if(!lex->GetFloatAssignment(m_OffenseBonusAirValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_LowerCrime:
                m_flags0 |= k_Civilisation_LowerCrime_Bit;
                if(!lex->GetFloatAssignment(m_LowerCrimeValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_LowerPeaceMovement:
                m_flags0 |= k_Civilisation_LowerPeaceMovement_Bit;
                if(!lex->GetFloatAssignment(m_LowerPeaceMovementValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_GoldPerCitizen:
                m_flags0 |= k_Civilisation_GoldPerCitizen_Bit;
                if(!lex->GetIntAssignment(m_GoldPerCitizenValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_SciencePerPop:
                m_flags0 |= k_Civilisation_SciencePerPop_Bit;
                if(!lex->GetFloatAssignment(m_SciencePerPopValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_ReduceReadinessCost:
                m_flags0 |= k_Civilisation_ReduceReadinessCost_Bit;
                if(!lex->GetIntAssignment(m_ReduceReadinessCostValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_GoldPerWaterTradeRoute:
                m_flags0 |= k_Civilisation_GoldPerWaterTradeRoute_Bit;
                if(!lex->GetIntAssignment(m_GoldPerWaterTradeRouteValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_GoldPerTelevision:
                m_flags0 |= k_Civilisation_GoldPerTelevision_Bit;
                if(!lex->GetIntAssignment(m_GoldPerTelevisionValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_GoldPerInternationalTradeRoute:
                m_flags0 |= k_Civilisation_GoldPerInternationalTradeRoute_Bit;
                if(!lex->GetIntAssignment(m_GoldPerInternationalTradeRouteValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_AllBoatsDeepWater:
                m_flags0 |= k_Civilisation_AllBoatsDeepWater_Bit;
                break;
            case k_Token_Civilisation_DecreaseMaintenance:
                m_flags0 |= k_Civilisation_DecreaseMaintenance_Bit;
                if(!lex->GetIntAssignment(m_DecreaseMaintenanceValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_PreventConversion:
                m_flags0 |= k_Civilisation_PreventConversion_Bit;
                break;
            case k_Token_Civilisation_ProtectFromBarbarians:
                m_flags0 |= k_Civilisation_ProtectFromBarbarians_Bit;
                break;
            case k_Token_Civilisation_PollutionPercent:
                m_flags0 |= k_Civilisation_PollutionPercent_Bit;
                if(!lex->GetFloatAssignment(m_PollutionPercentValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Civilisation_PollutionAmount:
                m_flags0 |= k_Civilisation_PollutionAmount_Bit;
                if(!lex->GetFloatAssignment(m_PollutionAmountValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_CloseBrace:
                done = true;
                result = 1;
                break;
            default:
                if(!lex->GetStringId(m_SingularCivName)) {
                    DBERROR(("Unknown token"));
                    done = true; break;
                }
                break;
        }
    }
    CheckRequiredFields(lex);
    lex->RestoreTokens();
    return result;
}

void CivilisationRecord::ResolveDBReferences()
{
    if(m_PersonalityMale & 0x80000000) {
        sint32 id = m_PersonalityMale & 0x7fffffff;
        if(!g_thePersonalityDB->GetNamedItem(id, m_PersonalityMale)) {
            c3errors_ErrorDialog("DB", "%s not found in Personality database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_PersonalityMale == 0x7fffffff) {
        m_PersonalityMale = -1;
    }
    if(m_PersonalityFemale & 0x80000000) {
        sint32 id = m_PersonalityFemale & 0x7fffffff;
        if(!g_thePersonalityDB->GetNamedItem(id, m_PersonalityFemale)) {
            c3errors_ErrorDialog("DB", "%s not found in Personality database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_PersonalityFemale == 0x7fffffff) {
        m_PersonalityFemale = -1;
    }
    if(m_CityStyle & 0x80000000) {
        sint32 id = m_CityStyle & 0x7fffffff;
        if(!g_theCityStyleDB->GetNamedItem(id, m_CityStyle)) {
            c3errors_ErrorDialog("DB", "%s not found in CityStyle database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_CityStyle == 0x7fffffff) {
        m_CityStyle = -1;
    }
    if(m_NationUnitFlagValue & 0x80000000) {
        sint32 id = m_NationUnitFlagValue & 0x7fffffff;
        if(!g_theMapIconDB->GetNamedItem(id, m_NationUnitFlagValue)) {
            c3errors_ErrorDialog("DB", "%s not found in MapIcon database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_NationUnitFlagValue == 0x7fffffff) {
        m_NationUnitFlagValue = -1;
    }
}

void CivilisationRecord::Merge(const CivilisationRecord & rval){
    m_numCityName = rval.m_numCityName;
    std::copy(rval.m_CityName, rval.m_CityName + rval.m_numCityName, m_CityName);

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_NationUnitFlag_Bit)
    {
        m_NationUnitFlagValue = rval.m_NationUnitFlagValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_OffenseBonusLand_Bit)
    {
        m_OffenseBonusLandValue = rval.m_OffenseBonusLandValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_OffenseBonusWater_Bit)
    {
        m_OffenseBonusWaterValue = rval.m_OffenseBonusWaterValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_OffenseBonusAir_Bit)
    {
        m_OffenseBonusAirValue = rval.m_OffenseBonusAirValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_LowerCrime_Bit)
    {
        m_LowerCrimeValue = rval.m_LowerCrimeValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_LowerPeaceMovement_Bit)
    {
        m_LowerPeaceMovementValue = rval.m_LowerPeaceMovementValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_GoldPerCitizen_Bit)
    {
        m_GoldPerCitizenValue = rval.m_GoldPerCitizenValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_SciencePerPop_Bit)
    {
        m_SciencePerPopValue = rval.m_SciencePerPopValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_ReduceReadinessCost_Bit)
    {
        m_ReduceReadinessCostValue = rval.m_ReduceReadinessCostValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_GoldPerWaterTradeRoute_Bit)
    {
        m_GoldPerWaterTradeRouteValue = rval.m_GoldPerWaterTradeRouteValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_GoldPerTelevision_Bit)
    {
        m_GoldPerTelevisionValue = rval.m_GoldPerTelevisionValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_GoldPerInternationalTradeRoute_Bit)
    {
        m_GoldPerInternationalTradeRouteValue = rval.m_GoldPerInternationalTradeRouteValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_DecreaseMaintenance_Bit)
    {
        m_DecreaseMaintenanceValue = rval.m_DecreaseMaintenanceValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_PollutionPercent_Bit)
    {
        m_PollutionPercentValue = rval.m_PollutionPercentValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Civilisation_PollutionAmount_Bit)
    {
        m_PollutionAmountValue = rval.m_PollutionAmountValue;
    }

}

PersonalityRecord const * CivilisationRecord::GetPersonalityMale() const
{
    return g_thePersonalityDB->Get(m_PersonalityMale);
}

PersonalityRecord const * CivilisationRecord::GetPersonalityFemale() const
{
    return g_thePersonalityDB->Get(m_PersonalityFemale);
}

CityStyleRecord const * CivilisationRecord::GetCityStyle() const
{
    return g_theCityStyleDB->Get(m_CityStyle);
}

sint32 CivilisationRecord::GetCityName(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numCityName);
    if((index < 0) || (index >= m_numCityName)) {
        return 0;
    }
    return m_CityName[index];
}

MapIconRecord const * CivilisationRecord::GetNationUnitFlagPtr() const
{
    return g_theMapIconDB->Get(m_NationUnitFlagValue);
}

