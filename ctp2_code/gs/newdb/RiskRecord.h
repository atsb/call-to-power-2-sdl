
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef RISK_RECORD_H__
#define RISK_RECORD_H__

class RiskRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;

#define k_Num_RiskRecord_Tokens 18


class RiskRecord : public CTPRecord
{
public:
    typedef sint32 (RiskRecord::*IntAccessor)() const;
    typedef bool   (RiskRecord::*BoolAccessor)() const;
    typedef double (RiskRecord::*FloatAccessor)() const ;
    typedef bool   (RiskRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (RiskRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (RiskRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (RiskRecord::*FloatArrayAccessor)(sint32 index) const;

private:
    double            m_HutChanceBarbarian;
    double            m_HutChanceAdvance;
    double            m_HutChanceUnit;
    double            m_HutChanceCity;
    double            m_HutChanceSettler;
    double            m_HutChanceGold;
    sint32            m_HutMaxBarbarians;
    sint32            m_HutMaxAdvancePrerequisites;
    sint32            m_HutMaxUnitPrerequisites;
    sint32            m_HutMaxGold;
    sint32            m_HutMinGold;
    double            m_BarbarianChance;
    sint32            m_BarbarianUnitRankMax;
    sint32            m_BarbarianUnitRankMin;
    sint32            m_MaxSpontaniousBarbarians;
    sint32            m_BarbarianFirstTurn;
    sint32            m_BarbarianLastTurn;
    sint32            m_BarbarianMinimumDistance;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    RiskRecord() { Init(); };
    RiskRecord(CivArchive &archive) { Serialize(archive); };
    RiskRecord(RiskRecord const & rval) { Init(); *this = rval; }
    ~RiskRecord();
    RiskRecord const & operator = (RiskRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const RiskRecord & rval);

    double GetHutChanceBarbarian() const { return m_HutChanceBarbarian; }
    double GetHutChanceAdvance() const { return m_HutChanceAdvance; }
    double GetHutChanceUnit() const { return m_HutChanceUnit; }
    double GetHutChanceCity() const { return m_HutChanceCity; }
    double GetHutChanceSettler() const { return m_HutChanceSettler; }
    double GetHutChanceGold() const { return m_HutChanceGold; }
    sint32 GetHutMaxBarbarians() const { return m_HutMaxBarbarians; }
    sint32 GetHutMaxAdvancePrerequisites() const { return m_HutMaxAdvancePrerequisites; }
    sint32 GetHutMaxUnitPrerequisites() const { return m_HutMaxUnitPrerequisites; }
    sint32 GetHutMaxGold() const { return m_HutMaxGold; }
    sint32 GetHutMinGold() const { return m_HutMinGold; }
    double GetBarbarianChance() const { return m_BarbarianChance; }
    sint32 GetBarbarianUnitRankMax() const { return m_BarbarianUnitRankMax; }
    sint32 GetBarbarianUnitRankMin() const { return m_BarbarianUnitRankMin; }
    sint32 GetMaxSpontaniousBarbarians() const { return m_MaxSpontaniousBarbarians; }
    sint32 GetBarbarianFirstTurn() const { return m_BarbarianFirstTurn; }
    sint32 GetBarbarianLastTurn() const { return m_BarbarianLastTurn; }
    sint32 GetBarbarianMinimumDistance() const { return m_BarbarianMinimumDistance; }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* RiskRecord */

struct RiskRecordAccessorInfo
{
    RiskRecord::IntAccessor        m_intAccessor;
    RiskRecord::BoolAccessor       m_boolAccessor;
    RiskRecord::FloatAccessor      m_floatAccessor;
    RiskRecord::BitIntAccessor     m_bitIntAccessor;
    RiskRecord::BitFloatAccessor   m_bitFloatAccessor;
    RiskRecord::IntArrayAccessor   m_intArrayAccessor;
    RiskRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern RiskRecordAccessorInfo      g_RiskRecord_Accessors[];
extern CTPDatabase<RiskRecord> *   g_theRiskDB;

extern const char * g_Risk_Tokens[];

#endif
