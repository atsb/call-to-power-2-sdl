
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef AGE_RECORD_H__
#define AGE_RECORD_H__

class AgeRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;

#define k_Num_AgeRecord_Tokens 4


class AgeRecord : public CTPRecord
{
public:
    typedef sint32 (AgeRecord::*IntAccessor)() const;
    typedef bool   (AgeRecord::*BoolAccessor)() const;
    typedef double (AgeRecord::*FloatAccessor)() const ;
    typedef bool   (AgeRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (AgeRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (AgeRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (AgeRecord::*FloatArrayAccessor)(sint32 index) const;

private:
    sint32            m_Age;
    sint32            m_StartingRound;
    sint32            m_NeedAdvances;
    char *            m_SlicObject;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    AgeRecord() { Init(); };
    AgeRecord(CivArchive &archive) { Serialize(archive); };
    AgeRecord(AgeRecord const & rval) { Init(); *this = rval; }
    ~AgeRecord();
    AgeRecord const & operator = (AgeRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const AgeRecord & rval);

    sint32 GetAge() const { return m_Age; }
    sint32 GetStartingRound() const { return m_StartingRound; }
    sint32 GetNeedAdvances() const { return m_NeedAdvances; }
    char const * GetSlicObject() const { return m_SlicObject; }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* AgeRecord */

struct AgeRecordAccessorInfo
{
    AgeRecord::IntAccessor        m_intAccessor;
    AgeRecord::BoolAccessor       m_boolAccessor;
    AgeRecord::FloatAccessor      m_floatAccessor;
    AgeRecord::BitIntAccessor     m_bitIntAccessor;
    AgeRecord::BitFloatAccessor   m_bitFloatAccessor;
    AgeRecord::IntArrayAccessor   m_intArrayAccessor;
    AgeRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern AgeRecordAccessorInfo      g_AgeRecord_Accessors[];
extern CTPDatabase<AgeRecord> *   g_theAgeDB;

extern const char * g_Age_Tokens[];

#endif
