
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#include "c3.h"
#include "LeaderRecord.h"

#include <algorithm>
#include "BitArray.h"
#include "c3errors.h"
#include "CTPDatabase.h"
#include "DBLexer.h"
#include "DBTokens.h"
#include "StrDB.h"

#include "PersonalityRecord.h"

CTPDatabase<LeaderRecord> *g_theLeaderDB = NULL;

void LeaderRecord::Init()
{
    m_flags0 = 0;
    m_LeaderName = 0;
    m_EmissaryPhoto = 0;
    m_PersonalityDescription = 0;
    m_Personality = 0x7fffffff;
    m_Parchment = 0;
    m_Capital = 0;
    m_HappyInc = 0;
    m_ProductionBonus = 0;
    m_FoodBonus = 0;
    m_CommerceBonus = 0;
    m_ScienceBonus = 0;
    m_IncreaseBoatMovement = 0;
    m_IncreaseHp = 0;
    m_OffenseBonusLandValue = 0.000000;
    m_OffenseBonusWaterValue = 0.000000;
    m_OffenseBonusAirValue = 0.000000;
    m_LowerCrimeValue = 0.000000;
    m_LowerPeaceMovementValue = 0.000000;
    m_GoldPerCitizenValue = 0;
    m_SciencePerPopValue = 0.000000;
    m_ReduceReadinessCostValue = 0;
    m_GoldPerWaterTradeRouteValue = 0;
    m_GoldPerTelevisionValue = 0;
    m_GoldPerInternationalTradeRouteValue = 0;
    m_DecreaseMaintenanceValue = 0;
    m_PollutionPercentValue = 0.000000;
    m_PollutionAmountValue = 0.000000;
    //GovMod Specific flag initialization
    m_hasGovernmentsModified = false;
}

void LeaderRecord::Serialize(CivArchive &archive)
{
    if(archive.IsStoring()) {
        archive << m_index;
        if(m_name >= 0){
            archive << GetIDText();
        }
        else{
            archive << static_cast<MBCHAR*>(NULL);
        }
        archive << m_flags0;
        {
            MBCHAR* tmpString = g_theStringDB->GetIdStr(m_LeaderName);
            archive << tmpString;
        }

        {
            MBCHAR* tmpString = g_theStringDB->GetIdStr(m_EmissaryPhoto);
            archive << tmpString;
        }

        {
            MBCHAR* tmpString = g_theStringDB->GetIdStr(m_PersonalityDescription);
            archive << tmpString;
        }

        archive << m_Personality;
        archive << m_Parchment;
        archive << m_Capital;
        archive << m_HappyInc;
        archive << m_ProductionBonus;
        archive << m_FoodBonus;
        archive << m_CommerceBonus;
        archive << m_ScienceBonus;
        archive << m_IncreaseBoatMovement;
        archive << m_IncreaseHp;
        archive << m_OffenseBonusLandValue;
        archive << m_OffenseBonusWaterValue;
        archive << m_OffenseBonusAirValue;
        archive << m_LowerCrimeValue;
        archive << m_LowerPeaceMovementValue;
        archive << m_GoldPerCitizenValue;
        archive << m_SciencePerPopValue;
        archive << m_ReduceReadinessCostValue;
        archive << m_GoldPerWaterTradeRouteValue;
        archive << m_GoldPerTelevisionValue;
        archive << m_GoldPerInternationalTradeRouteValue;
        archive << m_DecreaseMaintenanceValue;
        archive << m_PollutionPercentValue;
        archive << m_PollutionAmountValue;
    } else {
        //GovMod Specific flag initialization
        m_hasGovernmentsModified = false;

        archive >> m_index;
        {
            MBCHAR* tmpStr = NULL;
            archive >> tmpStr;
            g_theStringDB->GetStringID(tmpStr, m_name);
            SetTextName(g_theStringDB->GetNameStr(m_name));
        }
        archive >> m_flags0;
        {
            MBCHAR* tmpString = NULL;
            archive >> tmpString;
            g_theStringDB->GetStringID(tmpString, m_LeaderName);
            delete[] tmpString;
        }

        {
            MBCHAR* tmpString = NULL;
            archive >> tmpString;
            g_theStringDB->GetStringID(tmpString, m_EmissaryPhoto);
            delete[] tmpString;
        }

        {
            MBCHAR* tmpString = NULL;
            archive >> tmpString;
            g_theStringDB->GetStringID(tmpString, m_PersonalityDescription);
            delete[] tmpString;
        }

        archive >> m_Personality;
        archive >> m_Parchment;
        archive >> m_Capital;
        archive >> m_HappyInc;
        archive >> m_ProductionBonus;
        archive >> m_FoodBonus;
        archive >> m_CommerceBonus;
        archive >> m_ScienceBonus;
        archive >> m_IncreaseBoatMovement;
        archive >> m_IncreaseHp;
        archive >> m_OffenseBonusLandValue;
        archive >> m_OffenseBonusWaterValue;
        archive >> m_OffenseBonusAirValue;
        archive >> m_LowerCrimeValue;
        archive >> m_LowerPeaceMovementValue;
        archive >> m_GoldPerCitizenValue;
        archive >> m_SciencePerPopValue;
        archive >> m_ReduceReadinessCostValue;
        archive >> m_GoldPerWaterTradeRouteValue;
        archive >> m_GoldPerTelevisionValue;
        archive >> m_GoldPerInternationalTradeRouteValue;
        archive >> m_DecreaseMaintenanceValue;
        archive >> m_PollutionPercentValue;
        archive >> m_PollutionAmountValue;
    }
}

LeaderRecord::~LeaderRecord()
{
}

LeaderRecord const & LeaderRecord::operator = (LeaderRecord const & rval)
{
    if (this != &rval)
    {
        m_index = rval.m_index;
        m_flags0 = rval.m_flags0;
        m_hasGovernmentsModified = rval.m_hasGovernmentsModified;

        m_LeaderName = rval.m_LeaderName;

        m_EmissaryPhoto = rval.m_EmissaryPhoto;

        m_PersonalityDescription = rval.m_PersonalityDescription;

        m_Personality = rval.m_Personality;

        m_Parchment = rval.m_Parchment;

        m_Capital = rval.m_Capital;

        m_HappyInc = rval.m_HappyInc;

        m_ProductionBonus = rval.m_ProductionBonus;

        m_FoodBonus = rval.m_FoodBonus;

        m_CommerceBonus = rval.m_CommerceBonus;

        m_ScienceBonus = rval.m_ScienceBonus;

        m_IncreaseBoatMovement = rval.m_IncreaseBoatMovement;

        m_IncreaseHp = rval.m_IncreaseHp;

        m_OffenseBonusLandValue = rval.m_OffenseBonusLandValue;

        m_OffenseBonusWaterValue = rval.m_OffenseBonusWaterValue;

        m_OffenseBonusAirValue = rval.m_OffenseBonusAirValue;

        m_LowerCrimeValue = rval.m_LowerCrimeValue;

        m_LowerPeaceMovementValue = rval.m_LowerPeaceMovementValue;

        m_GoldPerCitizenValue = rval.m_GoldPerCitizenValue;

        m_SciencePerPopValue = rval.m_SciencePerPopValue;

        m_ReduceReadinessCostValue = rval.m_ReduceReadinessCostValue;

        m_GoldPerWaterTradeRouteValue = rval.m_GoldPerWaterTradeRouteValue;

        m_GoldPerTelevisionValue = rval.m_GoldPerTelevisionValue;

        m_GoldPerInternationalTradeRouteValue = rval.m_GoldPerInternationalTradeRouteValue;

        m_DecreaseMaintenanceValue = rval.m_DecreaseMaintenanceValue;

        m_PollutionPercentValue = rval.m_PollutionPercentValue;

        m_PollutionAmountValue = rval.m_PollutionAmountValue;

    }

    return *this;
}

const char *g_Leader_Tokens[] =
{
    "LeaderName",
    "EmissaryPhoto",
    "PersonalityDescription",
    "Personality",
    "Parchment",
    "Capital",
    "IsMale",
    "IsFemale",
    "HappyInc",
    "ProductionBonus",
    "FoodBonus",
    "CommerceBonus",
    "ScienceBonus",
    "IncreaseBoatMovement",
    "IncreaseHp",
    "OffenseBonusLand",
    "OffenseBonusLandValue",
    "OffenseBonusWater",
    "OffenseBonusWaterValue",
    "OffenseBonusAir",
    "OffenseBonusAirValue",
    "LowerCrime",
    "LowerCrimeValue",
    "LowerPeaceMovement",
    "LowerPeaceMovementValue",
    "GoldPerCitizen",
    "GoldPerCitizenValue",
    "SciencePerPop",
    "SciencePerPopValue",
    "ReduceReadinessCost",
    "ReduceReadinessCostValue",
    "GoldPerWaterTradeRoute",
    "GoldPerWaterTradeRouteValue",
    "GoldPerTelevision",
    "GoldPerTelevisionValue",
    "GoldPerInternationalTradeRoute",
    "GoldPerInternationalTradeRouteValue",
    "AllBoatsDeepWater",
    "DecreaseMaintenance",
    "DecreaseMaintenanceValue",
    "PreventConversion",
    "ProtectFromBarbarians",
    "PollutionPercent",
    "PollutionPercentValue",
    "PollutionAmount",
    "PollutionAmountValue",
};

LeaderRecordAccessorInfo g_LeaderRecord_Accessors[] =
{
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* LeaderName */
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* EmissaryPhoto */
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* PersonalityDescription */
    { &LeaderRecord::GetPersonalityIndex, NULL, NULL, NULL, NULL, NULL, NULL },
    { &LeaderRecord::GetParchment, NULL, NULL, NULL, NULL, NULL, NULL },
    { &LeaderRecord::GetCapital, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, &LeaderRecord::GetIsMale, NULL, NULL, NULL, NULL, NULL },
    { NULL, &LeaderRecord::GetIsFemale, NULL, NULL, NULL, NULL, NULL },
    { &LeaderRecord::GetHappyInc, NULL, NULL, NULL, NULL, NULL, NULL },
    { &LeaderRecord::GetProductionBonus, NULL, NULL, NULL, NULL, NULL, NULL },
    { &LeaderRecord::GetFoodBonus, NULL, NULL, NULL, NULL, NULL, NULL },
    { &LeaderRecord::GetCommerceBonus, NULL, NULL, NULL, NULL, NULL, NULL },
    { &LeaderRecord::GetScienceBonus, NULL, NULL, NULL, NULL, NULL, NULL },
    { &LeaderRecord::GetIncreaseBoatMovement, NULL, NULL, NULL, NULL, NULL, NULL },
    { &LeaderRecord::GetIncreaseHp, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, &LeaderRecord::GetOffenseBonusLand, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* OffenseBonusLand */
    { NULL, NULL, NULL, NULL, &LeaderRecord::GetOffenseBonusWater, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* OffenseBonusWater */
    { NULL, NULL, NULL, NULL, &LeaderRecord::GetOffenseBonusAir, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* OffenseBonusAir */
    { NULL, NULL, NULL, NULL, &LeaderRecord::GetLowerCrime, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* LowerCrime */
    { NULL, NULL, NULL, NULL, &LeaderRecord::GetLowerPeaceMovement, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* LowerPeaceMovement */
    { NULL, NULL, NULL, &LeaderRecord::GetGoldPerCitizen, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* GoldPerCitizen */
    { NULL, NULL, NULL, NULL, &LeaderRecord::GetSciencePerPop, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* SciencePerPop */
    { NULL, NULL, NULL, &LeaderRecord::GetReduceReadinessCost, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* ReduceReadinessCost */
    { NULL, NULL, NULL, &LeaderRecord::GetGoldPerWaterTradeRoute, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* GoldPerWaterTradeRoute */
    { NULL, NULL, NULL, &LeaderRecord::GetGoldPerTelevision, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* GoldPerTelevision */
    { NULL, NULL, NULL, &LeaderRecord::GetGoldPerInternationalTradeRoute, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* GoldPerInternationalTradeRoute */
    { NULL, &LeaderRecord::GetAllBoatsDeepWater, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, &LeaderRecord::GetDecreaseMaintenance, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* DecreaseMaintenance */
    { NULL, &LeaderRecord::GetPreventConversion, NULL, NULL, NULL, NULL, NULL },
    { NULL, &LeaderRecord::GetProtectFromBarbarians, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, &LeaderRecord::GetPollutionPercent, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* PollutionPercent */
    { NULL, NULL, NULL, NULL, &LeaderRecord::GetPollutionAmount, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* PollutionAmount */
};

#define k_Token_Leader_LeaderName                ((k_Token_Custom_Base) + 0)
#define k_Token_Leader_EmissaryPhoto             ((k_Token_Custom_Base) + 1)
#define k_Token_Leader_PersonalityDescription    ((k_Token_Custom_Base) + 2)
#define k_Token_Leader_Personality               ((k_Token_Custom_Base) + 3)
#define k_Token_Leader_Parchment                 ((k_Token_Custom_Base) + 4)
#define k_Token_Leader_Capital                   ((k_Token_Custom_Base) + 5)
#define k_Token_Leader_IsMale                    ((k_Token_Custom_Base) + 6)
#define k_Token_Leader_IsFemale                  ((k_Token_Custom_Base) + 7)
#define k_Token_Leader_HappyInc                  ((k_Token_Custom_Base) + 8)
#define k_Token_Leader_ProductionBonus           ((k_Token_Custom_Base) + 9)
#define k_Token_Leader_FoodBonus                 ((k_Token_Custom_Base) + 10)
#define k_Token_Leader_CommerceBonus             ((k_Token_Custom_Base) + 11)
#define k_Token_Leader_ScienceBonus              ((k_Token_Custom_Base) + 12)
#define k_Token_Leader_IncreaseBoatMovement      ((k_Token_Custom_Base) + 13)
#define k_Token_Leader_IncreaseHp                ((k_Token_Custom_Base) + 14)
#define k_Token_Leader_OffenseBonusLand          ((k_Token_Custom_Base) + 15)
#define k_Token_Leader_OffenseBonusLand_Value    ((k_Token_Custom_Base) + 16)
#define k_Token_Leader_OffenseBonusWater         ((k_Token_Custom_Base) + 17)
#define k_Token_Leader_OffenseBonusWater_Value   ((k_Token_Custom_Base) + 18)
#define k_Token_Leader_OffenseBonusAir           ((k_Token_Custom_Base) + 19)
#define k_Token_Leader_OffenseBonusAir_Value     ((k_Token_Custom_Base) + 20)
#define k_Token_Leader_LowerCrime                ((k_Token_Custom_Base) + 21)
#define k_Token_Leader_LowerCrime_Value          ((k_Token_Custom_Base) + 22)
#define k_Token_Leader_LowerPeaceMovement        ((k_Token_Custom_Base) + 23)
#define k_Token_Leader_LowerPeaceMovement_Value  ((k_Token_Custom_Base) + 24)
#define k_Token_Leader_GoldPerCitizen            ((k_Token_Custom_Base) + 25)
#define k_Token_Leader_GoldPerCitizen_Value      ((k_Token_Custom_Base) + 26)
#define k_Token_Leader_SciencePerPop             ((k_Token_Custom_Base) + 27)
#define k_Token_Leader_SciencePerPop_Value       ((k_Token_Custom_Base) + 28)
#define k_Token_Leader_ReduceReadinessCost       ((k_Token_Custom_Base) + 29)
#define k_Token_Leader_ReduceReadinessCost_Value ((k_Token_Custom_Base) + 30)
#define k_Token_Leader_GoldPerWaterTradeRoute    ((k_Token_Custom_Base) + 31)
#define k_Token_Leader_GoldPerWaterTradeRoute_Value ((k_Token_Custom_Base) + 32)
#define k_Token_Leader_GoldPerTelevision         ((k_Token_Custom_Base) + 33)
#define k_Token_Leader_GoldPerTelevision_Value   ((k_Token_Custom_Base) + 34)
#define k_Token_Leader_GoldPerInternationalTradeRoute ((k_Token_Custom_Base) + 35)
#define k_Token_Leader_GoldPerInternationalTradeRoute_Value ((k_Token_Custom_Base) + 36)
#define k_Token_Leader_AllBoatsDeepWater         ((k_Token_Custom_Base) + 37)
#define k_Token_Leader_DecreaseMaintenance       ((k_Token_Custom_Base) + 38)
#define k_Token_Leader_DecreaseMaintenance_Value ((k_Token_Custom_Base) + 39)
#define k_Token_Leader_PreventConversion         ((k_Token_Custom_Base) + 40)
#define k_Token_Leader_ProtectFromBarbarians     ((k_Token_Custom_Base) + 41)
#define k_Token_Leader_PollutionPercent          ((k_Token_Custom_Base) + 42)
#define k_Token_Leader_PollutionPercent_Value    ((k_Token_Custom_Base) + 43)
#define k_Token_Leader_PollutionAmount           ((k_Token_Custom_Base) + 44)
#define k_Token_Leader_PollutionAmount_Value     ((k_Token_Custom_Base) + 45)
#define k_Token_Leader_Max                       ((k_Token_Custom_Base) + 46)


static BitArray s_ParsedTokens(46);
void LeaderRecord::CheckRequiredFields(DBLexer *lex)
{
    if(!s_ParsedTokens.Bit(k_Token_Leader_LeaderName - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field LeaderName missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Leader_EmissaryPhoto - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field EmissaryPhoto missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Leader_PersonalityDescription - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field PersonalityDescription missing"));
    }
}

sint32 LeaderRecord::Parse(DBLexer *lex, sint32 numRecords)
{
    bool done = false;
    sint32 result = 0;
    sint32 tok;
    s_ParsedTokens.Clear();
    lex->SetTokens(g_Leader_Tokens, k_Token_Leader_Max);
    tok = lex->GetToken();
    if(tok == k_Token_Int) {
        tok = lex->GetToken(); // Accept number to make new db compatible with the old database format
    }
    if(tok != k_Token_Name) {
        char newName[256];
        sprintf(newName, "LEADER_%i", numRecords);
        if(!g_theStringDB->GetStringID(newName, m_name)) {
            g_theStringDB->InsertStr(newName, newName);
            if(!g_theStringDB->GetStringID(newName, m_name))
                SetTextName(newName);
        }
    }
    else{
        if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name)) {
            g_theStringDB->InsertStr(lex->GetTokenText(), lex->GetTokenText());
            if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name))
                SetTextName(lex->GetTokenText());
        }
        tok = lex->GetToken();
    }


    if(tok != k_Token_OpenBrace) {
        DBERROR(("Missing open brace"));
        return 0;
    }

    while(!done) {
        tok = lex->GetToken();
        if(tok >= k_Token_Custom_Base && tok < k_Token_Leader_Max) {
            s_ParsedTokens.SetBit(tok - k_Token_Custom_Base);
        }
        switch(tok) {
            case k_Token_Leader_LeaderName:
                if(!lex->GetStringIdAssignment(m_LeaderName)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_EmissaryPhoto:
                if(!lex->GetStringIdAssignment(m_EmissaryPhoto)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_PersonalityDescription:
                if(!lex->GetStringIdAssignment(m_PersonalityDescription)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_Personality:
                if (!g_thePersonalityDB->GetRecordFromLexer(lex, m_Personality)) {
                    done = true; break;
                }
                break;
            case k_Token_Leader_Parchment:
                if(!lex->GetIntAssignment(m_Parchment)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_Capital:
                if(!lex->GetIntAssignment(m_Capital)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_IsMale:
                m_flags0 |= k_Leader_IsMale_Bit;
                break;
            case k_Token_Leader_IsFemale:
                m_flags0 |= k_Leader_IsFemale_Bit;
                break;
            case k_Token_Leader_HappyInc:
                if(!lex->GetIntAssignment(m_HappyInc)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_ProductionBonus:
                if(!lex->GetIntAssignment(m_ProductionBonus)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_FoodBonus:
                if(!lex->GetIntAssignment(m_FoodBonus)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_CommerceBonus:
                if(!lex->GetIntAssignment(m_CommerceBonus)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_ScienceBonus:
                if(!lex->GetIntAssignment(m_ScienceBonus)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_IncreaseBoatMovement:
                if(!lex->GetIntAssignment(m_IncreaseBoatMovement)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_IncreaseHp:
                if(!lex->GetIntAssignment(m_IncreaseHp)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_OffenseBonusLand:
                m_flags0 |= k_Leader_OffenseBonusLand_Bit;
                if(!lex->GetFloatAssignment(m_OffenseBonusLandValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_OffenseBonusWater:
                m_flags0 |= k_Leader_OffenseBonusWater_Bit;
                if(!lex->GetFloatAssignment(m_OffenseBonusWaterValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_OffenseBonusAir:
                m_flags0 |= k_Leader_OffenseBonusAir_Bit;
                if(!lex->GetFloatAssignment(m_OffenseBonusAirValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_LowerCrime:
                m_flags0 |= k_Leader_LowerCrime_Bit;
                if(!lex->GetFloatAssignment(m_LowerCrimeValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_LowerPeaceMovement:
                m_flags0 |= k_Leader_LowerPeaceMovement_Bit;
                if(!lex->GetFloatAssignment(m_LowerPeaceMovementValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_GoldPerCitizen:
                m_flags0 |= k_Leader_GoldPerCitizen_Bit;
                if(!lex->GetIntAssignment(m_GoldPerCitizenValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_SciencePerPop:
                m_flags0 |= k_Leader_SciencePerPop_Bit;
                if(!lex->GetFloatAssignment(m_SciencePerPopValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_ReduceReadinessCost:
                m_flags0 |= k_Leader_ReduceReadinessCost_Bit;
                if(!lex->GetIntAssignment(m_ReduceReadinessCostValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_GoldPerWaterTradeRoute:
                m_flags0 |= k_Leader_GoldPerWaterTradeRoute_Bit;
                if(!lex->GetIntAssignment(m_GoldPerWaterTradeRouteValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_GoldPerTelevision:
                m_flags0 |= k_Leader_GoldPerTelevision_Bit;
                if(!lex->GetIntAssignment(m_GoldPerTelevisionValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_GoldPerInternationalTradeRoute:
                m_flags0 |= k_Leader_GoldPerInternationalTradeRoute_Bit;
                if(!lex->GetIntAssignment(m_GoldPerInternationalTradeRouteValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_AllBoatsDeepWater:
                m_flags0 |= k_Leader_AllBoatsDeepWater_Bit;
                break;
            case k_Token_Leader_DecreaseMaintenance:
                m_flags0 |= k_Leader_DecreaseMaintenance_Bit;
                if(!lex->GetIntAssignment(m_DecreaseMaintenanceValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_PreventConversion:
                m_flags0 |= k_Leader_PreventConversion_Bit;
                break;
            case k_Token_Leader_ProtectFromBarbarians:
                m_flags0 |= k_Leader_ProtectFromBarbarians_Bit;
                break;
            case k_Token_Leader_PollutionPercent:
                m_flags0 |= k_Leader_PollutionPercent_Bit;
                if(!lex->GetFloatAssignment(m_PollutionPercentValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Leader_PollutionAmount:
                m_flags0 |= k_Leader_PollutionAmount_Bit;
                if(!lex->GetFloatAssignment(m_PollutionAmountValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_CloseBrace:
                done = true;
                result = 1;
                break;
            default:
                if(!lex->GetStringId(m_LeaderName)) {
                    DBERROR(("Unknown token"));
                    done = true; break;
                }
                break;
        }
    }
    CheckRequiredFields(lex);
    lex->RestoreTokens();
    return result;
}

void LeaderRecord::ResolveDBReferences()
{
    if(m_Personality & 0x80000000) {
        sint32 id = m_Personality & 0x7fffffff;
        if(!g_thePersonalityDB->GetNamedItem(id, m_Personality)) {
            c3errors_ErrorDialog("DB", "%s not found in Personality database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_Personality == 0x7fffffff) {
        m_Personality = -1;
    }
}

void LeaderRecord::Merge(const LeaderRecord & rval){
    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_OffenseBonusLand_Bit)
    {
        m_OffenseBonusLandValue = rval.m_OffenseBonusLandValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_OffenseBonusWater_Bit)
    {
        m_OffenseBonusWaterValue = rval.m_OffenseBonusWaterValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_OffenseBonusAir_Bit)
    {
        m_OffenseBonusAirValue = rval.m_OffenseBonusAirValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_LowerCrime_Bit)
    {
        m_LowerCrimeValue = rval.m_LowerCrimeValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_LowerPeaceMovement_Bit)
    {
        m_LowerPeaceMovementValue = rval.m_LowerPeaceMovementValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_GoldPerCitizen_Bit)
    {
        m_GoldPerCitizenValue = rval.m_GoldPerCitizenValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_SciencePerPop_Bit)
    {
        m_SciencePerPopValue = rval.m_SciencePerPopValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_ReduceReadinessCost_Bit)
    {
        m_ReduceReadinessCostValue = rval.m_ReduceReadinessCostValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_GoldPerWaterTradeRoute_Bit)
    {
        m_GoldPerWaterTradeRouteValue = rval.m_GoldPerWaterTradeRouteValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_GoldPerTelevision_Bit)
    {
        m_GoldPerTelevisionValue = rval.m_GoldPerTelevisionValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_GoldPerInternationalTradeRoute_Bit)
    {
        m_GoldPerInternationalTradeRouteValue = rval.m_GoldPerInternationalTradeRouteValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_DecreaseMaintenance_Bit)
    {
        m_DecreaseMaintenanceValue = rval.m_DecreaseMaintenanceValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_PollutionPercent_Bit)
    {
        m_PollutionPercentValue = rval.m_PollutionPercentValue;
    }

    // only replace values that have been set
    if (rval.m_flags0 & k_Leader_PollutionAmount_Bit)
    {
        m_PollutionAmountValue = rval.m_PollutionAmountValue;
    }

}

PersonalityRecord const * LeaderRecord::GetPersonality() const
{
    return g_thePersonalityDB->Get(m_Personality);
}

