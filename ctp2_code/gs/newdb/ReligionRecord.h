
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef RELIGION_RECORD_H__
#define RELIGION_RECORD_H__

class ReligionRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class AdvanceRecord;
class CityStyleRecord;
class IconRecord;

#define k_Num_ReligionRecord_Tokens 33

//
// m_flags0: Religion
#define k_Religion_GLHidden_Bit                  0x00000001
#define k_MAX_ObsoleteAdvance                5

class ReligionRecord : public CTPRecord
{
public:
    typedef sint32 (ReligionRecord::*IntAccessor)() const;
    typedef bool   (ReligionRecord::*BoolAccessor)() const;
    typedef double (ReligionRecord::*FloatAccessor)() const ;
    typedef bool   (ReligionRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (ReligionRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (ReligionRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (ReligionRecord::*FloatArrayAccessor)(sint32 index) const;

private:
    uint32 m_flags0;
    double            m_FoodCoef;
    double            m_GoldCoef;
    double            m_ProductionCoef;
    double            m_SupportCoef;
    double            m_DefenseCoef;
    sint32            m_EnableAdvance; // Index into Advance database
    sint32            m_ObsoleteAdvance[k_MAX_ObsoleteAdvance]; // Index into Advance database
    sint32            m_numObsoleteAdvance;
    sint32          * m_CultureOnly; // Index into CityStyle database
    sint32            m_numCultureOnly;
    sint32            m_Icon; // Index into Icon database
    sint32            m_GrowthRank;
    sint32            m_ProductionRank;
    sint32            m_ScienceRank;
    sint32            m_GoldRank;
    sint32            m_MilitaryRank;
    sint32            m_CommerceRank;
    sint32            m_PollutionRank;
    sint32            m_LoyaltyRank;
    sint32            m_MartialLawRank;
    double            m_MaxScienceRate;
    double            m_UnitRushModifier;
    double            m_BuildingRushModifier;
    double            m_WonderRushModifier;
    double            m_EndGameRushModifier;
    sint32            m_MaxIncomingTrade;
    sint32            m_MaxOutgoingTrade;
    double            m_InfrastructureCoefficient;
    double            m_CapitalizationCoefficient;
    sint32            m_WarDiscontentMaxUnits;
    double            m_WarDiscontentPerUnit;
    sint32            m_Rank;
    sint32            m_SameRankAdvice;
    sint32            m_HigherRankAdvice;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    ReligionRecord() { Init(); };
    ReligionRecord(CivArchive &archive) { Serialize(archive); };
    ReligionRecord(ReligionRecord const & rval) { Init(); *this = rval; }
    ~ReligionRecord();
    ReligionRecord const & operator = (ReligionRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const ReligionRecord & rval);

    double GetFoodCoef() const { return m_FoodCoef; }
    double GetGoldCoef() const { return m_GoldCoef; }
    double GetProductionCoef() const { return m_ProductionCoef; }
    double GetSupportCoef() const { return m_SupportCoef; }
    double GetDefenseCoef() const { return m_DefenseCoef; }
    sint32           GetEnableAdvanceIndex() const { return m_EnableAdvance; }
    AdvanceRecord const * GetEnableAdvance() const;
    sint32 GetObsoleteAdvanceIndex(sint32 index) const;
    const AdvanceRecord * GetObsoleteAdvance(sint32 index) const;
    sint32 GetNumObsoleteAdvance() const { return m_numObsoleteAdvance;}
    sint32 GetCultureOnlyIndex(sint32 index) const;
    const CityStyleRecord * GetCultureOnly(sint32 index) const;
    sint32 GetNumCultureOnly() const { return m_numCultureOnly;}
    sint32           GetIconIndex() const { return m_Icon; }
    IconRecord const * GetIcon() const;
    sint32 GetGrowthRank() const { return m_GrowthRank; }
    sint32 GetProductionRank() const { return m_ProductionRank; }
    sint32 GetScienceRank() const { return m_ScienceRank; }
    sint32 GetGoldRank() const { return m_GoldRank; }
    sint32 GetMilitaryRank() const { return m_MilitaryRank; }
    sint32 GetCommerceRank() const { return m_CommerceRank; }
    sint32 GetPollutionRank() const { return m_PollutionRank; }
    sint32 GetLoyaltyRank() const { return m_LoyaltyRank; }
    sint32 GetMartialLawRank() const { return m_MartialLawRank; }
    double GetMaxScienceRate() const { return m_MaxScienceRate; }
    double GetUnitRushModifier() const { return m_UnitRushModifier; }
    double GetBuildingRushModifier() const { return m_BuildingRushModifier; }
    double GetWonderRushModifier() const { return m_WonderRushModifier; }
    double GetEndGameRushModifier() const { return m_EndGameRushModifier; }
    sint32 GetMaxIncomingTrade() const { return m_MaxIncomingTrade; }
    sint32 GetMaxOutgoingTrade() const { return m_MaxOutgoingTrade; }
    double GetInfrastructureCoefficient() const { return m_InfrastructureCoefficient; }
    double GetCapitalizationCoefficient() const { return m_CapitalizationCoefficient; }
    sint32 GetWarDiscontentMaxUnits() const { return m_WarDiscontentMaxUnits; }
    double GetWarDiscontentPerUnit() const { return m_WarDiscontentPerUnit; }
    bool GetGLHidden() const { return (m_flags0 & k_Religion_GLHidden_Bit) != 0; }
    sint32 GetRank() const { return m_Rank; }
    sint32 GetSameRankAdvice() const { return m_SameRankAdvice; }
    sint32 GetHigherRankAdvice() const { return m_HigherRankAdvice; }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* ReligionRecord */

struct ReligionRecordAccessorInfo
{
    ReligionRecord::IntAccessor        m_intAccessor;
    ReligionRecord::BoolAccessor       m_boolAccessor;
    ReligionRecord::FloatAccessor      m_floatAccessor;
    ReligionRecord::BitIntAccessor     m_bitIntAccessor;
    ReligionRecord::BitFloatAccessor   m_bitFloatAccessor;
    ReligionRecord::IntArrayAccessor   m_intArrayAccessor;
    ReligionRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern ReligionRecordAccessorInfo      g_ReligionRecord_Accessors[];
extern CTPDatabase<ReligionRecord> *   g_theReligionDB;

extern const char * g_Religion_Tokens[];

#endif
