
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#include "c3.h"
#include "ConceptRecord.h"

#include <algorithm>
#include "BitArray.h"
#include "c3errors.h"
#include "CTPDatabase.h"
#include "DBLexer.h"
#include "DBTokens.h"
#include "StrDB.h"

#include "IconRecord.h"

CTPDatabase<ConceptRecord> *g_theConceptDB = NULL;

void ConceptRecord::Init()
{
    m_flags0 = 0;
    m_DefaultIcon = 0x7fffffff;
    //GovMod Specific flag initialization
    m_hasGovernmentsModified = false;
}

void ConceptRecord::Serialize(CivArchive &archive)
{
    if(archive.IsStoring()) {
        archive << m_index;
        if(m_name >= 0){
            archive << GetIDText();
        }
        else{
            archive << static_cast<MBCHAR*>(NULL);
        }
        archive << m_flags0;
        archive << m_DefaultIcon;
    } else {
        //GovMod Specific flag initialization
        m_hasGovernmentsModified = false;

        archive >> m_index;
        {
            MBCHAR* tmpStr = NULL;
            archive >> tmpStr;
            g_theStringDB->GetStringID(tmpStr, m_name);
            SetTextName(g_theStringDB->GetNameStr(m_name));
        }
        archive >> m_flags0;
        archive >> m_DefaultIcon;
    }
}

ConceptRecord::~ConceptRecord()
{
}

ConceptRecord const & ConceptRecord::operator = (ConceptRecord const & rval)
{
    if (this != &rval)
    {
        m_index = rval.m_index;
        m_flags0 = rval.m_flags0;
        m_hasGovernmentsModified = rval.m_hasGovernmentsModified;

        m_DefaultIcon = rval.m_DefaultIcon;

    }

    return *this;
}

const char *g_Concept_Tokens[] =
{
    "DefaultIcon",
    "GLHidden",
    "CONCEPT_DEFAULT_ICON",
    "NO_INDEX",
};

ConceptRecordAccessorInfo g_ConceptRecord_Accessors[] =
{
    { &ConceptRecord::GetDefaultIconIndex, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, &ConceptRecord::GetGLHidden, NULL, NULL, NULL, NULL, NULL },
};

#define k_Token_Concept_DefaultIcon              ((k_Token_Custom_Base) + 0)
#define k_Token_Concept_GLHidden                 ((k_Token_Custom_Base) + 1)
#define k_Token_Concept_CONCEPT_DEFAULT_ICON     ((k_Token_Custom_Base) + 2)
#define k_Token_Concept_NO_INDEX                 ((k_Token_Custom_Base) + 3)
#define k_Token_Concept_Max                      ((k_Token_Custom_Base) + 4)


static BitArray s_ParsedTokens(4);
void ConceptRecord::CheckRequiredFields(DBLexer *lex)
{
}

sint32 ConceptRecord::Parse(DBLexer *lex, sint32 numRecords)
{
    bool done = false;
    sint32 result = 0;
    sint32 tok;
    s_ParsedTokens.Clear();
    lex->SetTokens(g_Concept_Tokens, k_Token_Concept_Max);
    tok = lex->GetToken();
    if(tok == k_Token_Int) {
        tok = lex->GetToken(); // Accept number to make new db compatible with the old database format
    }
    if(tok != k_Token_Name) {
        char newName[256];
        sprintf(newName, "CONCEPT_%i", numRecords);
        if(!g_theStringDB->GetStringID(newName, m_name)) {
            g_theStringDB->InsertStr(newName, newName);
            if(!g_theStringDB->GetStringID(newName, m_name))
                SetTextName(newName);
        }
    }
    else{
        if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name)) {
            g_theStringDB->InsertStr(lex->GetTokenText(), lex->GetTokenText());
            if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name))
                SetTextName(lex->GetTokenText());
        }
        tok = lex->GetToken();
    }


    if(tok != k_Token_OpenBrace) {
        DBERROR(("Missing open brace"));
        return 0;
    }

    while(!done) {
        tok = lex->GetToken();
        if(tok >= k_Token_Custom_Base && tok < k_Token_Concept_Max) {
            s_ParsedTokens.SetBit(tok - k_Token_Custom_Base);
        }
        switch(tok) {
            case k_Token_Concept_DefaultIcon:
            case k_Token_Concept_CONCEPT_DEFAULT_ICON:
                if (!g_theIconDB->GetRecordFromLexer(lex, m_DefaultIcon)) {
                    done = true; break;
                }
                break;
            case k_Token_Concept_GLHidden:
            case k_Token_Concept_NO_INDEX:
                m_flags0 |= k_Concept_GLHidden_Bit;
                break;
            case k_Token_CloseBrace:
                done = true;
                result = 1;
                break;
            default:
                if(!g_theIconDB->GetCurrentRecordFromLexer(lex, m_DefaultIcon)) {
                    DBERROR(("Unknown token"));
                    done = true; break;
                }
                break;
        }
    }
    CheckRequiredFields(lex);
    lex->RestoreTokens();
    return result;
}

void ConceptRecord::ResolveDBReferences()
{
    if(m_DefaultIcon & 0x80000000) {
        sint32 id = m_DefaultIcon & 0x7fffffff;
        if(!g_theIconDB->GetNamedItem(id, m_DefaultIcon)) {
            c3errors_ErrorDialog("DB", "%s not found in Icon database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_DefaultIcon == 0x7fffffff) {
        m_DefaultIcon = -1;
    }
}

void ConceptRecord::Merge(const ConceptRecord & rval){
}

IconRecord const * ConceptRecord::GetDefaultIcon() const
{
    return g_theIconDB->Get(m_DefaultIcon);
}

