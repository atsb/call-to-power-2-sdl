
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef ENDGAMEOBJECT_RECORD_H__
#define ENDGAMEOBJECT_RECORD_H__

class EndGameObjectRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class BuildingRecord;
class TerrainImprovementRecord;
class WonderRecord;

#define k_Num_EndGameObjectRecord_Tokens 21

//
// m_flags0: EndGameObject
#define k_EndGameObject_Wonder_Bit               0x00000001
#define k_EndGameObject_Building_Bit             0x00000002
#define k_EndGameObject_TerrainImprovement_Bit   0x00000004
#define k_EndGameObject_MinNeeded_Bit            0x00000008
#define k_EndGameObject_MaxNeeded_Bit            0x00000010
#define k_EndGameObject_IsSatellite_Bit          0x00000020
#define k_EndGameObject_PowerSource_Bit          0x00000040
#define k_EndGameObject_MinRadius_Bit            0x00000080
#define k_EndGameObject_MaxRadius_Bit            0x00000100
#define k_EndGameObject_MinCoverage_Bit          0x00000200
#define k_EndGameObject_TurnsToActivate_Bit      0x00000400

class EndGameObjectRecord : public CTPRecord
{
public:
    typedef sint32 (EndGameObjectRecord::*IntAccessor)() const;
    typedef bool   (EndGameObjectRecord::*BoolAccessor)() const;
    typedef double (EndGameObjectRecord::*FloatAccessor)() const ;
    typedef bool   (EndGameObjectRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (EndGameObjectRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (EndGameObjectRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (EndGameObjectRecord::*FloatArrayAccessor)(sint32 index) const;

private:
    uint32 m_flags0;
    sint32            m_WonderValue; // Index into Wonder database
    sint32            m_BuildingValue; // Index into Building database
    sint32            m_TerrainImprovementValue; // Index into TerrainImprovement database
    sint32            m_MinNeededValue;
    sint32            m_MaxNeededValue;
    sint32            m_PowerSourceValue; // Index into EndGameObject database
    sint32            m_MinRadiusValue;
    sint32            m_MaxRadiusValue;
    double            m_MinCoverageValue;
    sint32            m_TurnsToActivateValue;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    EndGameObjectRecord() { Init(); };
    EndGameObjectRecord(CivArchive &archive) { Serialize(archive); };
    EndGameObjectRecord(EndGameObjectRecord const & rval) { Init(); *this = rval; }
    ~EndGameObjectRecord();
    EndGameObjectRecord const & operator = (EndGameObjectRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const EndGameObjectRecord & rval);

    bool HasWonder() const { return (m_flags0 & k_EndGameObject_Wonder_Bit) != 0; }
    bool GetWonderIndex(sint32 & index) const
    {
        index = (m_flags0 & k_EndGameObject_Wonder_Bit) ? m_WonderValue : -1;
        return (m_flags0 & k_EndGameObject_Wonder_Bit) != 0;
    }
    bool GetWonder(const WonderRecord * & rec) const;
    const WonderRecord * GetWonderPtr() const;
    bool HasBuilding() const { return (m_flags0 & k_EndGameObject_Building_Bit) != 0; }
    bool GetBuildingIndex(sint32 & index) const
    {
        index = (m_flags0 & k_EndGameObject_Building_Bit) ? m_BuildingValue : -1;
        return (m_flags0 & k_EndGameObject_Building_Bit) != 0;
    }
    bool GetBuilding(const BuildingRecord * & rec) const;
    const BuildingRecord * GetBuildingPtr() const;
    bool HasTerrainImprovement() const { return (m_flags0 & k_EndGameObject_TerrainImprovement_Bit) != 0; }
    bool GetTerrainImprovementIndex(sint32 & index) const
    {
        index = (m_flags0 & k_EndGameObject_TerrainImprovement_Bit) ? m_TerrainImprovementValue : -1;
        return (m_flags0 & k_EndGameObject_TerrainImprovement_Bit) != 0;
    }
    bool GetTerrainImprovement(const TerrainImprovementRecord * & rec) const;
    const TerrainImprovementRecord * GetTerrainImprovementPtr() const;
    bool HasMinNeeded() const { return (m_flags0 & k_EndGameObject_MinNeeded_Bit) != 0; }
    bool GetMinNeeded(sint32 & value) const
    {
        if (m_flags0 & k_EndGameObject_MinNeeded_Bit)
        {
            value = m_MinNeededValue;
        }
        return (m_flags0 & k_EndGameObject_MinNeeded_Bit) != 0;
    }
    bool HasMaxNeeded() const { return (m_flags0 & k_EndGameObject_MaxNeeded_Bit) != 0; }
    bool GetMaxNeeded(sint32 & value) const
    {
        if (m_flags0 & k_EndGameObject_MaxNeeded_Bit)
        {
            value = m_MaxNeededValue;
        }
        return (m_flags0 & k_EndGameObject_MaxNeeded_Bit) != 0;
    }
    bool GetIsSatellite() const { return (m_flags0 & k_EndGameObject_IsSatellite_Bit) != 0; }
    bool HasPowerSource() const { return (m_flags0 & k_EndGameObject_PowerSource_Bit) != 0; }
    bool GetPowerSourceIndex(sint32 & index) const
    {
        index = (m_flags0 & k_EndGameObject_PowerSource_Bit) ? m_PowerSourceValue : -1;
        return (m_flags0 & k_EndGameObject_PowerSource_Bit) != 0;
    }
    bool GetPowerSource(const EndGameObjectRecord * & rec) const;
    const EndGameObjectRecord * GetPowerSourcePtr() const;
    bool HasMinRadius() const { return (m_flags0 & k_EndGameObject_MinRadius_Bit) != 0; }
    bool GetMinRadius(sint32 & value) const
    {
        if (m_flags0 & k_EndGameObject_MinRadius_Bit)
        {
            value = m_MinRadiusValue;
        }
        return (m_flags0 & k_EndGameObject_MinRadius_Bit) != 0;
    }
    bool HasMaxRadius() const { return (m_flags0 & k_EndGameObject_MaxRadius_Bit) != 0; }
    bool GetMaxRadius(sint32 & value) const
    {
        if (m_flags0 & k_EndGameObject_MaxRadius_Bit)
        {
            value = m_MaxRadiusValue;
        }
        return (m_flags0 & k_EndGameObject_MaxRadius_Bit) != 0;
    }
    bool HasMinCoverage() const { return (m_flags0 & k_EndGameObject_MinCoverage_Bit) != 0; }
    bool GetMinCoverage(double & value) const
    {
        if (m_flags0 & k_EndGameObject_MinCoverage_Bit)
        {
            value = m_MinCoverageValue;
        }
        return (m_flags0 & k_EndGameObject_MinCoverage_Bit) != 0;
    }
    bool HasTurnsToActivate() const { return (m_flags0 & k_EndGameObject_TurnsToActivate_Bit) != 0; }
    bool GetTurnsToActivate(sint32 & value) const
    {
        if (m_flags0 & k_EndGameObject_TurnsToActivate_Bit)
        {
            value = m_TurnsToActivateValue;
        }
        return (m_flags0 & k_EndGameObject_TurnsToActivate_Bit) != 0;
    }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* EndGameObjectRecord */

struct EndGameObjectRecordAccessorInfo
{
    EndGameObjectRecord::IntAccessor        m_intAccessor;
    EndGameObjectRecord::BoolAccessor       m_boolAccessor;
    EndGameObjectRecord::FloatAccessor      m_floatAccessor;
    EndGameObjectRecord::BitIntAccessor     m_bitIntAccessor;
    EndGameObjectRecord::BitFloatAccessor   m_bitFloatAccessor;
    EndGameObjectRecord::IntArrayAccessor   m_intArrayAccessor;
    EndGameObjectRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern EndGameObjectRecordAccessorInfo      g_EndGameObjectRecord_Accessors[];
extern CTPDatabase<EndGameObjectRecord> *   g_theEndGameObjectDB;

extern const char * g_EndGameObject_Tokens[];

#endif
