
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef DIPLOMACY_RECORD_H__
#define DIPLOMACY_RECORD_H__

class DiplomacyRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class DiplomacyProposalRecord;

#define k_Num_DiplomacyRecord_Tokens 88

//
// m_flags0: Diplomacy
#define k_Diplomacy_ScenarioEvent_Bit            0x00000001
#define k_Diplomacy_MilitaryPowerEvent_Bit       0x00000002
#define k_Diplomacy_MilitarySafetyEvent_Bit      0x00000004
#define k_Diplomacy_DiplomacyEvent_Bit           0x00000008
#define k_Diplomacy_GoldEvent_Bit                0x00000010
#define k_Diplomacy_KnowledgeEvent_Bit           0x00000020
#define k_Diplomacy_ProductionEvent_Bit          0x00000040
#define k_Diplomacy_Threaten_Bit                 0x00000080
#define k_Diplomacy_IncursionRegardCost_Bit      0x00000100
#define k_Diplomacy_IncursionOfAllieRegardCost_Bit 0x00000200
#define k_Diplomacy_InvaderMovementRegardCost_Bit 0x00000400
#define k_Diplomacy_PerRoutePiracyRegardCost_Bit 0x00000800
#define k_Diplomacy_ShareContinentRegardCost_Bit 0x00001000
#define k_Diplomacy_AttackCivilianRegardCost_Bit 0x00002000
#define k_Diplomacy_PreemptiveAttackRegardCost_Bit 0x00004000
#define k_Diplomacy_EmbargoTradeRegardCost_Bit   0x00008000
#define k_Diplomacy_TakeCityRegardCost_Bit       0x00010000
#define k_Diplomacy_InciteRevolutionRegardCost_Bit 0x00020000
#define k_Diplomacy_AssassinateRulerRegardCost_Bit 0x00040000
#define k_Diplomacy_FranchiseCityRegardCost_Bit  0x00080000
#define k_Diplomacy_PlantNukeRegardCost_Bit      0x00100000
#define k_Diplomacy_SlaveRaidRegardCost_Bit      0x00200000
#define k_Diplomacy_LawsuitRegardCost_Bit        0x00400000
#define k_Diplomacy_ExpelUnitsRegardCost_Bit     0x00800000
#define k_Diplomacy_NukeCityRegardCost_Bit       0x01000000
#define k_Diplomacy_ConvertCityRegardCost_Bit    0x02000000
#define k_Diplomacy_EnslaveSettlerRegardCost_Bit 0x04000000
#define k_Diplomacy_UndergroundRailwayRegardCost_Bit 0x08000000
#define k_Diplomacy_InciteUprisingRegardCost_Bit 0x10000000
#define k_Diplomacy_BioInfectedCityRegardCost_Bit 0x20000000
#define k_Diplomacy_PlagueCityRegardCost_Bit     0x40000000
#define k_Diplomacy_NanoInfectCityRegardCost_Bit 0x80000000
//
// m_flags1: Diplomacy
#define k_Diplomacy_CreateParkRegardCost_Bit     0x00000001
#define k_Diplomacy_InjoinCityRegardCost_Bit     0x00000002
#define k_Diplomacy_PillageRegardCost_Bit        0x00000004
#define k_Diplomacy_HoldReceptionRegardBonus_Bit 0x00000008
#define k_Diplomacy_HasPactTrustBonus_Bit        0x00000010
#define k_Diplomacy_NoWarTrustBonus_Bit          0x00000020
#define k_Diplomacy_AttackCivilianTrustCost_Bit  0x00000040
#define k_Diplomacy_PreemptiveAttackTrustCost_Bit 0x00000080
#define k_Diplomacy_FollowThroughTrustBonus_Bit  0x00000100
#define k_Diplomacy_UsedNukesTrustCost_Bit       0x00000200
#define k_Diplomacy_WantMapTurns_Bit             0x00000400
//
// m_flags0: ProposalElement
#define k_ProposalElement_SendPriority_Bit       0x00000001
#define k_ProposalElement_AcceptPriority_Bit     0x00000002
#define k_ProposalElement_RejectPriority_Bit     0x00000004
#define k_ProposalElement_SenderRegardResult_Bit 0x00000008
#define k_ProposalElement_ReceiverRegardResult_Bit 0x00000010
#define k_ProposalElement_ViolationRegardCost_Bit 0x00000020
#define k_ProposalElement_ViolationTrustCost_Bit 0x00000040
#define k_MAX_Inherit                        1

class DiplomacyRecord : public CTPRecord
{
public:
    typedef sint32 (DiplomacyRecord::*IntAccessor)() const;
    typedef bool   (DiplomacyRecord::*BoolAccessor)() const;
    typedef double (DiplomacyRecord::*FloatAccessor)() const ;
    typedef bool   (DiplomacyRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (DiplomacyRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (DiplomacyRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (DiplomacyRecord::*FloatArrayAccessor)(sint32 index) const;

    class RegardDecay {
    private:
        double            m_PositiveDecay;
        double            m_NegativeDecay;

    public:
        RegardDecay();
        RegardDecay(CivArchive & archive){ Serialize(archive); };
        ~RegardDecay();
        RegardDecay const & operator = (RegardDecay const & rval);
        bool operator == (RegardDecay const & rval) {
          return false;
        }

        void Serialize(CivArchive &archive);
        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        sint32 ParseFullySequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, RegardDecay **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, RegardDecay *array, sint32 *numElements, sint32 maxSize);
        static sint32 ParseInArraySequential(DBLexer *lex, RegardDecay **array, sint32 *numElements);
        static sint32 ParseInArraySequential(DBLexer *lex, RegardDecay *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();

        double GetPositiveDecay() const { return m_PositiveDecay; }
        double GetNegativeDecay() const { return m_NegativeDecay; }

    }; /* class RegardDecay */

    class ProposalElement {
    private:
        uint32            m_flags0;
        sint32            m_Proposal; // Index into DiplomacyProposal database
        sint32            m_SendPriorityValue;
        sint32            m_AcceptPriorityValue;
        sint32            m_RejectPriorityValue;
        sint32            m_SenderRegardResultValue;
        sint32            m_ReceiverRegardResultValue;
        sint32            m_ViolationRegardCostValue;
        sint32            m_ViolationTrustCostValue;

    public:
        ProposalElement();
        ProposalElement(CivArchive & archive){ Serialize(archive); };
        ~ProposalElement();
        ProposalElement const & operator = (ProposalElement const & rval);
        bool operator == (ProposalElement const & rval) {
          if (m_Proposal != rval.m_Proposal)
             return false;
          return true;
        }

        void Serialize(CivArchive &archive);
        sint32 Parse(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, ProposalElement **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, ProposalElement *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();

        sint32           GetProposalIndex() const { return m_Proposal; }
        DiplomacyProposalRecord const * GetProposal() const;
        bool HasSendPriority() const { return (m_flags0 & k_ProposalElement_SendPriority_Bit) != 0; }
        bool GetSendPriority(sint32 & value) const
        {
            if (m_flags0 & k_ProposalElement_SendPriority_Bit)
            {
                value = m_SendPriorityValue;
            }
            return (m_flags0 & k_ProposalElement_SendPriority_Bit) != 0;
        }
        bool HasAcceptPriority() const { return (m_flags0 & k_ProposalElement_AcceptPriority_Bit) != 0; }
        bool GetAcceptPriority(sint32 & value) const
        {
            if (m_flags0 & k_ProposalElement_AcceptPriority_Bit)
            {
                value = m_AcceptPriorityValue;
            }
            return (m_flags0 & k_ProposalElement_AcceptPriority_Bit) != 0;
        }
        bool HasRejectPriority() const { return (m_flags0 & k_ProposalElement_RejectPriority_Bit) != 0; }
        bool GetRejectPriority(sint32 & value) const
        {
            if (m_flags0 & k_ProposalElement_RejectPriority_Bit)
            {
                value = m_RejectPriorityValue;
            }
            return (m_flags0 & k_ProposalElement_RejectPriority_Bit) != 0;
        }
        bool HasSenderRegardResult() const { return (m_flags0 & k_ProposalElement_SenderRegardResult_Bit) != 0; }
        bool GetSenderRegardResult(sint32 & value) const
        {
            if (m_flags0 & k_ProposalElement_SenderRegardResult_Bit)
            {
                value = m_SenderRegardResultValue;
            }
            return (m_flags0 & k_ProposalElement_SenderRegardResult_Bit) != 0;
        }
        bool HasReceiverRegardResult() const { return (m_flags0 & k_ProposalElement_ReceiverRegardResult_Bit) != 0; }
        bool GetReceiverRegardResult(sint32 & value) const
        {
            if (m_flags0 & k_ProposalElement_ReceiverRegardResult_Bit)
            {
                value = m_ReceiverRegardResultValue;
            }
            return (m_flags0 & k_ProposalElement_ReceiverRegardResult_Bit) != 0;
        }
        bool HasViolationRegardCost() const { return (m_flags0 & k_ProposalElement_ViolationRegardCost_Bit) != 0; }
        bool GetViolationRegardCost(sint32 & value) const
        {
            if (m_flags0 & k_ProposalElement_ViolationRegardCost_Bit)
            {
                value = m_ViolationRegardCostValue;
            }
            return (m_flags0 & k_ProposalElement_ViolationRegardCost_Bit) != 0;
        }
        bool HasViolationTrustCost() const { return (m_flags0 & k_ProposalElement_ViolationTrustCost_Bit) != 0; }
        bool GetViolationTrustCost(sint32 & value) const
        {
            if (m_flags0 & k_ProposalElement_ViolationTrustCost_Bit)
            {
                value = m_ViolationTrustCostValue;
            }
            return (m_flags0 & k_ProposalElement_ViolationTrustCost_Bit) != 0;
        }

    }; /* class ProposalElement */

private:
    uint32 m_flags0;
    uint32 m_flags1;
    sint32            m_Inherit[k_MAX_Inherit]; // Index into Diplomacy database
    sint32            m_numInherit;
    RegardDecay       m_ScenarioEventValue;
    RegardDecay       m_MilitaryPowerEventValue;
    RegardDecay       m_MilitarySafetyEventValue;
    RegardDecay       m_DiplomacyEventValue;
    RegardDecay       m_GoldEventValue;
    RegardDecay       m_KnowledgeEventValue;
    RegardDecay       m_ProductionEventValue;
    sint32            m_ThreatenValue;
    sint32            m_IncursionRegardCostValue;
    sint32            m_IncursionOfAllieRegardCostValue;
    sint32            m_InvaderMovementRegardCostValue;
    sint32            m_PerRoutePiracyRegardCostValue;
    sint32            m_ShareContinentRegardCostValue;
    sint32            m_AttackCivilianRegardCostValue;
    sint32            m_PreemptiveAttackRegardCostValue;
    sint32            m_EmbargoTradeRegardCostValue;
    sint32            m_TakeCityRegardCostValue;
    sint32            m_InciteRevolutionRegardCostValue;
    sint32            m_AssassinateRulerRegardCostValue;
    sint32            m_FranchiseCityRegardCostValue;
    sint32            m_PlantNukeRegardCostValue;
    sint32            m_SlaveRaidRegardCostValue;
    sint32            m_LawsuitRegardCostValue;
    sint32            m_ExpelUnitsRegardCostValue;
    sint32            m_NukeCityRegardCostValue;
    sint32            m_ConvertCityRegardCostValue;
    sint32            m_EnslaveSettlerRegardCostValue;
    sint32            m_UndergroundRailwayRegardCostValue;
    sint32            m_InciteUprisingRegardCostValue;
    sint32            m_BioInfectedCityRegardCostValue;
    sint32            m_PlagueCityRegardCostValue;
    sint32            m_NanoInfectCityRegardCostValue;
    sint32            m_CreateParkRegardCostValue;
    sint32            m_InjoinCityRegardCostValue;
    sint32            m_PillageRegardCostValue;
    sint32            m_HoldReceptionRegardBonusValue;
    sint32            m_HasPactTrustBonusValue;
    sint32            m_NoWarTrustBonusValue;
    sint32            m_AttackCivilianTrustCostValue;
    sint32            m_PreemptiveAttackTrustCostValue;
    sint32            m_FollowThroughTrustBonusValue;
    sint32            m_UsedNukesTrustCostValue;
    sint32            m_WantMapTurnsValue;
    ProposalElement * m_ProposalElement;
    sint32            m_numProposalElement;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    DiplomacyRecord() { Init(); };
    DiplomacyRecord(CivArchive &archive) { Serialize(archive); };
    DiplomacyRecord(DiplomacyRecord const & rval) { Init(); *this = rval; }
    ~DiplomacyRecord();
    DiplomacyRecord const & operator = (DiplomacyRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const DiplomacyRecord & rval);

    sint32 GetInheritIndex(sint32 index) const;
    const DiplomacyRecord * GetInherit(sint32 index) const;
    sint32 GetNumInherit() const { return m_numInherit;}
    bool HasScenarioEvent() const { return (m_flags0 & k_Diplomacy_ScenarioEvent_Bit) != 0; }
    bool GetScenarioEvent(const RegardDecay *&ptr) const
    {
        ptr = (m_flags0 & k_Diplomacy_ScenarioEvent_Bit) ? &m_ScenarioEventValue : NULL;
        return (m_flags0 & k_Diplomacy_ScenarioEvent_Bit) != 0;
    }
    const RegardDecay * GetScenarioEventPtr() const
    {
        return (m_flags0 & k_Diplomacy_ScenarioEvent_Bit) ? &m_ScenarioEventValue : NULL;
    }
    bool HasMilitaryPowerEvent() const { return (m_flags0 & k_Diplomacy_MilitaryPowerEvent_Bit) != 0; }
    bool GetMilitaryPowerEvent(const RegardDecay *&ptr) const
    {
        ptr = (m_flags0 & k_Diplomacy_MilitaryPowerEvent_Bit) ? &m_MilitaryPowerEventValue : NULL;
        return (m_flags0 & k_Diplomacy_MilitaryPowerEvent_Bit) != 0;
    }
    const RegardDecay * GetMilitaryPowerEventPtr() const
    {
        return (m_flags0 & k_Diplomacy_MilitaryPowerEvent_Bit) ? &m_MilitaryPowerEventValue : NULL;
    }
    bool HasMilitarySafetyEvent() const { return (m_flags0 & k_Diplomacy_MilitarySafetyEvent_Bit) != 0; }
    bool GetMilitarySafetyEvent(const RegardDecay *&ptr) const
    {
        ptr = (m_flags0 & k_Diplomacy_MilitarySafetyEvent_Bit) ? &m_MilitarySafetyEventValue : NULL;
        return (m_flags0 & k_Diplomacy_MilitarySafetyEvent_Bit) != 0;
    }
    const RegardDecay * GetMilitarySafetyEventPtr() const
    {
        return (m_flags0 & k_Diplomacy_MilitarySafetyEvent_Bit) ? &m_MilitarySafetyEventValue : NULL;
    }
    bool HasDiplomacyEvent() const { return (m_flags0 & k_Diplomacy_DiplomacyEvent_Bit) != 0; }
    bool GetDiplomacyEvent(const RegardDecay *&ptr) const
    {
        ptr = (m_flags0 & k_Diplomacy_DiplomacyEvent_Bit) ? &m_DiplomacyEventValue : NULL;
        return (m_flags0 & k_Diplomacy_DiplomacyEvent_Bit) != 0;
    }
    const RegardDecay * GetDiplomacyEventPtr() const
    {
        return (m_flags0 & k_Diplomacy_DiplomacyEvent_Bit) ? &m_DiplomacyEventValue : NULL;
    }
    bool HasGoldEvent() const { return (m_flags0 & k_Diplomacy_GoldEvent_Bit) != 0; }
    bool GetGoldEvent(const RegardDecay *&ptr) const
    {
        ptr = (m_flags0 & k_Diplomacy_GoldEvent_Bit) ? &m_GoldEventValue : NULL;
        return (m_flags0 & k_Diplomacy_GoldEvent_Bit) != 0;
    }
    const RegardDecay * GetGoldEventPtr() const
    {
        return (m_flags0 & k_Diplomacy_GoldEvent_Bit) ? &m_GoldEventValue : NULL;
    }
    bool HasKnowledgeEvent() const { return (m_flags0 & k_Diplomacy_KnowledgeEvent_Bit) != 0; }
    bool GetKnowledgeEvent(const RegardDecay *&ptr) const
    {
        ptr = (m_flags0 & k_Diplomacy_KnowledgeEvent_Bit) ? &m_KnowledgeEventValue : NULL;
        return (m_flags0 & k_Diplomacy_KnowledgeEvent_Bit) != 0;
    }
    const RegardDecay * GetKnowledgeEventPtr() const
    {
        return (m_flags0 & k_Diplomacy_KnowledgeEvent_Bit) ? &m_KnowledgeEventValue : NULL;
    }
    bool HasProductionEvent() const { return (m_flags0 & k_Diplomacy_ProductionEvent_Bit) != 0; }
    bool GetProductionEvent(const RegardDecay *&ptr) const
    {
        ptr = (m_flags0 & k_Diplomacy_ProductionEvent_Bit) ? &m_ProductionEventValue : NULL;
        return (m_flags0 & k_Diplomacy_ProductionEvent_Bit) != 0;
    }
    const RegardDecay * GetProductionEventPtr() const
    {
        return (m_flags0 & k_Diplomacy_ProductionEvent_Bit) ? &m_ProductionEventValue : NULL;
    }
    bool HasThreaten() const { return (m_flags0 & k_Diplomacy_Threaten_Bit) != 0; }
    bool GetThreaten(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_Threaten_Bit)
        {
            value = m_ThreatenValue;
        }
        return (m_flags0 & k_Diplomacy_Threaten_Bit) != 0;
    }
    bool HasIncursionRegardCost() const { return (m_flags0 & k_Diplomacy_IncursionRegardCost_Bit) != 0; }
    bool GetIncursionRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_IncursionRegardCost_Bit)
        {
            value = m_IncursionRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_IncursionRegardCost_Bit) != 0;
    }
    bool HasIncursionOfAllieRegardCost() const { return (m_flags0 & k_Diplomacy_IncursionOfAllieRegardCost_Bit) != 0; }
    bool GetIncursionOfAllieRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_IncursionOfAllieRegardCost_Bit)
        {
            value = m_IncursionOfAllieRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_IncursionOfAllieRegardCost_Bit) != 0;
    }
    bool HasInvaderMovementRegardCost() const { return (m_flags0 & k_Diplomacy_InvaderMovementRegardCost_Bit) != 0; }
    bool GetInvaderMovementRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_InvaderMovementRegardCost_Bit)
        {
            value = m_InvaderMovementRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_InvaderMovementRegardCost_Bit) != 0;
    }
    bool HasPerRoutePiracyRegardCost() const { return (m_flags0 & k_Diplomacy_PerRoutePiracyRegardCost_Bit) != 0; }
    bool GetPerRoutePiracyRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_PerRoutePiracyRegardCost_Bit)
        {
            value = m_PerRoutePiracyRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_PerRoutePiracyRegardCost_Bit) != 0;
    }
    bool HasShareContinentRegardCost() const { return (m_flags0 & k_Diplomacy_ShareContinentRegardCost_Bit) != 0; }
    bool GetShareContinentRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_ShareContinentRegardCost_Bit)
        {
            value = m_ShareContinentRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_ShareContinentRegardCost_Bit) != 0;
    }
    bool HasAttackCivilianRegardCost() const { return (m_flags0 & k_Diplomacy_AttackCivilianRegardCost_Bit) != 0; }
    bool GetAttackCivilianRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_AttackCivilianRegardCost_Bit)
        {
            value = m_AttackCivilianRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_AttackCivilianRegardCost_Bit) != 0;
    }
    bool HasPreemptiveAttackRegardCost() const { return (m_flags0 & k_Diplomacy_PreemptiveAttackRegardCost_Bit) != 0; }
    bool GetPreemptiveAttackRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_PreemptiveAttackRegardCost_Bit)
        {
            value = m_PreemptiveAttackRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_PreemptiveAttackRegardCost_Bit) != 0;
    }
    bool HasEmbargoTradeRegardCost() const { return (m_flags0 & k_Diplomacy_EmbargoTradeRegardCost_Bit) != 0; }
    bool GetEmbargoTradeRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_EmbargoTradeRegardCost_Bit)
        {
            value = m_EmbargoTradeRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_EmbargoTradeRegardCost_Bit) != 0;
    }
    bool HasTakeCityRegardCost() const { return (m_flags0 & k_Diplomacy_TakeCityRegardCost_Bit) != 0; }
    bool GetTakeCityRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_TakeCityRegardCost_Bit)
        {
            value = m_TakeCityRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_TakeCityRegardCost_Bit) != 0;
    }
    bool HasInciteRevolutionRegardCost() const { return (m_flags0 & k_Diplomacy_InciteRevolutionRegardCost_Bit) != 0; }
    bool GetInciteRevolutionRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_InciteRevolutionRegardCost_Bit)
        {
            value = m_InciteRevolutionRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_InciteRevolutionRegardCost_Bit) != 0;
    }
    bool HasAssassinateRulerRegardCost() const { return (m_flags0 & k_Diplomacy_AssassinateRulerRegardCost_Bit) != 0; }
    bool GetAssassinateRulerRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_AssassinateRulerRegardCost_Bit)
        {
            value = m_AssassinateRulerRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_AssassinateRulerRegardCost_Bit) != 0;
    }
    bool HasFranchiseCityRegardCost() const { return (m_flags0 & k_Diplomacy_FranchiseCityRegardCost_Bit) != 0; }
    bool GetFranchiseCityRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_FranchiseCityRegardCost_Bit)
        {
            value = m_FranchiseCityRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_FranchiseCityRegardCost_Bit) != 0;
    }
    bool HasPlantNukeRegardCost() const { return (m_flags0 & k_Diplomacy_PlantNukeRegardCost_Bit) != 0; }
    bool GetPlantNukeRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_PlantNukeRegardCost_Bit)
        {
            value = m_PlantNukeRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_PlantNukeRegardCost_Bit) != 0;
    }
    bool HasSlaveRaidRegardCost() const { return (m_flags0 & k_Diplomacy_SlaveRaidRegardCost_Bit) != 0; }
    bool GetSlaveRaidRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_SlaveRaidRegardCost_Bit)
        {
            value = m_SlaveRaidRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_SlaveRaidRegardCost_Bit) != 0;
    }
    bool HasLawsuitRegardCost() const { return (m_flags0 & k_Diplomacy_LawsuitRegardCost_Bit) != 0; }
    bool GetLawsuitRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_LawsuitRegardCost_Bit)
        {
            value = m_LawsuitRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_LawsuitRegardCost_Bit) != 0;
    }
    bool HasExpelUnitsRegardCost() const { return (m_flags0 & k_Diplomacy_ExpelUnitsRegardCost_Bit) != 0; }
    bool GetExpelUnitsRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_ExpelUnitsRegardCost_Bit)
        {
            value = m_ExpelUnitsRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_ExpelUnitsRegardCost_Bit) != 0;
    }
    bool HasNukeCityRegardCost() const { return (m_flags0 & k_Diplomacy_NukeCityRegardCost_Bit) != 0; }
    bool GetNukeCityRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_NukeCityRegardCost_Bit)
        {
            value = m_NukeCityRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_NukeCityRegardCost_Bit) != 0;
    }
    bool HasConvertCityRegardCost() const { return (m_flags0 & k_Diplomacy_ConvertCityRegardCost_Bit) != 0; }
    bool GetConvertCityRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_ConvertCityRegardCost_Bit)
        {
            value = m_ConvertCityRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_ConvertCityRegardCost_Bit) != 0;
    }
    bool HasEnslaveSettlerRegardCost() const { return (m_flags0 & k_Diplomacy_EnslaveSettlerRegardCost_Bit) != 0; }
    bool GetEnslaveSettlerRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_EnslaveSettlerRegardCost_Bit)
        {
            value = m_EnslaveSettlerRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_EnslaveSettlerRegardCost_Bit) != 0;
    }
    bool HasUndergroundRailwayRegardCost() const { return (m_flags0 & k_Diplomacy_UndergroundRailwayRegardCost_Bit) != 0; }
    bool GetUndergroundRailwayRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_UndergroundRailwayRegardCost_Bit)
        {
            value = m_UndergroundRailwayRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_UndergroundRailwayRegardCost_Bit) != 0;
    }
    bool HasInciteUprisingRegardCost() const { return (m_flags0 & k_Diplomacy_InciteUprisingRegardCost_Bit) != 0; }
    bool GetInciteUprisingRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_InciteUprisingRegardCost_Bit)
        {
            value = m_InciteUprisingRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_InciteUprisingRegardCost_Bit) != 0;
    }
    bool HasBioInfectedCityRegardCost() const { return (m_flags0 & k_Diplomacy_BioInfectedCityRegardCost_Bit) != 0; }
    bool GetBioInfectedCityRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_BioInfectedCityRegardCost_Bit)
        {
            value = m_BioInfectedCityRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_BioInfectedCityRegardCost_Bit) != 0;
    }
    bool HasPlagueCityRegardCost() const { return (m_flags0 & k_Diplomacy_PlagueCityRegardCost_Bit) != 0; }
    bool GetPlagueCityRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_PlagueCityRegardCost_Bit)
        {
            value = m_PlagueCityRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_PlagueCityRegardCost_Bit) != 0;
    }
    bool HasNanoInfectCityRegardCost() const { return (m_flags0 & k_Diplomacy_NanoInfectCityRegardCost_Bit) != 0; }
    bool GetNanoInfectCityRegardCost(sint32 & value) const
    {
        if (m_flags0 & k_Diplomacy_NanoInfectCityRegardCost_Bit)
        {
            value = m_NanoInfectCityRegardCostValue;
        }
        return (m_flags0 & k_Diplomacy_NanoInfectCityRegardCost_Bit) != 0;
    }
    bool HasCreateParkRegardCost() const { return (m_flags1 & k_Diplomacy_CreateParkRegardCost_Bit) != 0; }
    bool GetCreateParkRegardCost(sint32 & value) const
    {
        if (m_flags1 & k_Diplomacy_CreateParkRegardCost_Bit)
        {
            value = m_CreateParkRegardCostValue;
        }
        return (m_flags1 & k_Diplomacy_CreateParkRegardCost_Bit) != 0;
    }
    bool HasInjoinCityRegardCost() const { return (m_flags1 & k_Diplomacy_InjoinCityRegardCost_Bit) != 0; }
    bool GetInjoinCityRegardCost(sint32 & value) const
    {
        if (m_flags1 & k_Diplomacy_InjoinCityRegardCost_Bit)
        {
            value = m_InjoinCityRegardCostValue;
        }
        return (m_flags1 & k_Diplomacy_InjoinCityRegardCost_Bit) != 0;
    }
    bool HasPillageRegardCost() const { return (m_flags1 & k_Diplomacy_PillageRegardCost_Bit) != 0; }
    bool GetPillageRegardCost(sint32 & value) const
    {
        if (m_flags1 & k_Diplomacy_PillageRegardCost_Bit)
        {
            value = m_PillageRegardCostValue;
        }
        return (m_flags1 & k_Diplomacy_PillageRegardCost_Bit) != 0;
    }
    bool HasHoldReceptionRegardBonus() const { return (m_flags1 & k_Diplomacy_HoldReceptionRegardBonus_Bit) != 0; }
    bool GetHoldReceptionRegardBonus(sint32 & value) const
    {
        if (m_flags1 & k_Diplomacy_HoldReceptionRegardBonus_Bit)
        {
            value = m_HoldReceptionRegardBonusValue;
        }
        return (m_flags1 & k_Diplomacy_HoldReceptionRegardBonus_Bit) != 0;
    }
    bool HasHasPactTrustBonus() const { return (m_flags1 & k_Diplomacy_HasPactTrustBonus_Bit) != 0; }
    bool GetHasPactTrustBonus(sint32 & value) const
    {
        if (m_flags1 & k_Diplomacy_HasPactTrustBonus_Bit)
        {
            value = m_HasPactTrustBonusValue;
        }
        return (m_flags1 & k_Diplomacy_HasPactTrustBonus_Bit) != 0;
    }
    bool HasNoWarTrustBonus() const { return (m_flags1 & k_Diplomacy_NoWarTrustBonus_Bit) != 0; }
    bool GetNoWarTrustBonus(sint32 & value) const
    {
        if (m_flags1 & k_Diplomacy_NoWarTrustBonus_Bit)
        {
            value = m_NoWarTrustBonusValue;
        }
        return (m_flags1 & k_Diplomacy_NoWarTrustBonus_Bit) != 0;
    }
    bool HasAttackCivilianTrustCost() const { return (m_flags1 & k_Diplomacy_AttackCivilianTrustCost_Bit) != 0; }
    bool GetAttackCivilianTrustCost(sint32 & value) const
    {
        if (m_flags1 & k_Diplomacy_AttackCivilianTrustCost_Bit)
        {
            value = m_AttackCivilianTrustCostValue;
        }
        return (m_flags1 & k_Diplomacy_AttackCivilianTrustCost_Bit) != 0;
    }
    bool HasPreemptiveAttackTrustCost() const { return (m_flags1 & k_Diplomacy_PreemptiveAttackTrustCost_Bit) != 0; }
    bool GetPreemptiveAttackTrustCost(sint32 & value) const
    {
        if (m_flags1 & k_Diplomacy_PreemptiveAttackTrustCost_Bit)
        {
            value = m_PreemptiveAttackTrustCostValue;
        }
        return (m_flags1 & k_Diplomacy_PreemptiveAttackTrustCost_Bit) != 0;
    }
    bool HasFollowThroughTrustBonus() const { return (m_flags1 & k_Diplomacy_FollowThroughTrustBonus_Bit) != 0; }
    bool GetFollowThroughTrustBonus(sint32 & value) const
    {
        if (m_flags1 & k_Diplomacy_FollowThroughTrustBonus_Bit)
        {
            value = m_FollowThroughTrustBonusValue;
        }
        return (m_flags1 & k_Diplomacy_FollowThroughTrustBonus_Bit) != 0;
    }
    bool HasUsedNukesTrustCost() const { return (m_flags1 & k_Diplomacy_UsedNukesTrustCost_Bit) != 0; }
    bool GetUsedNukesTrustCost(sint32 & value) const
    {
        if (m_flags1 & k_Diplomacy_UsedNukesTrustCost_Bit)
        {
            value = m_UsedNukesTrustCostValue;
        }
        return (m_flags1 & k_Diplomacy_UsedNukesTrustCost_Bit) != 0;
    }
    bool HasWantMapTurns() const { return (m_flags1 & k_Diplomacy_WantMapTurns_Bit) != 0; }
    bool GetWantMapTurns(sint32 & value) const
    {
        if (m_flags1 & k_Diplomacy_WantMapTurns_Bit)
        {
            value = m_WantMapTurnsValue;
        }
        return (m_flags1 & k_Diplomacy_WantMapTurns_Bit) != 0;
    }
    const ProposalElement * GetProposalElement(sint32 index) const;
    sint32 GetNumProposalElement() const { return m_numProposalElement;}
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* DiplomacyRecord */

struct DiplomacyRecordAccessorInfo
{
    DiplomacyRecord::IntAccessor        m_intAccessor;
    DiplomacyRecord::BoolAccessor       m_boolAccessor;
    DiplomacyRecord::FloatAccessor      m_floatAccessor;
    DiplomacyRecord::BitIntAccessor     m_bitIntAccessor;
    DiplomacyRecord::BitFloatAccessor   m_bitFloatAccessor;
    DiplomacyRecord::IntArrayAccessor   m_intArrayAccessor;
    DiplomacyRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern DiplomacyRecordAccessorInfo      g_DiplomacyRecord_Accessors[];
extern CTPDatabase<DiplomacyRecord> *   g_theDiplomacyDB;

extern const char * g_Diplomacy_Tokens[];

#endif
