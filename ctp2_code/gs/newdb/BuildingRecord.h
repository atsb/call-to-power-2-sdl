
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef BUILDING_RECORD_H__
#define BUILDING_RECORD_H__

class BuildingRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class AdvanceRecord;
class CityStyleRecord;
class CivilisationRecord;
class FeatRecord;
class GovernmentRecord;
class IconRecord;
class MapIconRecord;
class ResourceRecord;
class TerrainImprovementRecord;
class WonderRecord;
class BuildingRecord;

#define k_Num_BuildingRecord_Tokens 159

//
// m_flags0: Building
#define k_Building_NeedsPopCountToBuild_Bit      0x00000001
#define k_Building_PopCountBuildLimit_Bit        0x00000002
#define k_Building_SquaredBorderRadius_Bit       0x00000004
#define k_Building_IntBorderRadius_Bit           0x00000008
#define k_Building_ShowCityIconTop_Bit           0x00000010
#define k_Building_ShowCityIconBottom_Bit        0x00000020
#define k_Building_IsReligionIcon_Bit            0x00000040
#define k_Building_TreasuryInterest_Bit          0x00000080
#define k_Building_CantSell_Bit                  0x00000100
#define k_Building_DisbandsCitySettlerNum_Bit    0x00000200
#define k_Building_CreatesMiltiaUnit_Bit         0x00000400
#define k_Building_GoldPerCity_Bit               0x00000800
#define k_Building_GoldPerUnit_Bit               0x00001000
#define k_Building_GoldPerUnitSupport_Bit        0x00002000
#define k_Building_GoldPerUnitReadiness_Bit      0x00004000
#define k_Building_UpkeepPerUnit_Bit             0x00008000
#define k_Building_UpkeepPerUnitWagesReadiness_Bit 0x00010000
#define k_Building_UpkeepPerCity_Bit             0x00020000
#define k_Building_UpkeepPerCitySq_Bit           0x00040000
#define k_Building_NewPopLimit_Bit               0x00080000
#define k_Building_UpkeepPerUnitSupport_Bit      0x00100000
#define k_Building_ProductionCostPopModifier_Bit 0x00200000
#define k_Building_Capitol_Bit                   0x00400000
#define k_Building_DefendersPercent_Bit          0x00800000
#define k_Building_HappyInc_Bit                  0x01000000
#define k_Building_DoubleTelevangelists_Bit      0x02000000
#define k_Building_ProductionPercent_Bit         0x04000000
#define k_Building_FoodPercent_Bit               0x08000000
#define k_Building_CommercePercent_Bit           0x10000000
#define k_Building_SciencePercent_Bit            0x20000000
#define k_Building_IncreaseBaseOvercrowding_Bit  0x40000000
#define k_Building_IncreaseMaxPopulation_Bit     0x80000000
//
// m_flags1: Building
#define k_Building_FoodVat_Bit                   0x00000001
#define k_Building_Airport_Bit                   0x00000002
#define k_Building_NoUnhappyPeople_Bit           0x00000004
#define k_Building_NoRushBuyPenalty_Bit          0x00000008
#define k_Building_LowerCrime_Bit                0x00000010
#define k_Building_PreventConversion_Bit         0x00000020
#define k_Building_PreventSlavery_Bit            0x00000040
#define k_Building_AllowGrunts_Bit               0x00000080
#define k_Building_LowerPeaceMovement_Bit        0x00000100
#define k_Building_GoldPerCitizen_Bit            0x00000200
#define k_Building_ProtectFromNukes_Bit          0x00000400
#define k_Building_ProtectFromBioAgents_Bit      0x00000800
#define k_Building_ProtectFromNanoVirus_Bit      0x00001000
#define k_Building_Television_Bit                0x00002000
#define k_Building_CityWalls_Bit                 0x00004000
#define k_Building_IsReligious_Bit               0x00008000
#define k_Building_ForceField_Bit                0x00010000
#define k_Building_CantBuildInSea_Bit            0x00020000
#define k_Building_CantBuildOnLand_Bit           0x00040000
#define k_Building_Cathedral_Bit                 0x00080000
#define k_Building_Brokerage_Bit                 0x00100000
#define k_Building_NuclearPlant_Bit              0x00200000
#define k_Building_SciencePerPop_Bit             0x00400000
#define k_Building_RaiseOvercrowdingLevel_Bit    0x00800000
#define k_Building_RaiseMaxPopulation_Bit        0x01000000
#define k_Building_StarvationProtection_Bit      0x02000000
#define k_Building_EmbassiesEverywhereEvenAtWar_Bit 0x04000000
#define k_Building_CoastalBuilding_Bit           0x08000000
#define k_Building_OnePerCiv_Bit                 0x10000000
#define k_Building_IncreaseHP_Bit                0x20000000
#define k_Building_EnablesAllVeterans_Bit        0x40000000
#define k_Building_EnablesLandVeterans_Bit       0x80000000
//
// m_flags2: Building
#define k_Building_EnablesSeaVeterans_Bit        0x00000001
#define k_Building_EnablesAirVeterans_Bit        0x00000002
#define k_Building_BuildingFeat_Bit              0x00000004
#define k_Building_OffenseBonusLand_Bit          0x00000008
#define k_Building_OffenseBonusWater_Bit         0x00000010
#define k_Building_OffenseBonusAir_Bit           0x00000020
#define k_Building_PopulationPollutionPercent_Bit 0x00000040
#define k_Building_ProductionPollutionPercent_Bit 0x00000080
#define k_Building_PollutionAmount_Bit           0x00000100
#define k_Building_ShowAsIcon_Bit                0x00000200
#define k_Building_EnergyHunger_Bit              0x00000400
#define k_Building_ProducesEnergy_Bit            0x00000800
#define k_Building_EnergyHungerPerPop_Bit        0x00001000
#define k_Building_ProducesEnergyPerPop_Bit      0x00002000
#define k_Building_GLHidden_Bit                  0x00004000
//
// m_flags0: BuildingFeat
#define k_BuildingFeat_Num_Bit                   0x00000001
#define k_BuildingFeat_PercentCities_Bit         0x00000002
#define k_MAX_ObsoleteAdvance                5

class BuildingRecord : public CTPRecord
{
public:
    typedef sint32 (BuildingRecord::*IntAccessor)() const;
    typedef bool   (BuildingRecord::*BoolAccessor)() const;
    typedef double (BuildingRecord::*FloatAccessor)() const ;
    typedef bool   (BuildingRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (BuildingRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (BuildingRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (BuildingRecord::*FloatArrayAccessor)(sint32 index) const;

    class BuildingFeat {
    private:
        uint32            m_flags0;
        sint32            m_Building; // Index into Building database
        sint32            m_NumValue;
        sint32            m_PercentCitiesValue;

    public:
        BuildingFeat();
        BuildingFeat(CivArchive & archive){ Serialize(archive); };
        ~BuildingFeat();
        BuildingFeat const & operator = (BuildingFeat const & rval);
        bool operator == (BuildingFeat const & rval) {
          if (m_Building != rval.m_Building)
             return false;
          return true;
        }

        void Serialize(CivArchive &archive);
        sint32 Parse(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, BuildingFeat **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, BuildingFeat *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();

        sint32           GetBuildingIndex() const { return m_Building; }
        BuildingRecord const * GetBuilding() const;
        bool HasNum() const { return (m_flags0 & k_BuildingFeat_Num_Bit) != 0; }
        bool GetNum(sint32 & value) const
        {
            if (m_flags0 & k_BuildingFeat_Num_Bit)
            {
                value = m_NumValue;
            }
            return (m_flags0 & k_BuildingFeat_Num_Bit) != 0;
        }
        bool HasPercentCities() const { return (m_flags0 & k_BuildingFeat_PercentCities_Bit) != 0; }
        bool GetPercentCities(sint32 & value) const
        {
            if (m_flags0 & k_BuildingFeat_PercentCities_Bit)
            {
                value = m_PercentCitiesValue;
            }
            return (m_flags0 & k_BuildingFeat_PercentCities_Bit) != 0;
        }

    }; /* class BuildingFeat */

private:
    uint32 m_flags0;
    uint32 m_flags1;
    uint32 m_flags2;
    sint32            m_DefaultIcon; // Index into Icon database
    sint32            m_Description;
    sint32            m_EnableAdvance; // Index into Advance database
    sint32            m_ObsoleteAdvance[k_MAX_ObsoleteAdvance]; // Index into Advance database
    sint32            m_numObsoleteAdvance;
    sint32          * m_PrerequisiteBuilding; // Index into Building database
    sint32            m_numPrerequisiteBuilding;
    sint32          * m_GovernmentsModified; // Index into Government database
    sint32            m_numGovernmentsModified;
    sint32          * m_CultureOnly; // Index into CityStyle database
    sint32            m_numCultureOnly;
    sint32          * m_CityStyleOnly; // Index into CityStyle database
    sint32            m_numCityStyleOnly;
    sint32          * m_GovernmentType; // Index into Government database
    sint32            m_numGovernmentType;
    sint32          * m_NeedsCityGood; // Index into Resource database
    sint32            m_numNeedsCityGood;
    sint32          * m_NeedsCityGoodAll; // Index into Resource database
    sint32            m_numNeedsCityGoodAll;
    sint32          * m_NeedsCityGoodAnyCity; // Index into Resource database
    sint32            m_numNeedsCityGoodAnyCity;
    sint32          * m_EnablesGood; // Index into Resource database
    sint32            m_numEnablesGood;
    sint32          * m_CivilisationOnly; // Index into Civilisation database
    sint32            m_numCivilisationOnly;
    sint32          * m_NeedsFeatToBuild; // Index into Feat database
    sint32            m_numNeedsFeatToBuild;
    sint32          * m_NeedsAnyPlayerFeatToBuild; // Index into Feat database
    sint32            m_numNeedsAnyPlayerFeatToBuild;
    sint32          * m_ConflictsWithBuilding; // Index into Building database
    sint32            m_numConflictsWithBuilding;
    sint32          * m_ExcludedByBuilding; // Index into Building database
    sint32            m_numExcludedByBuilding;
    sint32          * m_ExcludedByGovernmentType; // Index into Government database
    sint32            m_numExcludedByGovernmentType;
    sint32          * m_PrerequisiteWonder; // Index into Wonder database
    sint32            m_numPrerequisiteWonder;
    sint32          * m_ExcludedByWonder; // Index into Wonder database
    sint32            m_numExcludedByWonder;
    sint32            m_NeedsPopCountToBuildValue;
    sint32            m_PopCountBuildLimitValue;
    sint32          * m_RequiresGood; // Index into Resource database
    sint32            m_numRequiresGood;
    sint32          * m_ProducesGood; // Index into Resource database
    sint32            m_numProducesGood;
    sint32            m_SquaredBorderRadiusValue;
    sint32            m_IntBorderRadiusValue;
    sint32          * m_ShowOnMap; // Index into TerrainImprovement database
    sint32            m_numShowOnMap;
    sint32          * m_ShowOnMapRadius; // Index into TerrainImprovement database
    sint32            m_numShowOnMapRadius;
    sint32            m_ShowCityIconTopValue; // Index into MapIcon database
    sint32            m_ShowCityIconBottomValue; // Index into MapIcon database
    sint32            m_IsReligionIconValue; // Index into MapIcon database
    double            m_TreasuryInterestValue;
    sint32            m_DisbandsCitySettlerNumValue;
    sint32          * m_ActualBuildingEverywhere; // Index into Building database
    sint32            m_numActualBuildingEverywhere;
    sint32            m_ProductionCost;
    sint32            m_Upkeep;
    sint32            m_GoldPerCityValue;
    sint32            m_GoldPerUnitValue;
    sint32            m_GoldPerUnitSupportValue;
    sint32            m_GoldPerUnitReadinessValue;
    sint32            m_UpkeepPerUnitValue;
    sint32            m_UpkeepPerUnitWagesReadinessValue;
    sint32            m_UpkeepPerCityValue;
    sint32            m_UpkeepPerCitySqValue;
    sint32            m_NewPopLimitValue;
    sint32            m_UpkeepPerUnitSupportValue;
    double            m_DefendersPercentValue;
    sint32            m_HappyIncValue;
    double            m_ProductionPercentValue;
    double            m_FoodPercentValue;
    double            m_CommercePercentValue;
    double            m_SciencePercentValue;
    sint32            m_IncreaseBaseOvercrowdingValue;
    sint32            m_IncreaseMaxPopulationValue;
    double            m_FoodVatValue;
    double            m_LowerCrimeValue;
    double            m_PreventConversionValue;
    double            m_PreventSlaveryValue;
    double            m_LowerPeaceMovementValue;
    sint32            m_GoldPerCitizenValue;
    double            m_ProtectFromBioAgentsValue;
    double            m_ProtectFromNanoVirusValue;
    double            m_SciencePerPopValue;
    sint32            m_RaiseOvercrowdingLevelValue;
    sint32            m_RaiseMaxPopulationValue;
    sint32            m_StarvationProtectionValue;
    sint32            m_IncreaseHPValue;
    BuildingFeat      m_BuildingFeatValue;
    double            m_OffenseBonusLandValue;
    double            m_OffenseBonusWaterValue;
    double            m_OffenseBonusAirValue;
    double            m_PopulationPollutionPercentValue;
    double            m_ProductionPollutionPercentValue;
    double            m_PollutionAmountValue;
    char *            m_ShowAsIconValue;
    sint32            m_EnergyHungerValue;
    sint32            m_ProducesEnergyValue;
    sint32            m_EnergyHungerPerPopValue;
    sint32            m_ProducesEnergyPerPopValue;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    BuildingRecord() { Init(); };
    BuildingRecord(CivArchive &archive) { Serialize(archive); };
    BuildingRecord(BuildingRecord const & rval) { Init(); *this = rval; }
    ~BuildingRecord();
    BuildingRecord const & operator = (BuildingRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const BuildingRecord & rval);

    sint32           GetDefaultIconIndex() const { return m_DefaultIcon; }
    IconRecord const * GetDefaultIcon() const;
    sint32 GetDescription() const { return m_Description; }
    sint32           GetEnableAdvanceIndex() const { return m_EnableAdvance; }
    AdvanceRecord const * GetEnableAdvance() const;
    sint32 GetObsoleteAdvanceIndex(sint32 index) const;
    const AdvanceRecord * GetObsoleteAdvance(sint32 index) const;
    sint32 GetNumObsoleteAdvance() const { return m_numObsoleteAdvance;}
    sint32 GetPrerequisiteBuildingIndex(sint32 index) const;
    const BuildingRecord * GetPrerequisiteBuilding(sint32 index) const;
    sint32 GetNumPrerequisiteBuilding() const { return m_numPrerequisiteBuilding;}
    sint32 GetGovernmentsModifiedIndex(sint32 index) const;
    const GovernmentRecord * GetGovernmentsModified(sint32 index) const;
    sint32 GetNumGovernmentsModified() const { return m_numGovernmentsModified;}
    sint32 GetCultureOnlyIndex(sint32 index) const;
    const CityStyleRecord * GetCultureOnly(sint32 index) const;
    sint32 GetNumCultureOnly() const { return m_numCultureOnly;}
    sint32 GetCityStyleOnlyIndex(sint32 index) const;
    const CityStyleRecord * GetCityStyleOnly(sint32 index) const;
    sint32 GetNumCityStyleOnly() const { return m_numCityStyleOnly;}
    sint32 GetGovernmentTypeIndex(sint32 index) const;
    const GovernmentRecord * GetGovernmentType(sint32 index) const;
    sint32 GetNumGovernmentType() const { return m_numGovernmentType;}
    sint32 GetNeedsCityGoodIndex(sint32 index) const;
    const ResourceRecord * GetNeedsCityGood(sint32 index) const;
    sint32 GetNumNeedsCityGood() const { return m_numNeedsCityGood;}
    sint32 GetNeedsCityGoodAllIndex(sint32 index) const;
    const ResourceRecord * GetNeedsCityGoodAll(sint32 index) const;
    sint32 GetNumNeedsCityGoodAll() const { return m_numNeedsCityGoodAll;}
    sint32 GetNeedsCityGoodAnyCityIndex(sint32 index) const;
    const ResourceRecord * GetNeedsCityGoodAnyCity(sint32 index) const;
    sint32 GetNumNeedsCityGoodAnyCity() const { return m_numNeedsCityGoodAnyCity;}
    sint32 GetEnablesGoodIndex(sint32 index) const;
    const ResourceRecord * GetEnablesGood(sint32 index) const;
    sint32 GetNumEnablesGood() const { return m_numEnablesGood;}
    sint32 GetCivilisationOnlyIndex(sint32 index) const;
    const CivilisationRecord * GetCivilisationOnly(sint32 index) const;
    sint32 GetNumCivilisationOnly() const { return m_numCivilisationOnly;}
    sint32 GetNeedsFeatToBuildIndex(sint32 index) const;
    const FeatRecord * GetNeedsFeatToBuild(sint32 index) const;
    sint32 GetNumNeedsFeatToBuild() const { return m_numNeedsFeatToBuild;}
    sint32 GetNeedsAnyPlayerFeatToBuildIndex(sint32 index) const;
    const FeatRecord * GetNeedsAnyPlayerFeatToBuild(sint32 index) const;
    sint32 GetNumNeedsAnyPlayerFeatToBuild() const { return m_numNeedsAnyPlayerFeatToBuild;}
    sint32 GetConflictsWithBuildingIndex(sint32 index) const;
    const BuildingRecord * GetConflictsWithBuilding(sint32 index) const;
    sint32 GetNumConflictsWithBuilding() const { return m_numConflictsWithBuilding;}
    sint32 GetExcludedByBuildingIndex(sint32 index) const;
    const BuildingRecord * GetExcludedByBuilding(sint32 index) const;
    sint32 GetNumExcludedByBuilding() const { return m_numExcludedByBuilding;}
    sint32 GetExcludedByGovernmentTypeIndex(sint32 index) const;
    const GovernmentRecord * GetExcludedByGovernmentType(sint32 index) const;
    sint32 GetNumExcludedByGovernmentType() const { return m_numExcludedByGovernmentType;}
    sint32 GetPrerequisiteWonderIndex(sint32 index) const;
    const WonderRecord * GetPrerequisiteWonder(sint32 index) const;
    sint32 GetNumPrerequisiteWonder() const { return m_numPrerequisiteWonder;}
    sint32 GetExcludedByWonderIndex(sint32 index) const;
    const WonderRecord * GetExcludedByWonder(sint32 index) const;
    sint32 GetNumExcludedByWonder() const { return m_numExcludedByWonder;}
    bool HasNeedsPopCountToBuild() const { return (m_flags0 & k_Building_NeedsPopCountToBuild_Bit) != 0; }
    bool GetNeedsPopCountToBuild(sint32 & value) const
    {
        if (m_flags0 & k_Building_NeedsPopCountToBuild_Bit)
        {
            value = m_NeedsPopCountToBuildValue;
        }
        return (m_flags0 & k_Building_NeedsPopCountToBuild_Bit) != 0;
    }
    bool HasPopCountBuildLimit() const { return (m_flags0 & k_Building_PopCountBuildLimit_Bit) != 0; }
    bool GetPopCountBuildLimit(sint32 & value) const
    {
        if (m_flags0 & k_Building_PopCountBuildLimit_Bit)
        {
            value = m_PopCountBuildLimitValue;
        }
        return (m_flags0 & k_Building_PopCountBuildLimit_Bit) != 0;
    }
    sint32 GetRequiresGoodIndex(sint32 index) const;
    const ResourceRecord * GetRequiresGood(sint32 index) const;
    sint32 GetNumRequiresGood() const { return m_numRequiresGood;}
    sint32 GetProducesGoodIndex(sint32 index) const;
    const ResourceRecord * GetProducesGood(sint32 index) const;
    sint32 GetNumProducesGood() const { return m_numProducesGood;}
    bool HasSquaredBorderRadius() const { return (m_flags0 & k_Building_SquaredBorderRadius_Bit) != 0; }
    bool GetSquaredBorderRadius(sint32 & value) const
    {
        if (m_flags0 & k_Building_SquaredBorderRadius_Bit)
        {
            value = m_SquaredBorderRadiusValue;
        }
        return (m_flags0 & k_Building_SquaredBorderRadius_Bit) != 0;
    }
    bool HasIntBorderRadius() const { return (m_flags0 & k_Building_IntBorderRadius_Bit) != 0; }
    bool GetIntBorderRadius(sint32 & value) const
    {
        if (m_flags0 & k_Building_IntBorderRadius_Bit)
        {
            value = m_IntBorderRadiusValue;
        }
        return (m_flags0 & k_Building_IntBorderRadius_Bit) != 0;
    }
    sint32 GetShowOnMapIndex(sint32 index) const;
    const TerrainImprovementRecord * GetShowOnMap(sint32 index) const;
    sint32 GetNumShowOnMap() const { return m_numShowOnMap;}
    sint32 GetShowOnMapRadiusIndex(sint32 index) const;
    const TerrainImprovementRecord * GetShowOnMapRadius(sint32 index) const;
    sint32 GetNumShowOnMapRadius() const { return m_numShowOnMapRadius;}
    bool HasShowCityIconTop() const { return (m_flags0 & k_Building_ShowCityIconTop_Bit) != 0; }
    bool GetShowCityIconTopIndex(sint32 & index) const
    {
        index = (m_flags0 & k_Building_ShowCityIconTop_Bit) ? m_ShowCityIconTopValue : -1;
        return (m_flags0 & k_Building_ShowCityIconTop_Bit) != 0;
    }
    bool GetShowCityIconTop(const MapIconRecord * & rec) const;
    const MapIconRecord * GetShowCityIconTopPtr() const;
    bool HasShowCityIconBottom() const { return (m_flags0 & k_Building_ShowCityIconBottom_Bit) != 0; }
    bool GetShowCityIconBottomIndex(sint32 & index) const
    {
        index = (m_flags0 & k_Building_ShowCityIconBottom_Bit) ? m_ShowCityIconBottomValue : -1;
        return (m_flags0 & k_Building_ShowCityIconBottom_Bit) != 0;
    }
    bool GetShowCityIconBottom(const MapIconRecord * & rec) const;
    const MapIconRecord * GetShowCityIconBottomPtr() const;
    bool HasIsReligionIcon() const { return (m_flags0 & k_Building_IsReligionIcon_Bit) != 0; }
    bool GetIsReligionIconIndex(sint32 & index) const
    {
        index = (m_flags0 & k_Building_IsReligionIcon_Bit) ? m_IsReligionIconValue : -1;
        return (m_flags0 & k_Building_IsReligionIcon_Bit) != 0;
    }
    bool GetIsReligionIcon(const MapIconRecord * & rec) const;
    const MapIconRecord * GetIsReligionIconPtr() const;
    bool HasTreasuryInterest() const { return (m_flags0 & k_Building_TreasuryInterest_Bit) != 0; }
    bool GetTreasuryInterest(double & value) const
    {
        if (m_flags0 & k_Building_TreasuryInterest_Bit)
        {
            value = m_TreasuryInterestValue;
        }
        return (m_flags0 & k_Building_TreasuryInterest_Bit) != 0;
    }
    bool GetCantSell() const { return (m_flags0 & k_Building_CantSell_Bit) != 0; }
    bool HasDisbandsCitySettlerNum() const { return (m_flags0 & k_Building_DisbandsCitySettlerNum_Bit) != 0; }
    bool GetDisbandsCitySettlerNum(sint32 & value) const
    {
        if (m_flags0 & k_Building_DisbandsCitySettlerNum_Bit)
        {
            value = m_DisbandsCitySettlerNumValue;
        }
        return (m_flags0 & k_Building_DisbandsCitySettlerNum_Bit) != 0;
    }
    bool GetCreatesMiltiaUnit() const { return (m_flags0 & k_Building_CreatesMiltiaUnit_Bit) != 0; }
    sint32 GetActualBuildingEverywhereIndex(sint32 index) const;
    const BuildingRecord * GetActualBuildingEverywhere(sint32 index) const;
    sint32 GetNumActualBuildingEverywhere() const { return m_numActualBuildingEverywhere;}
    sint32 GetProductionCost() const { return m_ProductionCost; }
    sint32 GetUpkeep() const { return m_Upkeep; }
    bool HasGoldPerCity() const { return (m_flags0 & k_Building_GoldPerCity_Bit) != 0; }
    bool GetGoldPerCity(sint32 & value) const
    {
        if (m_flags0 & k_Building_GoldPerCity_Bit)
        {
            value = m_GoldPerCityValue;
        }
        return (m_flags0 & k_Building_GoldPerCity_Bit) != 0;
    }
    bool HasGoldPerUnit() const { return (m_flags0 & k_Building_GoldPerUnit_Bit) != 0; }
    bool GetGoldPerUnit(sint32 & value) const
    {
        if (m_flags0 & k_Building_GoldPerUnit_Bit)
        {
            value = m_GoldPerUnitValue;
        }
        return (m_flags0 & k_Building_GoldPerUnit_Bit) != 0;
    }
    bool HasGoldPerUnitSupport() const { return (m_flags0 & k_Building_GoldPerUnitSupport_Bit) != 0; }
    bool GetGoldPerUnitSupport(sint32 & value) const
    {
        if (m_flags0 & k_Building_GoldPerUnitSupport_Bit)
        {
            value = m_GoldPerUnitSupportValue;
        }
        return (m_flags0 & k_Building_GoldPerUnitSupport_Bit) != 0;
    }
    bool HasGoldPerUnitReadiness() const { return (m_flags0 & k_Building_GoldPerUnitReadiness_Bit) != 0; }
    bool GetGoldPerUnitReadiness(sint32 & value) const
    {
        if (m_flags0 & k_Building_GoldPerUnitReadiness_Bit)
        {
            value = m_GoldPerUnitReadinessValue;
        }
        return (m_flags0 & k_Building_GoldPerUnitReadiness_Bit) != 0;
    }
    bool HasUpkeepPerUnit() const { return (m_flags0 & k_Building_UpkeepPerUnit_Bit) != 0; }
    bool GetUpkeepPerUnit(sint32 & value) const
    {
        if (m_flags0 & k_Building_UpkeepPerUnit_Bit)
        {
            value = m_UpkeepPerUnitValue;
        }
        return (m_flags0 & k_Building_UpkeepPerUnit_Bit) != 0;
    }
    bool HasUpkeepPerUnitWagesReadiness() const { return (m_flags0 & k_Building_UpkeepPerUnitWagesReadiness_Bit) != 0; }
    bool GetUpkeepPerUnitWagesReadiness(sint32 & value) const
    {
        if (m_flags0 & k_Building_UpkeepPerUnitWagesReadiness_Bit)
        {
            value = m_UpkeepPerUnitWagesReadinessValue;
        }
        return (m_flags0 & k_Building_UpkeepPerUnitWagesReadiness_Bit) != 0;
    }
    bool HasUpkeepPerCity() const { return (m_flags0 & k_Building_UpkeepPerCity_Bit) != 0; }
    bool GetUpkeepPerCity(sint32 & value) const
    {
        if (m_flags0 & k_Building_UpkeepPerCity_Bit)
        {
            value = m_UpkeepPerCityValue;
        }
        return (m_flags0 & k_Building_UpkeepPerCity_Bit) != 0;
    }
    bool HasUpkeepPerCitySq() const { return (m_flags0 & k_Building_UpkeepPerCitySq_Bit) != 0; }
    bool GetUpkeepPerCitySq(sint32 & value) const
    {
        if (m_flags0 & k_Building_UpkeepPerCitySq_Bit)
        {
            value = m_UpkeepPerCitySqValue;
        }
        return (m_flags0 & k_Building_UpkeepPerCitySq_Bit) != 0;
    }
    bool HasNewPopLimit() const { return (m_flags0 & k_Building_NewPopLimit_Bit) != 0; }
    bool GetNewPopLimit(sint32 & value) const
    {
        if (m_flags0 & k_Building_NewPopLimit_Bit)
        {
            value = m_NewPopLimitValue;
        }
        return (m_flags0 & k_Building_NewPopLimit_Bit) != 0;
    }
    bool HasUpkeepPerUnitSupport() const { return (m_flags0 & k_Building_UpkeepPerUnitSupport_Bit) != 0; }
    bool GetUpkeepPerUnitSupport(sint32 & value) const
    {
        if (m_flags0 & k_Building_UpkeepPerUnitSupport_Bit)
        {
            value = m_UpkeepPerUnitSupportValue;
        }
        return (m_flags0 & k_Building_UpkeepPerUnitSupport_Bit) != 0;
    }
    bool GetProductionCostPopModifier() const { return (m_flags0 & k_Building_ProductionCostPopModifier_Bit) != 0; }
    bool GetCapitol() const { return (m_flags0 & k_Building_Capitol_Bit) != 0; }
    bool HasDefendersPercent() const { return (m_flags0 & k_Building_DefendersPercent_Bit) != 0; }
    bool GetDefendersPercent(double & value) const
    {
        if (m_flags0 & k_Building_DefendersPercent_Bit)
        {
            value = m_DefendersPercentValue;
        }
        return (m_flags0 & k_Building_DefendersPercent_Bit) != 0;
    }
    bool HasHappyInc() const { return (m_flags0 & k_Building_HappyInc_Bit) != 0; }
    bool GetHappyInc(sint32 & value) const
    {
        if (m_flags0 & k_Building_HappyInc_Bit)
        {
            value = m_HappyIncValue;
        }
        return (m_flags0 & k_Building_HappyInc_Bit) != 0;
    }
    bool GetDoubleTelevangelists() const { return (m_flags0 & k_Building_DoubleTelevangelists_Bit) != 0; }
    bool HasProductionPercent() const { return (m_flags0 & k_Building_ProductionPercent_Bit) != 0; }
    bool GetProductionPercent(double & value) const
    {
        if (m_flags0 & k_Building_ProductionPercent_Bit)
        {
            value = m_ProductionPercentValue;
        }
        return (m_flags0 & k_Building_ProductionPercent_Bit) != 0;
    }
    bool HasFoodPercent() const { return (m_flags0 & k_Building_FoodPercent_Bit) != 0; }
    bool GetFoodPercent(double & value) const
    {
        if (m_flags0 & k_Building_FoodPercent_Bit)
        {
            value = m_FoodPercentValue;
        }
        return (m_flags0 & k_Building_FoodPercent_Bit) != 0;
    }
    bool HasCommercePercent() const { return (m_flags0 & k_Building_CommercePercent_Bit) != 0; }
    bool GetCommercePercent(double & value) const
    {
        if (m_flags0 & k_Building_CommercePercent_Bit)
        {
            value = m_CommercePercentValue;
        }
        return (m_flags0 & k_Building_CommercePercent_Bit) != 0;
    }
    bool HasSciencePercent() const { return (m_flags0 & k_Building_SciencePercent_Bit) != 0; }
    bool GetSciencePercent(double & value) const
    {
        if (m_flags0 & k_Building_SciencePercent_Bit)
        {
            value = m_SciencePercentValue;
        }
        return (m_flags0 & k_Building_SciencePercent_Bit) != 0;
    }
    bool HasIncreaseBaseOvercrowding() const { return (m_flags0 & k_Building_IncreaseBaseOvercrowding_Bit) != 0; }
    bool GetIncreaseBaseOvercrowding(sint32 & value) const
    {
        if (m_flags0 & k_Building_IncreaseBaseOvercrowding_Bit)
        {
            value = m_IncreaseBaseOvercrowdingValue;
        }
        return (m_flags0 & k_Building_IncreaseBaseOvercrowding_Bit) != 0;
    }
    bool HasIncreaseMaxPopulation() const { return (m_flags0 & k_Building_IncreaseMaxPopulation_Bit) != 0; }
    bool GetIncreaseMaxPopulation(sint32 & value) const
    {
        if (m_flags0 & k_Building_IncreaseMaxPopulation_Bit)
        {
            value = m_IncreaseMaxPopulationValue;
        }
        return (m_flags0 & k_Building_IncreaseMaxPopulation_Bit) != 0;
    }
    bool HasFoodVat() const { return (m_flags1 & k_Building_FoodVat_Bit) != 0; }
    bool GetFoodVat(double & value) const
    {
        if (m_flags1 & k_Building_FoodVat_Bit)
        {
            value = m_FoodVatValue;
        }
        return (m_flags1 & k_Building_FoodVat_Bit) != 0;
    }
    bool GetAirport() const { return (m_flags1 & k_Building_Airport_Bit) != 0; }
    bool GetNoUnhappyPeople() const { return (m_flags1 & k_Building_NoUnhappyPeople_Bit) != 0; }
    bool GetNoRushBuyPenalty() const { return (m_flags1 & k_Building_NoRushBuyPenalty_Bit) != 0; }
    bool HasLowerCrime() const { return (m_flags1 & k_Building_LowerCrime_Bit) != 0; }
    bool GetLowerCrime(double & value) const
    {
        if (m_flags1 & k_Building_LowerCrime_Bit)
        {
            value = m_LowerCrimeValue;
        }
        return (m_flags1 & k_Building_LowerCrime_Bit) != 0;
    }
    bool HasPreventConversion() const { return (m_flags1 & k_Building_PreventConversion_Bit) != 0; }
    bool GetPreventConversion(double & value) const
    {
        if (m_flags1 & k_Building_PreventConversion_Bit)
        {
            value = m_PreventConversionValue;
        }
        return (m_flags1 & k_Building_PreventConversion_Bit) != 0;
    }
    bool HasPreventSlavery() const { return (m_flags1 & k_Building_PreventSlavery_Bit) != 0; }
    bool GetPreventSlavery(double & value) const
    {
        if (m_flags1 & k_Building_PreventSlavery_Bit)
        {
            value = m_PreventSlaveryValue;
        }
        return (m_flags1 & k_Building_PreventSlavery_Bit) != 0;
    }
    bool GetAllowGrunts() const { return (m_flags1 & k_Building_AllowGrunts_Bit) != 0; }
    bool HasLowerPeaceMovement() const { return (m_flags1 & k_Building_LowerPeaceMovement_Bit) != 0; }
    bool GetLowerPeaceMovement(double & value) const
    {
        if (m_flags1 & k_Building_LowerPeaceMovement_Bit)
        {
            value = m_LowerPeaceMovementValue;
        }
        return (m_flags1 & k_Building_LowerPeaceMovement_Bit) != 0;
    }
    bool HasGoldPerCitizen() const { return (m_flags1 & k_Building_GoldPerCitizen_Bit) != 0; }
    bool GetGoldPerCitizen(sint32 & value) const
    {
        if (m_flags1 & k_Building_GoldPerCitizen_Bit)
        {
            value = m_GoldPerCitizenValue;
        }
        return (m_flags1 & k_Building_GoldPerCitizen_Bit) != 0;
    }
    bool GetProtectFromNukes() const { return (m_flags1 & k_Building_ProtectFromNukes_Bit) != 0; }
    bool HasProtectFromBioAgents() const { return (m_flags1 & k_Building_ProtectFromBioAgents_Bit) != 0; }
    bool GetProtectFromBioAgents(double & value) const
    {
        if (m_flags1 & k_Building_ProtectFromBioAgents_Bit)
        {
            value = m_ProtectFromBioAgentsValue;
        }
        return (m_flags1 & k_Building_ProtectFromBioAgents_Bit) != 0;
    }
    bool HasProtectFromNanoVirus() const { return (m_flags1 & k_Building_ProtectFromNanoVirus_Bit) != 0; }
    bool GetProtectFromNanoVirus(double & value) const
    {
        if (m_flags1 & k_Building_ProtectFromNanoVirus_Bit)
        {
            value = m_ProtectFromNanoVirusValue;
        }
        return (m_flags1 & k_Building_ProtectFromNanoVirus_Bit) != 0;
    }
    bool GetTelevision() const { return (m_flags1 & k_Building_Television_Bit) != 0; }
    bool GetCityWalls() const { return (m_flags1 & k_Building_CityWalls_Bit) != 0; }
    bool GetIsReligious() const { return (m_flags1 & k_Building_IsReligious_Bit) != 0; }
    bool GetForceField() const { return (m_flags1 & k_Building_ForceField_Bit) != 0; }
    bool GetCantBuildInSea() const { return (m_flags1 & k_Building_CantBuildInSea_Bit) != 0; }
    bool GetCantBuildOnLand() const { return (m_flags1 & k_Building_CantBuildOnLand_Bit) != 0; }
    bool GetCathedral() const { return (m_flags1 & k_Building_Cathedral_Bit) != 0; }
    bool GetBrokerage() const { return (m_flags1 & k_Building_Brokerage_Bit) != 0; }
    bool GetNuclearPlant() const { return (m_flags1 & k_Building_NuclearPlant_Bit) != 0; }
    bool HasSciencePerPop() const { return (m_flags1 & k_Building_SciencePerPop_Bit) != 0; }
    bool GetSciencePerPop(double & value) const
    {
        if (m_flags1 & k_Building_SciencePerPop_Bit)
        {
            value = m_SciencePerPopValue;
        }
        return (m_flags1 & k_Building_SciencePerPop_Bit) != 0;
    }
    bool HasRaiseOvercrowdingLevel() const { return (m_flags1 & k_Building_RaiseOvercrowdingLevel_Bit) != 0; }
    bool GetRaiseOvercrowdingLevel(sint32 & value) const
    {
        if (m_flags1 & k_Building_RaiseOvercrowdingLevel_Bit)
        {
            value = m_RaiseOvercrowdingLevelValue;
        }
        return (m_flags1 & k_Building_RaiseOvercrowdingLevel_Bit) != 0;
    }
    bool HasRaiseMaxPopulation() const { return (m_flags1 & k_Building_RaiseMaxPopulation_Bit) != 0; }
    bool GetRaiseMaxPopulation(sint32 & value) const
    {
        if (m_flags1 & k_Building_RaiseMaxPopulation_Bit)
        {
            value = m_RaiseMaxPopulationValue;
        }
        return (m_flags1 & k_Building_RaiseMaxPopulation_Bit) != 0;
    }
    bool HasStarvationProtection() const { return (m_flags1 & k_Building_StarvationProtection_Bit) != 0; }
    bool GetStarvationProtection(sint32 & value) const
    {
        if (m_flags1 & k_Building_StarvationProtection_Bit)
        {
            value = m_StarvationProtectionValue;
        }
        return (m_flags1 & k_Building_StarvationProtection_Bit) != 0;
    }
    bool GetEmbassiesEverywhereEvenAtWar() const { return (m_flags1 & k_Building_EmbassiesEverywhereEvenAtWar_Bit) != 0; }
    bool GetCoastalBuilding() const { return (m_flags1 & k_Building_CoastalBuilding_Bit) != 0; }
    bool GetOnePerCiv() const { return (m_flags1 & k_Building_OnePerCiv_Bit) != 0; }
    bool HasIncreaseHP() const { return (m_flags1 & k_Building_IncreaseHP_Bit) != 0; }
    bool GetIncreaseHP(sint32 & value) const
    {
        if (m_flags1 & k_Building_IncreaseHP_Bit)
        {
            value = m_IncreaseHPValue;
        }
        return (m_flags1 & k_Building_IncreaseHP_Bit) != 0;
    }
    bool GetEnablesAllVeterans() const { return (m_flags1 & k_Building_EnablesAllVeterans_Bit) != 0; }
    bool GetEnablesLandVeterans() const { return (m_flags1 & k_Building_EnablesLandVeterans_Bit) != 0; }
    bool GetEnablesSeaVeterans() const { return (m_flags2 & k_Building_EnablesSeaVeterans_Bit) != 0; }
    bool GetEnablesAirVeterans() const { return (m_flags2 & k_Building_EnablesAirVeterans_Bit) != 0; }
    bool HasBuildingFeat() const { return (m_flags2 & k_Building_BuildingFeat_Bit) != 0; }
    bool GetBuildingFeat(const BuildingFeat *&ptr) const
    {
        ptr = (m_flags2 & k_Building_BuildingFeat_Bit) ? &m_BuildingFeatValue : NULL;
        return (m_flags2 & k_Building_BuildingFeat_Bit) != 0;
    }
    const BuildingFeat * GetBuildingFeatPtr() const
    {
        return (m_flags2 & k_Building_BuildingFeat_Bit) ? &m_BuildingFeatValue : NULL;
    }
    bool HasOffenseBonusLand() const { return (m_flags2 & k_Building_OffenseBonusLand_Bit) != 0; }
    bool GetOffenseBonusLand(double & value) const
    {
        if (m_flags2 & k_Building_OffenseBonusLand_Bit)
        {
            value = m_OffenseBonusLandValue;
        }
        return (m_flags2 & k_Building_OffenseBonusLand_Bit) != 0;
    }
    bool HasOffenseBonusWater() const { return (m_flags2 & k_Building_OffenseBonusWater_Bit) != 0; }
    bool GetOffenseBonusWater(double & value) const
    {
        if (m_flags2 & k_Building_OffenseBonusWater_Bit)
        {
            value = m_OffenseBonusWaterValue;
        }
        return (m_flags2 & k_Building_OffenseBonusWater_Bit) != 0;
    }
    bool HasOffenseBonusAir() const { return (m_flags2 & k_Building_OffenseBonusAir_Bit) != 0; }
    bool GetOffenseBonusAir(double & value) const
    {
        if (m_flags2 & k_Building_OffenseBonusAir_Bit)
        {
            value = m_OffenseBonusAirValue;
        }
        return (m_flags2 & k_Building_OffenseBonusAir_Bit) != 0;
    }
    bool HasPopulationPollutionPercent() const { return (m_flags2 & k_Building_PopulationPollutionPercent_Bit) != 0; }
    bool GetPopulationPollutionPercent(double & value) const
    {
        if (m_flags2 & k_Building_PopulationPollutionPercent_Bit)
        {
            value = m_PopulationPollutionPercentValue;
        }
        return (m_flags2 & k_Building_PopulationPollutionPercent_Bit) != 0;
    }
    bool HasProductionPollutionPercent() const { return (m_flags2 & k_Building_ProductionPollutionPercent_Bit) != 0; }
    bool GetProductionPollutionPercent(double & value) const
    {
        if (m_flags2 & k_Building_ProductionPollutionPercent_Bit)
        {
            value = m_ProductionPollutionPercentValue;
        }
        return (m_flags2 & k_Building_ProductionPollutionPercent_Bit) != 0;
    }
    bool HasPollutionAmount() const { return (m_flags2 & k_Building_PollutionAmount_Bit) != 0; }
    bool GetPollutionAmount(double & value) const
    {
        if (m_flags2 & k_Building_PollutionAmount_Bit)
        {
            value = m_PollutionAmountValue;
        }
        return (m_flags2 & k_Building_PollutionAmount_Bit) != 0;
    }
    bool HasShowAsIcon() const { return (m_flags2 & k_Building_ShowAsIcon_Bit) != 0; }
    bool GetShowAsIcon(char const * & value) const
    {
        if (m_flags2 & k_Building_ShowAsIcon_Bit)
        {
            value = m_ShowAsIconValue;
        }
        return (m_flags2 & k_Building_ShowAsIcon_Bit) != 0;
    }
    bool HasEnergyHunger() const { return (m_flags2 & k_Building_EnergyHunger_Bit) != 0; }
    bool GetEnergyHunger(sint32 & value) const
    {
        if (m_flags2 & k_Building_EnergyHunger_Bit)
        {
            value = m_EnergyHungerValue;
        }
        return (m_flags2 & k_Building_EnergyHunger_Bit) != 0;
    }
    bool HasProducesEnergy() const { return (m_flags2 & k_Building_ProducesEnergy_Bit) != 0; }
    bool GetProducesEnergy(sint32 & value) const
    {
        if (m_flags2 & k_Building_ProducesEnergy_Bit)
        {
            value = m_ProducesEnergyValue;
        }
        return (m_flags2 & k_Building_ProducesEnergy_Bit) != 0;
    }
    bool HasEnergyHungerPerPop() const { return (m_flags2 & k_Building_EnergyHungerPerPop_Bit) != 0; }
    bool GetEnergyHungerPerPop(sint32 & value) const
    {
        if (m_flags2 & k_Building_EnergyHungerPerPop_Bit)
        {
            value = m_EnergyHungerPerPopValue;
        }
        return (m_flags2 & k_Building_EnergyHungerPerPop_Bit) != 0;
    }
    bool HasProducesEnergyPerPop() const { return (m_flags2 & k_Building_ProducesEnergyPerPop_Bit) != 0; }
    bool GetProducesEnergyPerPop(sint32 & value) const
    {
        if (m_flags2 & k_Building_ProducesEnergyPerPop_Bit)
        {
            value = m_ProducesEnergyPerPopValue;
        }
        return (m_flags2 & k_Building_ProducesEnergyPerPop_Bit) != 0;
    }
    bool GetGLHidden() const { return (m_flags2 & k_Building_GLHidden_Bit) != 0; }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return m_numGovernmentsModified; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return GetGovernmentsModifiedIndex(index); }

}; /* BuildingRecord */

struct BuildingRecordAccessorInfo
{
    BuildingRecord::IntAccessor        m_intAccessor;
    BuildingRecord::BoolAccessor       m_boolAccessor;
    BuildingRecord::FloatAccessor      m_floatAccessor;
    BuildingRecord::BitIntAccessor     m_bitIntAccessor;
    BuildingRecord::BitFloatAccessor   m_bitFloatAccessor;
    BuildingRecord::IntArrayAccessor   m_intArrayAccessor;
    BuildingRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern BuildingRecordAccessorInfo      g_BuildingRecord_Accessors[];
extern CTPDatabase<BuildingRecord> *   g_theBuildingDB;

extern const char * g_Building_Tokens[];

#endif
