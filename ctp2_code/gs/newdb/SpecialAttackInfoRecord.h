
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef SPECIALATTACKINFO_RECORD_H__
#define SPECIALATTACKINFO_RECORD_H__

class SpecialAttackInfoRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class SoundRecord;
class SpecialEffectRecord;

#define k_Num_SpecialAttackInfoRecord_Tokens 2


class SpecialAttackInfoRecord : public CTPRecord
{
public:
    typedef sint32 (SpecialAttackInfoRecord::*IntAccessor)() const;
    typedef bool   (SpecialAttackInfoRecord::*BoolAccessor)() const;
    typedef double (SpecialAttackInfoRecord::*FloatAccessor)() const ;
    typedef bool   (SpecialAttackInfoRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (SpecialAttackInfoRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (SpecialAttackInfoRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (SpecialAttackInfoRecord::*FloatArrayAccessor)(sint32 index) const;

private:
    sint32            m_SoundID; // Index into Sound database
    sint32            m_SpriteID; // Index into SpecialEffect database
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    SpecialAttackInfoRecord() { Init(); };
    SpecialAttackInfoRecord(CivArchive &archive) { Serialize(archive); };
    SpecialAttackInfoRecord(SpecialAttackInfoRecord const & rval) { Init(); *this = rval; }
    ~SpecialAttackInfoRecord();
    SpecialAttackInfoRecord const & operator = (SpecialAttackInfoRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const SpecialAttackInfoRecord & rval);

    sint32           GetSoundIDIndex() const { return m_SoundID; }
    SoundRecord const * GetSoundID() const;
    sint32           GetSpriteIDIndex() const { return m_SpriteID; }
    SpecialEffectRecord const * GetSpriteID() const;
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* SpecialAttackInfoRecord */

struct SpecialAttackInfoRecordAccessorInfo
{
    SpecialAttackInfoRecord::IntAccessor        m_intAccessor;
    SpecialAttackInfoRecord::BoolAccessor       m_boolAccessor;
    SpecialAttackInfoRecord::FloatAccessor      m_floatAccessor;
    SpecialAttackInfoRecord::BitIntAccessor     m_bitIntAccessor;
    SpecialAttackInfoRecord::BitFloatAccessor   m_bitFloatAccessor;
    SpecialAttackInfoRecord::IntArrayAccessor   m_intArrayAccessor;
    SpecialAttackInfoRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern SpecialAttackInfoRecordAccessorInfo      g_SpecialAttackInfoRecord_Accessors[];
extern CTPDatabase<SpecialAttackInfoRecord> *   g_theSpecialAttackInfoDB;

extern const char * g_SpecialAttackInfo_Tokens[];

#endif
