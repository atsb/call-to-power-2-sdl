
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef TERRAINIMPROVEMENT_RECORD_H__
#define TERRAINIMPROVEMENT_RECORD_H__

class TerrainImprovementRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class CityStyleRecord;
class GovernmentRecord;
class IconRecord;
class ResourceRecord;
class SoundRecord;
class TerrainRecord;
class TerrainRecord;
class TerrainImprovementRecord;
class CityStyleRecord;
class AdvanceRecord;
class AdvanceRecord;
class ResourceRecord;
class WonderRecord;

#define k_Num_TerrainImprovementRecord_Tokens 46

//
// m_flags0: TerrainImprovement
#define k_TerrainImprovement_Effect_Bit          0x00000001
#define k_TerrainImprovement_DeniedToEnemy_Bit   0x00000002
#define k_TerrainImprovement_CanExportTileValue_Bit 0x00000004
#define k_TerrainImprovement_CanExportGood_Bit   0x00000008
#define k_TerrainImprovement_CanExportTileValueRadius_Bit 0x00000010
#define k_TerrainImprovement_IsCanal_Bit         0x00000020
#define k_TerrainImprovement_OnlySpecialBuild_Bit 0x00000040
#define k_TerrainImprovement_TerraformTerrain_Bit 0x00000080
#define k_TerrainImprovement_Column_Bit          0x00000100
#define k_TerrainImprovement_IntBorderRadius_Bit 0x00000200
#define k_TerrainImprovement_SquaredBorderRadius_Bit 0x00000400
#define k_TerrainImprovement_MoveBonus_Bit       0x00000800
#define k_TerrainImprovement_Colony_Bit          0x00001000
#define k_TerrainImprovement_GLHidden_Bit        0x00002000
#define k_TerrainImprovement_CantPillage_Bit     0x00004000
#define k_TerrainImprovement_SpawnsBarbarians_Bit 0x00008000
#define k_TerrainImprovement_CanBuildAlly_Bit    0x00010000
#define k_TerrainImprovement_CanBuildWasteland_Bit 0x00020000
#define k_TerrainImprovement_CanUpgrade_Bit      0x00040000
#define k_TerrainImprovement_IsCityRuin_Bit      0x00080000
//
// m_Class bit group
#define k_TerrainImprovement_Class_Farm_Bit      0x00000001
#define k_TerrainImprovement_Class_Road_Bit      0x00000002
#define k_TerrainImprovement_Class_Mine_Bit      0x00000004
#define k_TerrainImprovement_Class_ATM_Bit       0x00000008
#define k_TerrainImprovement_Class_OceanFarm_Bit 0x00000010
#define k_TerrainImprovement_Class_OceanMine_Bit 0x00000020
#define k_TerrainImprovement_Class_OceanATM_Bit  0x00000040
#define k_TerrainImprovement_Class_OceanRoad_Bit 0x00000080
#define k_TerrainImprovement_Class_Structure1_Bit 0x00000100
#define k_TerrainImprovement_Class_Structure2_Bit 0x00000200
#define k_TerrainImprovement_Class_LandDetector_Bit 0x00000400
#define k_TerrainImprovement_Class_OceanDetector_Bit 0x00000800
#define k_TerrainImprovement_Class_Terraform_Bit 0x00001000
#define k_TerrainImprovement_Class_Oceanform_Bit 0x00002000
#define k_TerrainImprovement_Class_Wonder_Bit    0x00004000
#define k_TerrainImprovement_Class_Urban_Bit     0x00008000
//
// m_Excludes bit group
#define k_TerrainImprovement_Excludes_Farm_Bit   0x00000001
#define k_TerrainImprovement_Excludes_Road_Bit   0x00000002
#define k_TerrainImprovement_Excludes_Mine_Bit   0x00000004
#define k_TerrainImprovement_Excludes_ATM_Bit    0x00000008
#define k_TerrainImprovement_Excludes_OceanFarm_Bit 0x00000010
#define k_TerrainImprovement_Excludes_OceanMine_Bit 0x00000020
#define k_TerrainImprovement_Excludes_OceanATM_Bit 0x00000040
#define k_TerrainImprovement_Excludes_OceanRoad_Bit 0x00000080
#define k_TerrainImprovement_Excludes_Structure1_Bit 0x00000100
#define k_TerrainImprovement_Excludes_Structure2_Bit 0x00000200
#define k_TerrainImprovement_Excludes_LandDetector_Bit 0x00000400
#define k_TerrainImprovement_Excludes_OceanDetector_Bit 0x00000800
#define k_TerrainImprovement_Excludes_Terraform_Bit 0x00001000
#define k_TerrainImprovement_Excludes_Oceanform_Bit 0x00002000
#define k_TerrainImprovement_Excludes_Wonder_Bit 0x00004000
#define k_TerrainImprovement_Excludes_Urban_Bit  0x00008000
//
// m_CanSee bit group
#define k_TerrainImprovement_CanSee_Standard_Bit 0x00000001
#define k_TerrainImprovement_CanSee_Underwater_Bit 0x00000002
#define k_TerrainImprovement_CanSee_Stealth_Bit  0x00000004
#define k_TerrainImprovement_CanSee_UnusedBit3_Bit 0x00000008
#define k_TerrainImprovement_CanSee_UnusedBit4_Bit 0x00000010
#define k_TerrainImprovement_CanSee_UnusedBit5_Bit 0x00000020
#define k_TerrainImprovement_CanSee_UnusedBit6_Bit 0x00000040
#define k_TerrainImprovement_CanSee_UnusedBit7_Bit 0x00000080
#define k_TerrainImprovement_CanSee_UnusedBit8_Bit 0x00000100
#define k_TerrainImprovement_CanSee_UnusedBit9_Bit 0x00000200
#define k_TerrainImprovement_CanSee_UnusedBit10_Bit 0x00000400
#define k_TerrainImprovement_CanSee_UnusedBit11_Bit 0x00000800
#define k_TerrainImprovement_CanSee_UnusedBit12_Bit 0x00001000
#define k_TerrainImprovement_CanSee_UnusedBit13_Bit 0x00002000
#define k_TerrainImprovement_CanSee_UnusedBit14_Bit 0x00004000
#define k_TerrainImprovement_CanSee_UnusedBit15_Bit 0x00008000
//
// m_flags0: Effect
#define k_Effect_BonusFood_Bit                   0x00000001
#define k_Effect_BonusProduction_Bit             0x00000002
#define k_Effect_BonusGold_Bit                   0x00000004
#define k_Effect_MoveCost_Bit                    0x00000008
#define k_Effect_Freight_Bit                     0x00000010
#define k_Effect_Radar_Bit                       0x00000020
#define k_Effect_NeedsWorker_Bit                 0x00000040
#define k_Effect_Airport_Bit                     0x00000080
#define k_Effect_Colony_Bit                      0x00000100
#define k_Effect_Fort_Bit                        0x00000200
#define k_Effect_IsUrban_Bit                     0x00000400
#define k_Effect_Slum_Bit                        0x00000800
#define k_Effect_Installation_Bit                0x00001000
#define k_Effect_DeniedToEnemy_Bit               0x00002000
#define k_Effect_BonusFoodExport_Bit             0x00004000
#define k_Effect_BonusProductionExport_Bit       0x00008000
#define k_Effect_BonusGoldExport_Bit             0x00010000
#define k_Effect_FranchiseProduction_Bit         0x00020000
#define k_Effect_CanBeCaptured_Bit               0x00040000
#define k_Effect_CanUpgrade_Bit                  0x00080000
#define k_Effect_Minefield_Bit                   0x00100000
#define k_Effect_TurnsToGrowth_Bit               0x00200000
#define k_Effect_ListeningPost_Bit               0x00400000
#define k_Effect_Endgame_Bit                     0x00800000
#define k_Effect_VisionRange_Bit                 0x01000000
#define k_Effect_RadarRange_Bit                  0x02000000
#define k_Effect_DefenseBonus_Bit                0x04000000
#define k_Effect_GoldHunger_Bit                  0x08000000
#define k_Effect_GoldCost_Bit                    0x10000000
#define k_Effect_NeedsIrrigation_Bit             0x20000000
#define k_Effect_IsIrrigation_Bit                0x40000000
#define k_Effect_NextToCity_Bit                  0x80000000
//
// m_flags1: Effect
#define k_Effect_RiverOnly_Bit                   0x00000001
#define k_Effect_Obstacle_Bit                    0x00000002
#define k_Effect_NextToUrban_Bit                 0x00000004
#define k_Effect_HealRate_Bit                    0x00000008

class TerrainImprovementRecord : public CTPRecord
{
public:
    typedef sint32 (TerrainImprovementRecord::*IntAccessor)() const;
    typedef bool   (TerrainImprovementRecord::*BoolAccessor)() const;
    typedef double (TerrainImprovementRecord::*FloatAccessor)() const ;
    typedef bool   (TerrainImprovementRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (TerrainImprovementRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (TerrainImprovementRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (TerrainImprovementRecord::*FloatArrayAccessor)(sint32 index) const;

    class Effect {
    private:
        uint32            m_flags0;
        uint32            m_flags1;
        sint32          * m_Terrain; // Index into Terrain database
        sint32            m_numTerrain;
        sint32            m_BonusFoodValue;
        sint32            m_BonusProductionValue;
        sint32            m_BonusGoldValue;
        sint32            m_MoveCostValue;
        sint32            m_FreightValue;
        sint32            m_BonusFoodExportValue;
        sint32            m_BonusProductionExportValue;
        sint32            m_BonusGoldExportValue;
        sint32            m_FranchiseProductionValue;
        double            m_MinefieldValue;
        sint32          * m_GrowsToImprovement; // Index into TerrainImprovement database
        sint32            m_numGrowsToImprovement;
        sint32            m_TurnsToGrowthValue;
        sint32            m_VisionRangeValue;
        sint32            m_RadarRangeValue;
        double            m_DefenseBonusValue;
        sint32          * m_CultureOnly; // Index into CityStyle database
        sint32            m_numCultureOnly;
        sint32            m_EnableAdvance; // Index into Advance database
        sint32          * m_ObsoleteAdvance; // Index into Advance database
        sint32            m_numObsoleteAdvance;
        sint32            m_ProductionCost;
        sint32          * m_EnablesGood; // Index into Resource database
        sint32            m_numEnablesGood;
        sint32            m_GoldHungerValue;
        sint32            m_GoldCostValue;
        sint32            m_BonusScience;
        sint32            m_HappyInc;
        sint32            m_ProductionTime;
        sint32            m_TilesetIndex;
        sint32            m_EnergyHunger;
        sint32            m_ProducesEnergy;
        sint32          * m_IsWonder; // Index into Wonder database
        sint32            m_numIsWonder;
        double            m_HealRateValue;

    public:
        Effect();
        Effect(CivArchive & archive){ Serialize(archive); };
        ~Effect();
        Effect const & operator = (Effect const & rval);
        bool operator == (Effect const & rval) {
          if (m_Terrain != rval.m_Terrain)
             return false;
          if (m_GrowsToImprovement != rval.m_GrowsToImprovement)
             return false;
          if (m_CultureOnly != rval.m_CultureOnly)
             return false;
          if (m_EnableAdvance != rval.m_EnableAdvance)
             return false;
          if (m_ObsoleteAdvance != rval.m_ObsoleteAdvance)
             return false;
          if (m_EnablesGood != rval.m_EnablesGood)
             return false;
          if (m_IsWonder != rval.m_IsWonder)
             return false;
          return true;
        }

        void Serialize(CivArchive &archive);
        sint32 Parse(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, Effect **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, Effect *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();

        sint32 GetTerrainIndex(sint32 index) const;
        const TerrainRecord * GetTerrain(sint32 index) const;
        sint32 GetNumTerrain() const { return m_numTerrain;}
        bool HasBonusFood() const { return (m_flags0 & k_Effect_BonusFood_Bit) != 0; }
        bool GetBonusFood(sint32 & value) const
        {
            if (m_flags0 & k_Effect_BonusFood_Bit)
            {
                value = m_BonusFoodValue;
            }
            return (m_flags0 & k_Effect_BonusFood_Bit) != 0;
        }
        bool HasBonusProduction() const { return (m_flags0 & k_Effect_BonusProduction_Bit) != 0; }
        bool GetBonusProduction(sint32 & value) const
        {
            if (m_flags0 & k_Effect_BonusProduction_Bit)
            {
                value = m_BonusProductionValue;
            }
            return (m_flags0 & k_Effect_BonusProduction_Bit) != 0;
        }
        bool HasBonusGold() const { return (m_flags0 & k_Effect_BonusGold_Bit) != 0; }
        bool GetBonusGold(sint32 & value) const
        {
            if (m_flags0 & k_Effect_BonusGold_Bit)
            {
                value = m_BonusGoldValue;
            }
            return (m_flags0 & k_Effect_BonusGold_Bit) != 0;
        }
        bool HasMoveCost() const { return (m_flags0 & k_Effect_MoveCost_Bit) != 0; }
        bool GetMoveCost(sint32 & value) const
        {
            if (m_flags0 & k_Effect_MoveCost_Bit)
            {
                value = m_MoveCostValue;
            }
            return (m_flags0 & k_Effect_MoveCost_Bit) != 0;
        }
        bool HasFreight() const { return (m_flags0 & k_Effect_Freight_Bit) != 0; }
        bool GetFreight(sint32 & value) const
        {
            if (m_flags0 & k_Effect_Freight_Bit)
            {
                value = m_FreightValue;
            }
            return (m_flags0 & k_Effect_Freight_Bit) != 0;
        }
        bool GetRadar() const { return (m_flags0 & k_Effect_Radar_Bit) != 0; }
        bool GetNeedsWorker() const { return (m_flags0 & k_Effect_NeedsWorker_Bit) != 0; }
        bool GetAirport() const { return (m_flags0 & k_Effect_Airport_Bit) != 0; }
        bool GetColony() const { return (m_flags0 & k_Effect_Colony_Bit) != 0; }
        bool GetFort() const { return (m_flags0 & k_Effect_Fort_Bit) != 0; }
        bool GetIsUrban() const { return (m_flags0 & k_Effect_IsUrban_Bit) != 0; }
        bool GetSlum() const { return (m_flags0 & k_Effect_Slum_Bit) != 0; }
        bool GetInstallation() const { return (m_flags0 & k_Effect_Installation_Bit) != 0; }
        bool GetDeniedToEnemy() const { return (m_flags0 & k_Effect_DeniedToEnemy_Bit) != 0; }
        bool HasBonusFoodExport() const { return (m_flags0 & k_Effect_BonusFoodExport_Bit) != 0; }
        bool GetBonusFoodExport(sint32 & value) const
        {
            if (m_flags0 & k_Effect_BonusFoodExport_Bit)
            {
                value = m_BonusFoodExportValue;
            }
            return (m_flags0 & k_Effect_BonusFoodExport_Bit) != 0;
        }
        bool HasBonusProductionExport() const { return (m_flags0 & k_Effect_BonusProductionExport_Bit) != 0; }
        bool GetBonusProductionExport(sint32 & value) const
        {
            if (m_flags0 & k_Effect_BonusProductionExport_Bit)
            {
                value = m_BonusProductionExportValue;
            }
            return (m_flags0 & k_Effect_BonusProductionExport_Bit) != 0;
        }
        bool HasBonusGoldExport() const { return (m_flags0 & k_Effect_BonusGoldExport_Bit) != 0; }
        bool GetBonusGoldExport(sint32 & value) const
        {
            if (m_flags0 & k_Effect_BonusGoldExport_Bit)
            {
                value = m_BonusGoldExportValue;
            }
            return (m_flags0 & k_Effect_BonusGoldExport_Bit) != 0;
        }
        bool HasFranchiseProduction() const { return (m_flags0 & k_Effect_FranchiseProduction_Bit) != 0; }
        bool GetFranchiseProduction(sint32 & value) const
        {
            if (m_flags0 & k_Effect_FranchiseProduction_Bit)
            {
                value = m_FranchiseProductionValue;
            }
            return (m_flags0 & k_Effect_FranchiseProduction_Bit) != 0;
        }
        bool GetCanBeCaptured() const { return (m_flags0 & k_Effect_CanBeCaptured_Bit) != 0; }
        bool GetCanUpgrade() const { return (m_flags0 & k_Effect_CanUpgrade_Bit) != 0; }
        bool HasMinefield() const { return (m_flags0 & k_Effect_Minefield_Bit) != 0; }
        bool GetMinefield(double & value) const
        {
            if (m_flags0 & k_Effect_Minefield_Bit)
            {
                value = m_MinefieldValue;
            }
            return (m_flags0 & k_Effect_Minefield_Bit) != 0;
        }
        sint32 GetGrowsToImprovementIndex(sint32 index) const;
        const TerrainImprovementRecord * GetGrowsToImprovement(sint32 index) const;
        sint32 GetNumGrowsToImprovement() const { return m_numGrowsToImprovement;}
        bool HasTurnsToGrowth() const { return (m_flags0 & k_Effect_TurnsToGrowth_Bit) != 0; }
        bool GetTurnsToGrowth(sint32 & value) const
        {
            if (m_flags0 & k_Effect_TurnsToGrowth_Bit)
            {
                value = m_TurnsToGrowthValue;
            }
            return (m_flags0 & k_Effect_TurnsToGrowth_Bit) != 0;
        }
        bool GetListeningPost() const { return (m_flags0 & k_Effect_ListeningPost_Bit) != 0; }
        bool GetEndgame() const { return (m_flags0 & k_Effect_Endgame_Bit) != 0; }
        bool HasVisionRange() const { return (m_flags0 & k_Effect_VisionRange_Bit) != 0; }
        bool GetVisionRange(sint32 & value) const
        {
            if (m_flags0 & k_Effect_VisionRange_Bit)
            {
                value = m_VisionRangeValue;
            }
            return (m_flags0 & k_Effect_VisionRange_Bit) != 0;
        }
        bool HasRadarRange() const { return (m_flags0 & k_Effect_RadarRange_Bit) != 0; }
        bool GetRadarRange(sint32 & value) const
        {
            if (m_flags0 & k_Effect_RadarRange_Bit)
            {
                value = m_RadarRangeValue;
            }
            return (m_flags0 & k_Effect_RadarRange_Bit) != 0;
        }
        bool HasDefenseBonus() const { return (m_flags0 & k_Effect_DefenseBonus_Bit) != 0; }
        bool GetDefenseBonus(double & value) const
        {
            if (m_flags0 & k_Effect_DefenseBonus_Bit)
            {
                value = m_DefenseBonusValue;
            }
            return (m_flags0 & k_Effect_DefenseBonus_Bit) != 0;
        }
        sint32 GetCultureOnlyIndex(sint32 index) const;
        const CityStyleRecord * GetCultureOnly(sint32 index) const;
        sint32 GetNumCultureOnly() const { return m_numCultureOnly;}
        sint32           GetEnableAdvanceIndex() const { return m_EnableAdvance; }
        AdvanceRecord const * GetEnableAdvance() const;
        sint32 GetObsoleteAdvanceIndex(sint32 index) const;
        const AdvanceRecord * GetObsoleteAdvance(sint32 index) const;
        sint32 GetNumObsoleteAdvance() const { return m_numObsoleteAdvance;}
        sint32 GetProductionCost() const { return m_ProductionCost; }
        sint32 GetEnablesGoodIndex(sint32 index) const;
        const ResourceRecord * GetEnablesGood(sint32 index) const;
        sint32 GetNumEnablesGood() const { return m_numEnablesGood;}
        bool HasGoldHunger() const { return (m_flags0 & k_Effect_GoldHunger_Bit) != 0; }
        bool GetGoldHunger(sint32 & value) const
        {
            if (m_flags0 & k_Effect_GoldHunger_Bit)
            {
                value = m_GoldHungerValue;
            }
            return (m_flags0 & k_Effect_GoldHunger_Bit) != 0;
        }
        bool HasGoldCost() const { return (m_flags0 & k_Effect_GoldCost_Bit) != 0; }
        bool GetGoldCost(sint32 & value) const
        {
            if (m_flags0 & k_Effect_GoldCost_Bit)
            {
                value = m_GoldCostValue;
            }
            return (m_flags0 & k_Effect_GoldCost_Bit) != 0;
        }
        sint32 GetBonusScience() const { return m_BonusScience; }
        sint32 GetHappyInc() const { return m_HappyInc; }
        sint32 GetProductionTime() const { return m_ProductionTime; }
        sint32 GetTilesetIndex() const { return m_TilesetIndex; }
        sint32 GetEnergyHunger() const { return m_EnergyHunger; }
        sint32 GetProducesEnergy() const { return m_ProducesEnergy; }
        sint32 GetIsWonderIndex(sint32 index) const;
        const WonderRecord * GetIsWonder(sint32 index) const;
        sint32 GetNumIsWonder() const { return m_numIsWonder;}
        bool GetNeedsIrrigation() const { return (m_flags0 & k_Effect_NeedsIrrigation_Bit) != 0; }
        bool GetIsIrrigation() const { return (m_flags0 & k_Effect_IsIrrigation_Bit) != 0; }
        bool GetNextToCity() const { return (m_flags0 & k_Effect_NextToCity_Bit) != 0; }
        bool GetRiverOnly() const { return (m_flags1 & k_Effect_RiverOnly_Bit) != 0; }
        bool GetObstacle() const { return (m_flags1 & k_Effect_Obstacle_Bit) != 0; }
        bool GetNextToUrban() const { return (m_flags1 & k_Effect_NextToUrban_Bit) != 0; }
        bool HasHealRate() const { return (m_flags1 & k_Effect_HealRate_Bit) != 0; }
        bool GetHealRate(double & value) const
        {
            if (m_flags1 & k_Effect_HealRate_Bit)
            {
                value = m_HealRateValue;
            }
            return (m_flags1 & k_Effect_HealRate_Bit) != 0;
        }

    }; /* class Effect */

private:
    uint32 m_flags0;
    uint32            m_Class;
    uint32            m_Excludes;
    uint32            m_CanSee;
    sint32            m_Sound; // Index into Sound database
    sint32          * m_CantBuildOn; // Index into Terrain database
    sint32            m_numCantBuildOn;
    sint32          * m_GovernmentsModified; // Index into Government database
    sint32            m_numGovernmentsModified;
    sint32          * m_CultureOnly; // Index into CityStyle database
    sint32            m_numCultureOnly;
    sint32          * m_GovernmentType; // Index into Government database
    sint32            m_numGovernmentType;
    sint32          * m_IsRestrictedToGood; // Index into Resource database
    sint32            m_numIsRestrictedToGood;
    sint32          * m_EnablesGood; // Index into Resource database
    sint32            m_numEnablesGood;
    Effect            m_EffectValue;
    Effect          * m_TerrainEffect;
    sint32            m_numTerrainEffect;
    sint32          * m_PrerequisiteTileImp; // Index into TerrainImprovement database
    sint32            m_numPrerequisiteTileImp;
    sint32            m_Icon; // Index into Icon database
    sint32            m_Tooltip;
    sint32            m_Statusbar;
    sint32            m_Level;
    sint32          * m_ConstructionTiles;
    sint32            m_numConstructionTiles;
    sint32            m_TerraformTerrainValue; // Index into Terrain database
    sint32            m_ColumnValue;
    sint32            m_IntBorderRadiusValue;
    sint32            m_SquaredBorderRadiusValue;
    sint32            m_MoveBonusValue;
    sint32            m_DisplayLevel;
    sint32            m_EnergyHunger;
    sint32            m_ProducesEnergy;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    TerrainImprovementRecord() { Init(); };
    TerrainImprovementRecord(CivArchive &archive) { Serialize(archive); };
    TerrainImprovementRecord(TerrainImprovementRecord const & rval) { Init(); *this = rval; }
    ~TerrainImprovementRecord();
    TerrainImprovementRecord const & operator = (TerrainImprovementRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const TerrainImprovementRecord & rval);
    sint32 ParseClassBit(DBLexer *lex);
    sint32 ParseExcludesBit(DBLexer *lex);
    sint32 ParseCanSeeBit(DBLexer *lex);

    uint32           GetClass() const { return m_Class; }
    bool             GetClassFarm() const { return (m_Class & k_TerrainImprovement_Class_Farm_Bit) != 0; }
    bool             GetClassRoad() const { return (m_Class & k_TerrainImprovement_Class_Road_Bit) != 0; }
    bool             GetClassMine() const { return (m_Class & k_TerrainImprovement_Class_Mine_Bit) != 0; }
    bool             GetClassATM() const { return (m_Class & k_TerrainImprovement_Class_ATM_Bit) != 0; }
    bool             GetClassOceanFarm() const { return (m_Class & k_TerrainImprovement_Class_OceanFarm_Bit) != 0; }
    bool             GetClassOceanMine() const { return (m_Class & k_TerrainImprovement_Class_OceanMine_Bit) != 0; }
    bool             GetClassOceanATM() const { return (m_Class & k_TerrainImprovement_Class_OceanATM_Bit) != 0; }
    bool             GetClassOceanRoad() const { return (m_Class & k_TerrainImprovement_Class_OceanRoad_Bit) != 0; }
    bool             GetClassStructure1() const { return (m_Class & k_TerrainImprovement_Class_Structure1_Bit) != 0; }
    bool             GetClassStructure2() const { return (m_Class & k_TerrainImprovement_Class_Structure2_Bit) != 0; }
    bool             GetClassLandDetector() const { return (m_Class & k_TerrainImprovement_Class_LandDetector_Bit) != 0; }
    bool             GetClassOceanDetector() const { return (m_Class & k_TerrainImprovement_Class_OceanDetector_Bit) != 0; }
    bool             GetClassTerraform() const { return (m_Class & k_TerrainImprovement_Class_Terraform_Bit) != 0; }
    bool             GetClassOceanform() const { return (m_Class & k_TerrainImprovement_Class_Oceanform_Bit) != 0; }
    bool             GetClassWonder() const { return (m_Class & k_TerrainImprovement_Class_Wonder_Bit) != 0; }
    bool             GetClassUrban() const { return (m_Class & k_TerrainImprovement_Class_Urban_Bit) != 0; }
    uint32           GetExcludes() const { return m_Excludes; }
    bool             GetExcludesFarm() const { return (m_Excludes & k_TerrainImprovement_Excludes_Farm_Bit) != 0; }
    bool             GetExcludesRoad() const { return (m_Excludes & k_TerrainImprovement_Excludes_Road_Bit) != 0; }
    bool             GetExcludesMine() const { return (m_Excludes & k_TerrainImprovement_Excludes_Mine_Bit) != 0; }
    bool             GetExcludesATM() const { return (m_Excludes & k_TerrainImprovement_Excludes_ATM_Bit) != 0; }
    bool             GetExcludesOceanFarm() const { return (m_Excludes & k_TerrainImprovement_Excludes_OceanFarm_Bit) != 0; }
    bool             GetExcludesOceanMine() const { return (m_Excludes & k_TerrainImprovement_Excludes_OceanMine_Bit) != 0; }
    bool             GetExcludesOceanATM() const { return (m_Excludes & k_TerrainImprovement_Excludes_OceanATM_Bit) != 0; }
    bool             GetExcludesOceanRoad() const { return (m_Excludes & k_TerrainImprovement_Excludes_OceanRoad_Bit) != 0; }
    bool             GetExcludesStructure1() const { return (m_Excludes & k_TerrainImprovement_Excludes_Structure1_Bit) != 0; }
    bool             GetExcludesStructure2() const { return (m_Excludes & k_TerrainImprovement_Excludes_Structure2_Bit) != 0; }
    bool             GetExcludesLandDetector() const { return (m_Excludes & k_TerrainImprovement_Excludes_LandDetector_Bit) != 0; }
    bool             GetExcludesOceanDetector() const { return (m_Excludes & k_TerrainImprovement_Excludes_OceanDetector_Bit) != 0; }
    bool             GetExcludesTerraform() const { return (m_Excludes & k_TerrainImprovement_Excludes_Terraform_Bit) != 0; }
    bool             GetExcludesOceanform() const { return (m_Excludes & k_TerrainImprovement_Excludes_Oceanform_Bit) != 0; }
    bool             GetExcludesWonder() const { return (m_Excludes & k_TerrainImprovement_Excludes_Wonder_Bit) != 0; }
    bool             GetExcludesUrban() const { return (m_Excludes & k_TerrainImprovement_Excludes_Urban_Bit) != 0; }
    uint32           GetCanSee() const { return m_CanSee; }
    bool             GetCanSeeStandard() const { return (m_CanSee & k_TerrainImprovement_CanSee_Standard_Bit) != 0; }
    bool             GetCanSeeUnderwater() const { return (m_CanSee & k_TerrainImprovement_CanSee_Underwater_Bit) != 0; }
    bool             GetCanSeeStealth() const { return (m_CanSee & k_TerrainImprovement_CanSee_Stealth_Bit) != 0; }
    bool             GetCanSeeUnusedBit3() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit3_Bit) != 0; }
    bool             GetCanSeeUnusedBit4() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit4_Bit) != 0; }
    bool             GetCanSeeUnusedBit5() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit5_Bit) != 0; }
    bool             GetCanSeeUnusedBit6() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit6_Bit) != 0; }
    bool             GetCanSeeUnusedBit7() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit7_Bit) != 0; }
    bool             GetCanSeeUnusedBit8() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit8_Bit) != 0; }
    bool             GetCanSeeUnusedBit9() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit9_Bit) != 0; }
    bool             GetCanSeeUnusedBit10() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit10_Bit) != 0; }
    bool             GetCanSeeUnusedBit11() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit11_Bit) != 0; }
    bool             GetCanSeeUnusedBit12() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit12_Bit) != 0; }
    bool             GetCanSeeUnusedBit13() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit13_Bit) != 0; }
    bool             GetCanSeeUnusedBit14() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit14_Bit) != 0; }
    bool             GetCanSeeUnusedBit15() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit15_Bit) != 0; }
    sint32           GetSoundIndex() const { return m_Sound; }
    SoundRecord const * GetSound() const;
    sint32 GetCantBuildOnIndex(sint32 index) const;
    const TerrainRecord * GetCantBuildOn(sint32 index) const;
    sint32 GetNumCantBuildOn() const { return m_numCantBuildOn;}
    sint32 GetGovernmentsModifiedIndex(sint32 index) const;
    const GovernmentRecord * GetGovernmentsModified(sint32 index) const;
    sint32 GetNumGovernmentsModified() const { return m_numGovernmentsModified;}
    sint32 GetCultureOnlyIndex(sint32 index) const;
    const CityStyleRecord * GetCultureOnly(sint32 index) const;
    sint32 GetNumCultureOnly() const { return m_numCultureOnly;}
    sint32 GetGovernmentTypeIndex(sint32 index) const;
    const GovernmentRecord * GetGovernmentType(sint32 index) const;
    sint32 GetNumGovernmentType() const { return m_numGovernmentType;}
    sint32 GetIsRestrictedToGoodIndex(sint32 index) const;
    const ResourceRecord * GetIsRestrictedToGood(sint32 index) const;
    sint32 GetNumIsRestrictedToGood() const { return m_numIsRestrictedToGood;}
    sint32 GetEnablesGoodIndex(sint32 index) const;
    const ResourceRecord * GetEnablesGood(sint32 index) const;
    sint32 GetNumEnablesGood() const { return m_numEnablesGood;}
    bool HasEffect() const { return (m_flags0 & k_TerrainImprovement_Effect_Bit) != 0; }
    bool GetEffect(const Effect *&ptr) const
    {
        ptr = (m_flags0 & k_TerrainImprovement_Effect_Bit) ? &m_EffectValue : NULL;
        return (m_flags0 & k_TerrainImprovement_Effect_Bit) != 0;
    }
    const Effect * GetEffectPtr() const
    {
        return (m_flags0 & k_TerrainImprovement_Effect_Bit) ? &m_EffectValue : NULL;
    }
    const Effect * GetTerrainEffect(sint32 index) const;
    sint32 GetNumTerrainEffect() const { return m_numTerrainEffect;}
    bool GetDeniedToEnemy() const { return (m_flags0 & k_TerrainImprovement_DeniedToEnemy_Bit) != 0; }
    bool GetCanExportTileValue() const { return (m_flags0 & k_TerrainImprovement_CanExportTileValue_Bit) != 0; }
    bool GetCanExportGood() const { return (m_flags0 & k_TerrainImprovement_CanExportGood_Bit) != 0; }
    bool GetCanExportTileValueRadius() const { return (m_flags0 & k_TerrainImprovement_CanExportTileValueRadius_Bit) != 0; }
    sint32 GetPrerequisiteTileImpIndex(sint32 index) const;
    const TerrainImprovementRecord * GetPrerequisiteTileImp(sint32 index) const;
    sint32 GetNumPrerequisiteTileImp() const { return m_numPrerequisiteTileImp;}
    bool GetIsCanal() const { return (m_flags0 & k_TerrainImprovement_IsCanal_Bit) != 0; }
    bool GetOnlySpecialBuild() const { return (m_flags0 & k_TerrainImprovement_OnlySpecialBuild_Bit) != 0; }
    sint32           GetIconIndex() const { return m_Icon; }
    IconRecord const * GetIcon() const;
    sint32 GetTooltip() const { return m_Tooltip; }
    sint32 GetStatusbar() const { return m_Statusbar; }
    sint32 GetLevel() const { return m_Level; }
sint32     GetConstructionTiles(sint32 index) const;
    sint32 GetNumConstructionTiles() const { return m_numConstructionTiles;}
    bool HasTerraformTerrain() const { return (m_flags0 & k_TerrainImprovement_TerraformTerrain_Bit) != 0; }
    bool GetTerraformTerrainIndex(sint32 & index) const
    {
        index = (m_flags0 & k_TerrainImprovement_TerraformTerrain_Bit) ? m_TerraformTerrainValue : -1;
        return (m_flags0 & k_TerrainImprovement_TerraformTerrain_Bit) != 0;
    }
    bool GetTerraformTerrain(const TerrainRecord * & rec) const;
    const TerrainRecord * GetTerraformTerrainPtr() const;
    bool HasColumn() const { return (m_flags0 & k_TerrainImprovement_Column_Bit) != 0; }
    bool GetColumn(sint32 & value) const
    {
        if (m_flags0 & k_TerrainImprovement_Column_Bit)
        {
            value = m_ColumnValue;
        }
        return (m_flags0 & k_TerrainImprovement_Column_Bit) != 0;
    }
    bool HasIntBorderRadius() const { return (m_flags0 & k_TerrainImprovement_IntBorderRadius_Bit) != 0; }
    bool GetIntBorderRadius(sint32 & value) const
    {
        if (m_flags0 & k_TerrainImprovement_IntBorderRadius_Bit)
        {
            value = m_IntBorderRadiusValue;
        }
        return (m_flags0 & k_TerrainImprovement_IntBorderRadius_Bit) != 0;
    }
    bool HasSquaredBorderRadius() const { return (m_flags0 & k_TerrainImprovement_SquaredBorderRadius_Bit) != 0; }
    bool GetSquaredBorderRadius(sint32 & value) const
    {
        if (m_flags0 & k_TerrainImprovement_SquaredBorderRadius_Bit)
        {
            value = m_SquaredBorderRadiusValue;
        }
        return (m_flags0 & k_TerrainImprovement_SquaredBorderRadius_Bit) != 0;
    }
    bool HasMoveBonus() const { return (m_flags0 & k_TerrainImprovement_MoveBonus_Bit) != 0; }
    bool GetMoveBonus(sint32 & value) const
    {
        if (m_flags0 & k_TerrainImprovement_MoveBonus_Bit)
        {
            value = m_MoveBonusValue;
        }
        return (m_flags0 & k_TerrainImprovement_MoveBonus_Bit) != 0;
    }
    bool GetColony() const { return (m_flags0 & k_TerrainImprovement_Colony_Bit) != 0; }
    bool GetGLHidden() const { return (m_flags0 & k_TerrainImprovement_GLHidden_Bit) != 0; }
    sint32 GetDisplayLevel() const { return m_DisplayLevel; }
    bool GetCantPillage() const { return (m_flags0 & k_TerrainImprovement_CantPillage_Bit) != 0; }
    bool GetSpawnsBarbarians() const { return (m_flags0 & k_TerrainImprovement_SpawnsBarbarians_Bit) != 0; }
    bool GetCanBuildAlly() const { return (m_flags0 & k_TerrainImprovement_CanBuildAlly_Bit) != 0; }
    bool GetCanBuildWasteland() const { return (m_flags0 & k_TerrainImprovement_CanBuildWasteland_Bit) != 0; }
    bool GetCanUpgrade() const { return (m_flags0 & k_TerrainImprovement_CanUpgrade_Bit) != 0; }
    bool GetIsCityRuin() const { return (m_flags0 & k_TerrainImprovement_IsCityRuin_Bit) != 0; }
    sint32 GetEnergyHunger() const { return m_EnergyHunger; }
    sint32 GetProducesEnergy() const { return m_ProducesEnergy; }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return m_numGovernmentsModified; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return GetGovernmentsModifiedIndex(index); }

}; /* TerrainImprovementRecord */

struct TerrainImprovementRecordAccessorInfo
{
    TerrainImprovementRecord::IntAccessor        m_intAccessor;
    TerrainImprovementRecord::BoolAccessor       m_boolAccessor;
    TerrainImprovementRecord::FloatAccessor      m_floatAccessor;
    TerrainImprovementRecord::BitIntAccessor     m_bitIntAccessor;
    TerrainImprovementRecord::BitFloatAccessor   m_bitFloatAccessor;
    TerrainImprovementRecord::IntArrayAccessor   m_intArrayAccessor;
    TerrainImprovementRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern TerrainImprovementRecordAccessorInfo      g_TerrainImprovementRecord_Accessors[];
extern CTPDatabase<TerrainImprovementRecord> *   g_theTerrainImprovementDB;

extern const char * g_TerrainImprovement_Tokens[];

#endif
