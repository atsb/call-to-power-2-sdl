
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef UNITBUILDLIST_RECORD_H__
#define UNITBUILDLIST_RECORD_H__

class UnitBuildListRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class UnitRecord;

#define k_Num_UnitBuildListRecord_Tokens 1


class UnitBuildListRecord : public CTPRecord
{
public:
    typedef sint32 (UnitBuildListRecord::*IntAccessor)() const;
    typedef bool   (UnitBuildListRecord::*BoolAccessor)() const;
    typedef double (UnitBuildListRecord::*FloatAccessor)() const ;
    typedef bool   (UnitBuildListRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (UnitBuildListRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (UnitBuildListRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (UnitBuildListRecord::*FloatArrayAccessor)(sint32 index) const;

private:
    sint32          * m_Unit; // Index into Unit database
    sint32            m_numUnit;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    UnitBuildListRecord() { Init(); };
    UnitBuildListRecord(CivArchive &archive) { Serialize(archive); };
    UnitBuildListRecord(UnitBuildListRecord const & rval) { Init(); *this = rval; }
    ~UnitBuildListRecord();
    UnitBuildListRecord const & operator = (UnitBuildListRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const UnitBuildListRecord & rval);

    sint32 GetUnitIndex(sint32 index) const;
    const UnitRecord * GetUnit(sint32 index) const;
    sint32 GetNumUnit() const { return m_numUnit;}
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* UnitBuildListRecord */

struct UnitBuildListRecordAccessorInfo
{
    UnitBuildListRecord::IntAccessor        m_intAccessor;
    UnitBuildListRecord::BoolAccessor       m_boolAccessor;
    UnitBuildListRecord::FloatAccessor      m_floatAccessor;
    UnitBuildListRecord::BitIntAccessor     m_bitIntAccessor;
    UnitBuildListRecord::BitFloatAccessor   m_bitFloatAccessor;
    UnitBuildListRecord::IntArrayAccessor   m_intArrayAccessor;
    UnitBuildListRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern UnitBuildListRecordAccessorInfo      g_UnitBuildListRecord_Accessors[];
extern CTPDatabase<UnitBuildListRecord> *   g_theUnitBuildListDB;

extern const char * g_UnitBuildList_Tokens[];

#endif
