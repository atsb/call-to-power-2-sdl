
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef ADVANCE_RECORD_H__
#define ADVANCE_RECORD_H__

class AdvanceRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class AdvanceBranchRecord;
class AgeRecord;
class CityStyleRecord;
class FeatRecord;
class GovernmentRecord;
class IconRecord;
class ResourceRecord;

#define k_Num_AdvanceRecord_Tokens 51

//
// m_flags0: Advance
#define k_Advance_DeepOcean_Bit                  0x00000001
#define k_Advance_Capitalization_Bit             0x00000002
#define k_Advance_Infrastructure_Bit             0x00000004
#define k_Advance_Transform_Bit                  0x00000008
#define k_Advance_RequiresProbeRecovery_Bit      0x00000010
#define k_Advance_Genetic_Bit                    0x00000020
#define k_Advance_PlantNuke_Bit                  0x00000040
#define k_Advance_NoIndex_Bit                    0x00000080
#define k_Advance_Roads_Bit                      0x00000100
#define k_Advance_Railroads_Bit                  0x00000200
#define k_Advance_AlienLife_Bit                  0x00000400
#define k_Advance_MagLev_Bit                     0x00000800
#define k_Advance_Tunnels_Bit                    0x00001000
#define k_Advance_ProductionPercent_Bit          0x00002000
#define k_Advance_FoodPercent_Bit                0x00004000
#define k_Advance_CommercePercent_Bit            0x00008000
#define k_Advance_SciencePercent_Bit             0x00010000
#define k_Advance_GLHidden_Bit                   0x00020000
#define k_Advance_GoodyHutExcluded_Bit           0x00040000
#define k_Advance_PollutionSizeModifier_Bit      0x00080000
#define k_Advance_PollutionProductionModifier_Bit 0x00100000
#define k_Advance_TriggerFeat_Bit                0x00200000
#define k_Advance_IsMassMedia_Bit                0x00400000
#define k_Advance_EnablesGuerrillas_Bit          0x00800000
#define k_Advance_KeyAdvanceAdvice_Bit           0x01000000
#define k_MAX_Prerequisites                  4
#define k_MAX_EitherPrerequisites            4

class AdvanceRecord : public CTPRecord
{
public:
    typedef sint32 (AdvanceRecord::*IntAccessor)() const;
    typedef bool   (AdvanceRecord::*BoolAccessor)() const;
    typedef double (AdvanceRecord::*FloatAccessor)() const ;
    typedef bool   (AdvanceRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (AdvanceRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (AdvanceRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (AdvanceRecord::*FloatArrayAccessor)(sint32 index) const;

private:
    uint32 m_flags0;
    sint32            m_Cost;
    sint32            m_Prerequisites[k_MAX_Prerequisites]; // Index into Advance database
    sint32            m_numPrerequisites;
    sint32          * m_Dependencies; // Index into Advance database
    sint32            m_numDependencies;
    sint32          * m_LeadsTo; // Index into Advance database
    sint32            m_numLeadsTo;
    sint32          * m_ExcludesAdvance; // Index into Advance database
    sint32            m_numExcludesAdvance;
    sint32            m_Icon; // Index into Icon database
    sint32            m_Branch; // Index into AdvanceBranch database
    sint32            m_Age; // Index into Age database
    sint32          * m_CultureOnly; // Index into CityStyle database
    sint32            m_numCultureOnly;
    sint32          * m_GovernmentType; // Index into Government database
    sint32            m_numGovernmentType;
    sint32          * m_NeedsCityGoodAnyCity; // Index into Resource database
    sint32            m_numNeedsCityGoodAnyCity;
    sint32            m_EitherPrerequisites[k_MAX_EitherPrerequisites]; // Index into Advance database
    sint32            m_numEitherPrerequisites;
    sint32            m_BonusHappy;
    sint32            m_BonusGold;
    sint32            m_BonusFood;
    sint32            m_BonusProduction;
    sint32            m_BonusScience;
    double            m_ProductionPercentValue;
    double            m_FoodPercentValue;
    double            m_CommercePercentValue;
    double            m_SciencePercentValue;
    sint32            m_PowerPoints;
    double            m_PollutionSizeModifierValue;
    double            m_PollutionProductionModifierValue;
    sint32            m_TriggerFeatValue; // Index into Feat database
    sint32            m_KeyAdvanceAdviceValue;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    AdvanceRecord() { Init(); };
    AdvanceRecord(CivArchive &archive) { Serialize(archive); };
    AdvanceRecord(AdvanceRecord const & rval) { Init(); *this = rval; }
    ~AdvanceRecord();
    AdvanceRecord const & operator = (AdvanceRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const AdvanceRecord & rval);

    sint32 GetCost() const { return m_Cost; }
    sint32 GetPrerequisitesIndex(sint32 index) const;
    const AdvanceRecord * GetPrerequisites(sint32 index) const;
    sint32 GetNumPrerequisites() const { return m_numPrerequisites;}
    sint32 GetDependenciesIndex(sint32 index) const;
    const AdvanceRecord * GetDependencies(sint32 index) const;
    sint32 GetNumDependencies() const { return m_numDependencies;}
    sint32 GetLeadsToIndex(sint32 index) const;
    const AdvanceRecord * GetLeadsTo(sint32 index) const;
    sint32 GetNumLeadsTo() const { return m_numLeadsTo;}
    sint32 GetExcludesAdvanceIndex(sint32 index) const;
    const AdvanceRecord * GetExcludesAdvance(sint32 index) const;
    sint32 GetNumExcludesAdvance() const { return m_numExcludesAdvance;}
    sint32           GetIconIndex() const { return m_Icon; }
    IconRecord const * GetIcon() const;
    sint32           GetBranchIndex() const { return m_Branch; }
    AdvanceBranchRecord const * GetBranch() const;
    sint32           GetAgeIndex() const { return m_Age; }
    AgeRecord const * GetAge() const;
    sint32 GetCultureOnlyIndex(sint32 index) const;
    const CityStyleRecord * GetCultureOnly(sint32 index) const;
    sint32 GetNumCultureOnly() const { return m_numCultureOnly;}
    sint32 GetGovernmentTypeIndex(sint32 index) const;
    const GovernmentRecord * GetGovernmentType(sint32 index) const;
    sint32 GetNumGovernmentType() const { return m_numGovernmentType;}
    sint32 GetNeedsCityGoodAnyCityIndex(sint32 index) const;
    const ResourceRecord * GetNeedsCityGoodAnyCity(sint32 index) const;
    sint32 GetNumNeedsCityGoodAnyCity() const { return m_numNeedsCityGoodAnyCity;}
    sint32 GetEitherPrerequisitesIndex(sint32 index) const;
    const AdvanceRecord * GetEitherPrerequisites(sint32 index) const;
    sint32 GetNumEitherPrerequisites() const { return m_numEitherPrerequisites;}
    bool GetDeepOcean() const { return (m_flags0 & k_Advance_DeepOcean_Bit) != 0; }
    bool GetCapitalization() const { return (m_flags0 & k_Advance_Capitalization_Bit) != 0; }
    bool GetInfrastructure() const { return (m_flags0 & k_Advance_Infrastructure_Bit) != 0; }
    bool GetTransform() const { return (m_flags0 & k_Advance_Transform_Bit) != 0; }
    bool GetRequiresProbeRecovery() const { return (m_flags0 & k_Advance_RequiresProbeRecovery_Bit) != 0; }
    bool GetGenetic() const { return (m_flags0 & k_Advance_Genetic_Bit) != 0; }
    bool GetPlantNuke() const { return (m_flags0 & k_Advance_PlantNuke_Bit) != 0; }
    bool GetNoIndex() const { return (m_flags0 & k_Advance_NoIndex_Bit) != 0; }
    bool GetRoads() const { return (m_flags0 & k_Advance_Roads_Bit) != 0; }
    bool GetRailroads() const { return (m_flags0 & k_Advance_Railroads_Bit) != 0; }
    bool GetAlienLife() const { return (m_flags0 & k_Advance_AlienLife_Bit) != 0; }
    bool GetMagLev() const { return (m_flags0 & k_Advance_MagLev_Bit) != 0; }
    bool GetTunnels() const { return (m_flags0 & k_Advance_Tunnels_Bit) != 0; }
    sint32 GetBonusHappy() const { return m_BonusHappy; }
    sint32 GetBonusGold() const { return m_BonusGold; }
    sint32 GetBonusFood() const { return m_BonusFood; }
    sint32 GetBonusProduction() const { return m_BonusProduction; }
    sint32 GetBonusScience() const { return m_BonusScience; }
    bool HasProductionPercent() const { return (m_flags0 & k_Advance_ProductionPercent_Bit) != 0; }
    bool GetProductionPercent(double & value) const
    {
        if (m_flags0 & k_Advance_ProductionPercent_Bit)
        {
            value = m_ProductionPercentValue;
        }
        return (m_flags0 & k_Advance_ProductionPercent_Bit) != 0;
    }
    bool HasFoodPercent() const { return (m_flags0 & k_Advance_FoodPercent_Bit) != 0; }
    bool GetFoodPercent(double & value) const
    {
        if (m_flags0 & k_Advance_FoodPercent_Bit)
        {
            value = m_FoodPercentValue;
        }
        return (m_flags0 & k_Advance_FoodPercent_Bit) != 0;
    }
    bool HasCommercePercent() const { return (m_flags0 & k_Advance_CommercePercent_Bit) != 0; }
    bool GetCommercePercent(double & value) const
    {
        if (m_flags0 & k_Advance_CommercePercent_Bit)
        {
            value = m_CommercePercentValue;
        }
        return (m_flags0 & k_Advance_CommercePercent_Bit) != 0;
    }
    bool HasSciencePercent() const { return (m_flags0 & k_Advance_SciencePercent_Bit) != 0; }
    bool GetSciencePercent(double & value) const
    {
        if (m_flags0 & k_Advance_SciencePercent_Bit)
        {
            value = m_SciencePercentValue;
        }
        return (m_flags0 & k_Advance_SciencePercent_Bit) != 0;
    }
    bool GetGLHidden() const { return (m_flags0 & k_Advance_GLHidden_Bit) != 0; }
    bool GetGoodyHutExcluded() const { return (m_flags0 & k_Advance_GoodyHutExcluded_Bit) != 0; }
    sint32 GetPowerPoints() const { return m_PowerPoints; }
    bool HasPollutionSizeModifier() const { return (m_flags0 & k_Advance_PollutionSizeModifier_Bit) != 0; }
    bool GetPollutionSizeModifier(double & value) const
    {
        if (m_flags0 & k_Advance_PollutionSizeModifier_Bit)
        {
            value = m_PollutionSizeModifierValue;
        }
        return (m_flags0 & k_Advance_PollutionSizeModifier_Bit) != 0;
    }
    bool HasPollutionProductionModifier() const { return (m_flags0 & k_Advance_PollutionProductionModifier_Bit) != 0; }
    bool GetPollutionProductionModifier(double & value) const
    {
        if (m_flags0 & k_Advance_PollutionProductionModifier_Bit)
        {
            value = m_PollutionProductionModifierValue;
        }
        return (m_flags0 & k_Advance_PollutionProductionModifier_Bit) != 0;
    }
    bool HasTriggerFeat() const { return (m_flags0 & k_Advance_TriggerFeat_Bit) != 0; }
    bool GetTriggerFeatIndex(sint32 & index) const
    {
        index = (m_flags0 & k_Advance_TriggerFeat_Bit) ? m_TriggerFeatValue : -1;
        return (m_flags0 & k_Advance_TriggerFeat_Bit) != 0;
    }
    bool GetTriggerFeat(const FeatRecord * & rec) const;
    const FeatRecord * GetTriggerFeatPtr() const;
    bool GetIsMassMedia() const { return (m_flags0 & k_Advance_IsMassMedia_Bit) != 0; }
    bool GetEnablesGuerrillas() const { return (m_flags0 & k_Advance_EnablesGuerrillas_Bit) != 0; }
    bool HasKeyAdvanceAdvice() const { return (m_flags0 & k_Advance_KeyAdvanceAdvice_Bit) != 0; }
    bool GetKeyAdvanceAdvice(sint32 & value) const
    {
        if (m_flags0 & k_Advance_KeyAdvanceAdvice_Bit)
        {
            value = m_KeyAdvanceAdviceValue;
        }
        return (m_flags0 & k_Advance_KeyAdvanceAdvice_Bit) != 0;
    }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* AdvanceRecord */

struct AdvanceRecordAccessorInfo
{
    AdvanceRecord::IntAccessor        m_intAccessor;
    AdvanceRecord::BoolAccessor       m_boolAccessor;
    AdvanceRecord::FloatAccessor      m_floatAccessor;
    AdvanceRecord::BitIntAccessor     m_bitIntAccessor;
    AdvanceRecord::BitFloatAccessor   m_bitFloatAccessor;
    AdvanceRecord::IntArrayAccessor   m_intArrayAccessor;
    AdvanceRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern AdvanceRecordAccessorInfo      g_AdvanceRecord_Accessors[];
extern CTPDatabase<AdvanceRecord> *   g_theAdvanceDB;

extern const char * g_Advance_Tokens[];

#endif
