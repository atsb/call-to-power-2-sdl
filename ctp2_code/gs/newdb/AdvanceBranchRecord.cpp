
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#include "c3.h"
#include "AdvanceBranchRecord.h"

#include <algorithm>
#include "BitArray.h"
#include "c3errors.h"
#include "CTPDatabase.h"
#include "DBLexer.h"
#include "DBTokens.h"
#include "StrDB.h"


CTPDatabase<AdvanceBranchRecord> *g_theAdvanceBranchDB = NULL;

void AdvanceBranchRecord::Init()
{
    m_Value = 0;
    m_NameText = NULL;
    //GovMod Specific flag initialization
    m_hasGovernmentsModified = false;
}

void AdvanceBranchRecord::Serialize(CivArchive &archive)
{
    if(archive.IsStoring()) {
        archive << m_index;
        if(m_name >= 0){
            archive << GetIDText();
        }
        else{
            archive << static_cast<MBCHAR*>(NULL);
        }
        archive << m_Value;
        archive << m_NameText;
    } else {
        //GovMod Specific flag initialization
        m_hasGovernmentsModified = false;

        archive >> m_index;
        {
            MBCHAR* tmpStr = NULL;
            archive >> tmpStr;
            g_theStringDB->GetStringID(tmpStr, m_name);
            SetTextName(g_theStringDB->GetNameStr(m_name));
        }
        archive >> m_Value;
        m_NameText = NULL;
        archive >> m_NameText;

    }
}

AdvanceBranchRecord::~AdvanceBranchRecord()
{
    delete m_NameText;
}

AdvanceBranchRecord const & AdvanceBranchRecord::operator = (AdvanceBranchRecord const & rval)
{
    if (this != &rval)
    {
        m_index = rval.m_index;
        m_hasGovernmentsModified = rval.m_hasGovernmentsModified;

        m_Value = rval.m_Value;

        delete [] m_NameText;
        m_NameText = NULL;

        if (rval.m_NameText)
        {
            m_NameText = new char [strlen(rval.m_NameText)+1];
            strcpy(m_NameText, rval.m_NameText);
        }

    }

    return *this;
}

const char *g_AdvanceBranch_Tokens[] =
{
    "Value",
    "NameText",
};

AdvanceBranchRecordAccessorInfo g_AdvanceBranchRecord_Accessors[] =
{
    { &AdvanceBranchRecord::GetValue, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL, NULL, NULL }, /* NameText */
};

#define k_Token_AdvanceBranch_Value              ((k_Token_Custom_Base) + 0)
#define k_Token_AdvanceBranch_NameText           ((k_Token_Custom_Base) + 1)
#define k_Token_AdvanceBranch_Max                ((k_Token_Custom_Base) + 2)


static BitArray s_ParsedTokens(2);
void AdvanceBranchRecord::CheckRequiredFields(DBLexer *lex)
{
    if(!s_ParsedTokens.Bit(k_Token_AdvanceBranch_Value - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field Value missing"));
    }
}

sint32 AdvanceBranchRecord::Parse(DBLexer *lex, sint32 numRecords)
{
    sint32 tok;
    tok = lex->GetToken();
    if(tok == k_Token_Int) {
        tok = lex->GetToken(); // Accept number to make new db compatible with the old database format
    }
    if(tok != k_Token_Name) {
        DBERROR(("Record must start with name"));
        return 0;
    }
    m_NameText = new char[strlen(lex->GetTokenText()) + 1];
    strcpy(m_NameText, lex->GetTokenText());
    if(!lex->GetIntAssignment(m_Value)) {
        DBERROR(("Expected integer"));
        return 0;
    }
    return 1;
}
void AdvanceBranchRecord::ResolveDBReferences()
{
}

void AdvanceBranchRecord::Merge(const AdvanceBranchRecord & rval){
}

