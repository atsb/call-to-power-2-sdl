
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef CONST_RECORD_H__
#define CONST_RECORD_H__

class ConstRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;

#define k_Num_ConstRecord_Tokens 257

#define k_MIN_MapSizeSmall                   3
#define k_MAX_MapSizeSmall                   3
#define k_MIN_MapSizeMedium                  3
#define k_MAX_MapSizeMedium                  3
#define k_MIN_MapSizeLarge                   3
#define k_MAX_MapSizeLarge                   3
#define k_MIN_MapSizeGigantic                3
#define k_MAX_MapSizeGigantic                3

class ConstRecord : public CTPRecord
{
public:
    typedef sint32 (ConstRecord::*IntAccessor)() const;
    typedef bool   (ConstRecord::*BoolAccessor)() const;
    typedef double (ConstRecord::*FloatAccessor)() const ;
    typedef bool   (ConstRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (ConstRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (ConstRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (ConstRecord::*FloatArrayAccessor)(sint32 index) const;

private:
    sint32            m_PercentLand;
    sint32            m_PercentContinent;
    sint32            m_PercentHomogenious;
    sint32            m_MeridianA;
    sint32            m_MeridianB;
    sint32            m_MeridianC;
    sint32            m_MeridianD;
    sint32            m_MeridianE;
    sint32            m_MeridianF;
    sint32            m_HLevelA;
    sint32            m_HLevelB;
    sint32            m_HLevelC;
    sint32            m_HLevelD;
    sint32            m_ForestWet;
    sint32            m_GrassWet;
    sint32            m_PlainsWet;
    sint32            m_DesertWet;
    sint32            m_ForestDry;
    sint32            m_GrassDry;
    sint32            m_PlainsDry;
    sint32            m_DesertDry;
    sint32            m_WhiteWarm;
    sint32            m_BrownWarm;
    sint32            m_TemperatureRangeAdjustWarm;
    sint32            m_WhiteCold;
    sint32            m_BrownCold;
    sint32            m_TemperatureRangeAdjustCold;
    sint32            m_RichnessFewGoods;
    sint32            m_RiverCellWidthFewGoods;
    sint32            m_RiverCellHeightFewGoods;
    sint32            m_RichnessManyGoods;
    sint32            m_RiverCellWidthManyGoods;
    sint32            m_RiverCellHeightManyGoods;
    sint32            m_PercentMountain;
    sint32            m_MountainCell;
    sint32            m_PercentHills;
    sint32            m_MountainSpread;
    sint32            m_MountainLength;
    sint32            m_GlacierExtend;
    sint32            m_PercentVolcano;
    sint32            m_PercentTrench;
    sint32            m_PercentForest;
    sint32            m_PercentGras;
    sint32            m_PercentPlains;
    sint32            m_PercentDesert;
    sint32            m_PercentWhite;
    sint32            m_PercentBrown;
    sint32            m_TemperatureRangeAdjust;
    sint32            m_NiceRadius;
    sint32            m_PercentRiver;
    sint32            m_RiverLength;
    sint32            m_RiverCellWidth;
    sint32            m_RiverCellHeight;
    sint32            m_Richness;
    sint32            m_ChanceLostAtSea;
    sint32            m_VeteranCoef;
    sint32            m_RevolutionLevel;
    double            m_DiscoveriesPollutionSizeModifier;
    double            m_DiscoveriesPollutionProductionModifier;
    sint32            m_AveragePollutionTurns;
    sint32            m_PopulationProducesPollutionThreshold;
    sint32            m_ProductionProducesPollutionThreshold;
    double            m_MaxEmpireDistCost;
    double            m_HappinessLaunchCost;
    double            m_UnitWorkday;
    double            m_BaseWorkday;
    double            m_UnitWages;
    double            m_BaseWages;
    double            m_UnitRations;
    double            m_BaseRations;
    sint32            m_ChangeCurrentlyBuildingItemPenalty;
    sint32            m_TariffReduction;
    sint32            m_RevoltInfluenceDistance;
    sint32            m_PactCaptureCityExpires;
    sint32            m_RewardCaptureCityExpires;
    sint32            m_CeaseFireExpires;
    sint32            m_ShortCeaseFireExpires;
    sint32            m_EndOfGameYearEarlyWarning;
    sint32            m_EndOfGameYear;
    sint32            m_CaptureCityForGoldMultiplyer;
    sint32            m_PactEndPollutionExpires;
    sint32            m_LeaveOurLandsExpires;
    sint32            m_ReducePollutionExpires;
    sint32            m_DestroyEnemyForRewardExpires;
    sint32            m_PatienceLostPerRequest;
    sint32            m_PatienceRegainedPerRound;
    sint32            m_RegainPatienceProbability;
    sint32            m_PatienceLostThreshold;
    sint32            m_AIGoalTimeSlice;
    sint32            m_AIMaxTimeSlice;
    sint32            m_AITotalTimeSlice;
    double            m_EntrenchmentBonus;
    sint32            m_ParadropDistance;
    sint32            m_ParadropSuccessPercent;
    double            m_EliteSpyBonus;
    double            m_CitySecondAttemptSpyBonus;
    sint32            m_AssasinationHappinessEffect;
    sint32            m_AssasinationHappinessEffectTimer;
    sint32            m_SpiedUponWarinessTimer;
    sint32            m_MaxPartyCost;
    double            m_MaxPartyChance;
    sint32            m_GossipMapRadius;
    double            m_HearGossipChance;
    double            m_FranchiseEffect;
    sint32            m_TurnsFranchised;
    sint32            m_TurnsToSueFranchise;
    double            m_SlaverEliteChance;
    double            m_EliteSlaverBonus;
    double            m_AbolitionistEliteChance;
    double            m_EliteAbolitionistBonus;
    double            m_WatchfulCitySuccessModifier;
    double            m_WatchfulCityDeathModifier;
    sint32            m_WatchfulCityTurns;
    sint32            m_BioInfectionTurns;
    sint32            m_NanoInfectionTurns;
    double            m_BioInfectionSpreadChance;
    double            m_NanoInfectionSpreadChance;
    double            m_PlagueKillPercentage;
    double            m_EliteTerroristBonus;
    double            m_TerroistEliteChance;
    double            m_NukePopulationPercentage;
    double            m_SpecialActionMoveCost;
    double            m_ClericConversionFactor;
    double            m_TelevangelistConversionFactor;
    double            m_ReformationChance;
    double            m_ReformationDeathChance;
    sint32            m_ReformationHappinessTime;
    sint32            m_ReformationHappinessAmount;
    sint32            m_UnconvertedIndulgenceGold;
    sint32            m_UnconvertedIndulgenceHappiness;
    sint32            m_ConvertedIndulgenceGold;
    sint32            m_ConvertedIndulgenceHappiness;
    sint32            m_OtherFaithIndulgenceGold;
    sint32            m_OtherFaithIndulgenceHappiness;
    sint32            m_SoothsayHappyAmount;
    sint32            m_RuinsBoxWidth;
    sint32            m_RuinsBoxHeight;
    double            m_RuinsChancePerBox;
    sint32            m_MaxRuinsGold;
    sint32            m_MaxRuinsAdvance;
    sint32            m_MaxRuinsUnit;
    sint32            m_UnitRushModifier;
    sint32            m_BuildingRushModifier;
    sint32            m_WonderRushModifier;
    double            m_BuildingProductionToValueModifier;
    sint32            m_MonopolyThreshold;
    sint32            m_PopulationPollutionWarningThreshold;
    sint32            m_IndustrialPollutionWarningThreshold;
    sint32            m_VeryHappyThreshold;
    sint32            m_CityGrowthCoefficient;
    sint32            m_RiotLevel;
    sint32            m_PowerPointsToMaterials;
    sint32            m_MaxAirliftStackSize;
    sint32            m_GoldFromPiracy;
    sint32            m_NoPiracyExpires;
    sint32            m_SpaceLaunchCost;
    sint32            m_SpaceLandCost;
    sint32            m_WormholeOrbitHeightPercentage;
    sint32            m_WormholeSpeed;
    sint32            m_WormholeReturnTime;
    sint32            m_WormholeVisibleToAllTurns;
    sint32            m_MaxGovernmentChangeTurns;
    sint32            m_PollutionForcesAnarchy;
    double            m_FoodToPollutionCoef;
    sint32            m_EmancipationUnhappinessTurns;
    sint32            m_EmancipationUnhappinessAmount;
    double            m_CaptureCityAdvanceChance;
    double            m_CityHealRate;
    double            m_NormalHealRate;
    sint32            m_LocalPollutionLevel;
    double            m_LocalPollutionChance;
    double            m_AssaultDestroyBuildingChance;
    double            m_BombardDestroyBuildingChance;
    sint32            m_AdvanceChoicesMin;
    sint32            m_AdvanceChoicesMax;
    sint32            m_AttackConverterUnhappinessTurns;
    double            m_AttackConverterUnhappinessAmount;
    double            m_MinStartDistanceCoefficient;
    double            m_MaxStartDistanceCoefficient;
    sint32            m_MaxSameTiles;
    double            m_CombatVeteranChance;
    sint32            m_StopTradeRounds;
    sint32            m_LeaveOurLandsRounds;
    sint32            m_ReducePollutionRounds;
    sint32            m_CaptureCityRounds;
    sint32            m_EndPollutionRounds;
    sint32            m_AttackEnemyRounds;
    sint32            m_MinContinentStartSize;
    double            m_BombardKillPopChance;
    double            m_AssaultKillPopChance;
    double            m_CaptureKillPopChance;
    sint32            m_ScaledPopAncient;
    sint32            m_ScaledPopRenaissance;
    sint32            m_ScaledPopModern;
    sint32            m_ScaledPopGenetic;
    sint32            m_ScaledPopDiamond;
    sint32            m_PiracyKillsTraderChance;
    sint32            m_UprisingChancePerUnguardedSlave;
    sint32            m_MaxDisbandSize;
    sint32            m_MaxRequestsPerPlayerPerTurn;
    sint32            m_SlavesPerMilitaryUnit;
    sint32            m_MinAbsoluteStartDistance;
    sint32            m_MapSizeSmall[k_MAX_MapSizeSmall];
    sint32            m_numMapSizeSmall;
    sint32            m_MapSizeMedium[k_MAX_MapSizeMedium];
    sint32            m_numMapSizeMedium;
    sint32            m_MapSizeLarge[k_MAX_MapSizeLarge];
    sint32            m_numMapSizeLarge;
    sint32            m_MapSizeGigantic[k_MAX_MapSizeGigantic];
    sint32            m_numMapSizeGigantic;
    sint32            m_RailLaunchPollution;
    sint32            m_SpaceFuelCost;
    sint32            m_NonSpaceFuelCost;
    sint32            m_StarvationWarningFudgeFactor;
    sint32            m_MaintenanceWarningFudgeFactor;
    sint32            m_SupportWarningFudgeFactor;
    double            m_RelativeAIProductionCheatCoef;
    double            m_RelativeAIScienceCheatCoef;
    sint32            m_NukeKillsTiles;
    double            m_InciteRevolutionGoldCoefficient;
    double            m_InciteRevolutionCapitolPenalty;
    double            m_InciteUprisingGoldCoefficient;
    double            m_InciteUprisingCapitolPenalty;
    sint32            m_BioInfectionUnhappiness;
    sint32            m_MinEcoPactViolationLevel;
    double            m_NanoInfectionTerroristDeathChance;
    double            m_BioInfectionTerroristDeathChance;
    double            m_FloodChangesCoastToWaterChance;
    sint32            m_AICheatEcoPactMin;
    sint32            m_AICheatEcoPactMax;
    sint32            m_MaxAbsoluteGrowthRate;
    double            m_TradeDistanceCoefficient;
    sint32            m_MinLikeTilesForGood;
    double            m_MinGoodValue;
    double            m_MaxGoodValue;
    double            m_PiracyWasteCoefficient;
    sint32            m_BorderIntRadius;
    sint32            m_BorderSquaredRadius;
    double            m_BioInfectionProductionCoef;
    double            m_NanoBuildingKillPercentage;
    sint32            m_BaseStarvationProtection;
    double            m_CaravanCoef;
    double            m_DomesticTradeReduction;
    double            m_TradePactCoef;
    sint32            m_PollutionCausedByNuke;
    sint32            m_MaxMatchListCycles;
    sint32            m_MinTurnsBetweenRevolts;
    sint32            m_MaxCityWonders;
    sint32            m_MaxCityBuildings;
    sint32            m_CapturedCityKillPop;
    double            m_CombatEliteChance;
    double            m_CombatLeaderChance;
    double            m_CityOnTradeRouteCoeff;
    sint32            m_CityExpansionDenominator;
    sint32            m_TurnsAcceptedForOnePop;
    sint32            m_UseBaseMoveCostsForRoads;
    double            m_RoadAlreadyThereCostsCoefficient;
    sint32            m_BuildRoadsToClosestCities;
    double            m_BaseRoadPriorityVsThreatRank;
    sint32            m_CosiderNumCitiesForSlaves;
    double            m_SmallCityImproveCoeff;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    ConstRecord() { Init(); };
    ConstRecord(CivArchive &archive) { Serialize(archive); };
    ConstRecord(ConstRecord const & rval) { Init(); *this = rval; }
    ~ConstRecord();
    ConstRecord const & operator = (ConstRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const ConstRecord & rval);

    sint32 GetPercentLand() const { return m_PercentLand; }
    sint32 GetPercentContinent() const { return m_PercentContinent; }
    sint32 GetPercentHomogenious() const { return m_PercentHomogenious; }
    sint32 GetMeridianA() const { return m_MeridianA; }
    sint32 GetMeridianB() const { return m_MeridianB; }
    sint32 GetMeridianC() const { return m_MeridianC; }
    sint32 GetMeridianD() const { return m_MeridianD; }
    sint32 GetMeridianE() const { return m_MeridianE; }
    sint32 GetMeridianF() const { return m_MeridianF; }
    sint32 GetHLevelA() const { return m_HLevelA; }
    sint32 GetHLevelB() const { return m_HLevelB; }
    sint32 GetHLevelC() const { return m_HLevelC; }
    sint32 GetHLevelD() const { return m_HLevelD; }
    sint32 GetForestWet() const { return m_ForestWet; }
    sint32 GetGrassWet() const { return m_GrassWet; }
    sint32 GetPlainsWet() const { return m_PlainsWet; }
    sint32 GetDesertWet() const { return m_DesertWet; }
    sint32 GetForestDry() const { return m_ForestDry; }
    sint32 GetGrassDry() const { return m_GrassDry; }
    sint32 GetPlainsDry() const { return m_PlainsDry; }
    sint32 GetDesertDry() const { return m_DesertDry; }
    sint32 GetWhiteWarm() const { return m_WhiteWarm; }
    sint32 GetBrownWarm() const { return m_BrownWarm; }
    sint32 GetTemperatureRangeAdjustWarm() const { return m_TemperatureRangeAdjustWarm; }
    sint32 GetWhiteCold() const { return m_WhiteCold; }
    sint32 GetBrownCold() const { return m_BrownCold; }
    sint32 GetTemperatureRangeAdjustCold() const { return m_TemperatureRangeAdjustCold; }
    sint32 GetRichnessFewGoods() const { return m_RichnessFewGoods; }
    sint32 GetRiverCellWidthFewGoods() const { return m_RiverCellWidthFewGoods; }
    sint32 GetRiverCellHeightFewGoods() const { return m_RiverCellHeightFewGoods; }
    sint32 GetRichnessManyGoods() const { return m_RichnessManyGoods; }
    sint32 GetRiverCellWidthManyGoods() const { return m_RiverCellWidthManyGoods; }
    sint32 GetRiverCellHeightManyGoods() const { return m_RiverCellHeightManyGoods; }
    sint32 GetPercentMountain() const { return m_PercentMountain; }
    sint32 GetMountainCell() const { return m_MountainCell; }
    sint32 GetPercentHills() const { return m_PercentHills; }
    sint32 GetMountainSpread() const { return m_MountainSpread; }
    sint32 GetMountainLength() const { return m_MountainLength; }
    sint32 GetGlacierExtend() const { return m_GlacierExtend; }
    sint32 GetPercentVolcano() const { return m_PercentVolcano; }
    sint32 GetPercentTrench() const { return m_PercentTrench; }
    sint32 GetPercentForest() const { return m_PercentForest; }
    sint32 GetPercentGras() const { return m_PercentGras; }
    sint32 GetPercentPlains() const { return m_PercentPlains; }
    sint32 GetPercentDesert() const { return m_PercentDesert; }
    sint32 GetPercentWhite() const { return m_PercentWhite; }
    sint32 GetPercentBrown() const { return m_PercentBrown; }
    sint32 GetTemperatureRangeAdjust() const { return m_TemperatureRangeAdjust; }
    sint32 GetNiceRadius() const { return m_NiceRadius; }
    sint32 GetPercentRiver() const { return m_PercentRiver; }
    sint32 GetRiverLength() const { return m_RiverLength; }
    sint32 GetRiverCellWidth() const { return m_RiverCellWidth; }
    sint32 GetRiverCellHeight() const { return m_RiverCellHeight; }
    sint32 GetRichness() const { return m_Richness; }
    sint32 GetChanceLostAtSea() const { return m_ChanceLostAtSea; }
    sint32 GetVeteranCoef() const { return m_VeteranCoef; }
    sint32 GetRevolutionLevel() const { return m_RevolutionLevel; }
    double GetDiscoveriesPollutionSizeModifier() const { return m_DiscoveriesPollutionSizeModifier; }
    double GetDiscoveriesPollutionProductionModifier() const { return m_DiscoveriesPollutionProductionModifier; }
    sint32 GetAveragePollutionTurns() const { return m_AveragePollutionTurns; }
    sint32 GetPopulationProducesPollutionThreshold() const { return m_PopulationProducesPollutionThreshold; }
    sint32 GetProductionProducesPollutionThreshold() const { return m_ProductionProducesPollutionThreshold; }
    double GetMaxEmpireDistCost() const { return m_MaxEmpireDistCost; }
    double GetHappinessLaunchCost() const { return m_HappinessLaunchCost; }
    double GetUnitWorkday() const { return m_UnitWorkday; }
    double GetBaseWorkday() const { return m_BaseWorkday; }
    double GetUnitWages() const { return m_UnitWages; }
    double GetBaseWages() const { return m_BaseWages; }
    double GetUnitRations() const { return m_UnitRations; }
    double GetBaseRations() const { return m_BaseRations; }
    sint32 GetChangeCurrentlyBuildingItemPenalty() const { return m_ChangeCurrentlyBuildingItemPenalty; }
    sint32 GetTariffReduction() const { return m_TariffReduction; }
    sint32 GetRevoltInfluenceDistance() const { return m_RevoltInfluenceDistance; }
    sint32 GetPactCaptureCityExpires() const { return m_PactCaptureCityExpires; }
    sint32 GetRewardCaptureCityExpires() const { return m_RewardCaptureCityExpires; }
    sint32 GetCeaseFireExpires() const { return m_CeaseFireExpires; }
    sint32 GetShortCeaseFireExpires() const { return m_ShortCeaseFireExpires; }
    sint32 GetEndOfGameYearEarlyWarning() const { return m_EndOfGameYearEarlyWarning; }
    sint32 GetEndOfGameYear() const { return m_EndOfGameYear; }
    sint32 GetCaptureCityForGoldMultiplyer() const { return m_CaptureCityForGoldMultiplyer; }
    sint32 GetPactEndPollutionExpires() const { return m_PactEndPollutionExpires; }
    sint32 GetLeaveOurLandsExpires() const { return m_LeaveOurLandsExpires; }
    sint32 GetReducePollutionExpires() const { return m_ReducePollutionExpires; }
    sint32 GetDestroyEnemyForRewardExpires() const { return m_DestroyEnemyForRewardExpires; }
    sint32 GetPatienceLostPerRequest() const { return m_PatienceLostPerRequest; }
    sint32 GetPatienceRegainedPerRound() const { return m_PatienceRegainedPerRound; }
    sint32 GetRegainPatienceProbability() const { return m_RegainPatienceProbability; }
    sint32 GetPatienceLostThreshold() const { return m_PatienceLostThreshold; }
    sint32 GetAIGoalTimeSlice() const { return m_AIGoalTimeSlice; }
    sint32 GetAIMaxTimeSlice() const { return m_AIMaxTimeSlice; }
    sint32 GetAITotalTimeSlice() const { return m_AITotalTimeSlice; }
    double GetEntrenchmentBonus() const { return m_EntrenchmentBonus; }
    sint32 GetParadropDistance() const { return m_ParadropDistance; }
    sint32 GetParadropSuccessPercent() const { return m_ParadropSuccessPercent; }
    double GetEliteSpyBonus() const { return m_EliteSpyBonus; }
    double GetCitySecondAttemptSpyBonus() const { return m_CitySecondAttemptSpyBonus; }
    sint32 GetAssasinationHappinessEffect() const { return m_AssasinationHappinessEffect; }
    sint32 GetAssasinationHappinessEffectTimer() const { return m_AssasinationHappinessEffectTimer; }
    sint32 GetSpiedUponWarinessTimer() const { return m_SpiedUponWarinessTimer; }
    sint32 GetMaxPartyCost() const { return m_MaxPartyCost; }
    double GetMaxPartyChance() const { return m_MaxPartyChance; }
    sint32 GetGossipMapRadius() const { return m_GossipMapRadius; }
    double GetHearGossipChance() const { return m_HearGossipChance; }
    double GetFranchiseEffect() const { return m_FranchiseEffect; }
    sint32 GetTurnsFranchised() const { return m_TurnsFranchised; }
    sint32 GetTurnsToSueFranchise() const { return m_TurnsToSueFranchise; }
    double GetSlaverEliteChance() const { return m_SlaverEliteChance; }
    double GetEliteSlaverBonus() const { return m_EliteSlaverBonus; }
    double GetAbolitionistEliteChance() const { return m_AbolitionistEliteChance; }
    double GetEliteAbolitionistBonus() const { return m_EliteAbolitionistBonus; }
    double GetWatchfulCitySuccessModifier() const { return m_WatchfulCitySuccessModifier; }
    double GetWatchfulCityDeathModifier() const { return m_WatchfulCityDeathModifier; }
    sint32 GetWatchfulCityTurns() const { return m_WatchfulCityTurns; }
    sint32 GetBioInfectionTurns() const { return m_BioInfectionTurns; }
    sint32 GetNanoInfectionTurns() const { return m_NanoInfectionTurns; }
    double GetBioInfectionSpreadChance() const { return m_BioInfectionSpreadChance; }
    double GetNanoInfectionSpreadChance() const { return m_NanoInfectionSpreadChance; }
    double GetPlagueKillPercentage() const { return m_PlagueKillPercentage; }
    double GetEliteTerroristBonus() const { return m_EliteTerroristBonus; }
    double GetTerroistEliteChance() const { return m_TerroistEliteChance; }
    double GetNukePopulationPercentage() const { return m_NukePopulationPercentage; }
    double GetSpecialActionMoveCost() const { return m_SpecialActionMoveCost; }
    double GetClericConversionFactor() const { return m_ClericConversionFactor; }
    double GetTelevangelistConversionFactor() const { return m_TelevangelistConversionFactor; }
    double GetReformationChance() const { return m_ReformationChance; }
    double GetReformationDeathChance() const { return m_ReformationDeathChance; }
    sint32 GetReformationHappinessTime() const { return m_ReformationHappinessTime; }
    sint32 GetReformationHappinessAmount() const { return m_ReformationHappinessAmount; }
    sint32 GetUnconvertedIndulgenceGold() const { return m_UnconvertedIndulgenceGold; }
    sint32 GetUnconvertedIndulgenceHappiness() const { return m_UnconvertedIndulgenceHappiness; }
    sint32 GetConvertedIndulgenceGold() const { return m_ConvertedIndulgenceGold; }
    sint32 GetConvertedIndulgenceHappiness() const { return m_ConvertedIndulgenceHappiness; }
    sint32 GetOtherFaithIndulgenceGold() const { return m_OtherFaithIndulgenceGold; }
    sint32 GetOtherFaithIndulgenceHappiness() const { return m_OtherFaithIndulgenceHappiness; }
    sint32 GetSoothsayHappyAmount() const { return m_SoothsayHappyAmount; }
    sint32 GetRuinsBoxWidth() const { return m_RuinsBoxWidth; }
    sint32 GetRuinsBoxHeight() const { return m_RuinsBoxHeight; }
    double GetRuinsChancePerBox() const { return m_RuinsChancePerBox; }
    sint32 GetMaxRuinsGold() const { return m_MaxRuinsGold; }
    sint32 GetMaxRuinsAdvance() const { return m_MaxRuinsAdvance; }
    sint32 GetMaxRuinsUnit() const { return m_MaxRuinsUnit; }
    sint32 GetUnitRushModifier() const { return m_UnitRushModifier; }
    sint32 GetBuildingRushModifier() const { return m_BuildingRushModifier; }
    sint32 GetWonderRushModifier() const { return m_WonderRushModifier; }
    double GetBuildingProductionToValueModifier() const { return m_BuildingProductionToValueModifier; }
    sint32 GetMonopolyThreshold() const { return m_MonopolyThreshold; }
    sint32 GetPopulationPollutionWarningThreshold() const { return m_PopulationPollutionWarningThreshold; }
    sint32 GetIndustrialPollutionWarningThreshold() const { return m_IndustrialPollutionWarningThreshold; }
    sint32 GetVeryHappyThreshold() const { return m_VeryHappyThreshold; }
    sint32 GetCityGrowthCoefficient() const { return m_CityGrowthCoefficient; }
    sint32 GetRiotLevel() const { return m_RiotLevel; }
    sint32 GetPowerPointsToMaterials() const { return m_PowerPointsToMaterials; }
    sint32 GetMaxAirliftStackSize() const { return m_MaxAirliftStackSize; }
    sint32 GetGoldFromPiracy() const { return m_GoldFromPiracy; }
    sint32 GetNoPiracyExpires() const { return m_NoPiracyExpires; }
    sint32 GetSpaceLaunchCost() const { return m_SpaceLaunchCost; }
    sint32 GetSpaceLandCost() const { return m_SpaceLandCost; }
    sint32 GetWormholeOrbitHeightPercentage() const { return m_WormholeOrbitHeightPercentage; }
    sint32 GetWormholeSpeed() const { return m_WormholeSpeed; }
    sint32 GetWormholeReturnTime() const { return m_WormholeReturnTime; }
    sint32 GetWormholeVisibleToAllTurns() const { return m_WormholeVisibleToAllTurns; }
    sint32 GetMaxGovernmentChangeTurns() const { return m_MaxGovernmentChangeTurns; }
    sint32 GetPollutionForcesAnarchy() const { return m_PollutionForcesAnarchy; }
    double GetFoodToPollutionCoef() const { return m_FoodToPollutionCoef; }
    sint32 GetEmancipationUnhappinessTurns() const { return m_EmancipationUnhappinessTurns; }
    sint32 GetEmancipationUnhappinessAmount() const { return m_EmancipationUnhappinessAmount; }
    double GetCaptureCityAdvanceChance() const { return m_CaptureCityAdvanceChance; }
    double GetCityHealRate() const { return m_CityHealRate; }
    double GetNormalHealRate() const { return m_NormalHealRate; }
    sint32 GetLocalPollutionLevel() const { return m_LocalPollutionLevel; }
    double GetLocalPollutionChance() const { return m_LocalPollutionChance; }
    double GetAssaultDestroyBuildingChance() const { return m_AssaultDestroyBuildingChance; }
    double GetBombardDestroyBuildingChance() const { return m_BombardDestroyBuildingChance; }
    sint32 GetAdvanceChoicesMin() const { return m_AdvanceChoicesMin; }
    sint32 GetAdvanceChoicesMax() const { return m_AdvanceChoicesMax; }
    sint32 GetAttackConverterUnhappinessTurns() const { return m_AttackConverterUnhappinessTurns; }
    double GetAttackConverterUnhappinessAmount() const { return m_AttackConverterUnhappinessAmount; }
    double GetMinStartDistanceCoefficient() const { return m_MinStartDistanceCoefficient; }
    double GetMaxStartDistanceCoefficient() const { return m_MaxStartDistanceCoefficient; }
    sint32 GetMaxSameTiles() const { return m_MaxSameTiles; }
    double GetCombatVeteranChance() const { return m_CombatVeteranChance; }
    sint32 GetStopTradeRounds() const { return m_StopTradeRounds; }
    sint32 GetLeaveOurLandsRounds() const { return m_LeaveOurLandsRounds; }
    sint32 GetReducePollutionRounds() const { return m_ReducePollutionRounds; }
    sint32 GetCaptureCityRounds() const { return m_CaptureCityRounds; }
    sint32 GetEndPollutionRounds() const { return m_EndPollutionRounds; }
    sint32 GetAttackEnemyRounds() const { return m_AttackEnemyRounds; }
    sint32 GetMinContinentStartSize() const { return m_MinContinentStartSize; }
    double GetBombardKillPopChance() const { return m_BombardKillPopChance; }
    double GetAssaultKillPopChance() const { return m_AssaultKillPopChance; }
    double GetCaptureKillPopChance() const { return m_CaptureKillPopChance; }
    sint32 GetScaledPopAncient() const { return m_ScaledPopAncient; }
    sint32 GetScaledPopRenaissance() const { return m_ScaledPopRenaissance; }
    sint32 GetScaledPopModern() const { return m_ScaledPopModern; }
    sint32 GetScaledPopGenetic() const { return m_ScaledPopGenetic; }
    sint32 GetScaledPopDiamond() const { return m_ScaledPopDiamond; }
    sint32 GetPiracyKillsTraderChance() const { return m_PiracyKillsTraderChance; }
    sint32 GetUprisingChancePerUnguardedSlave() const { return m_UprisingChancePerUnguardedSlave; }
    sint32 GetMaxDisbandSize() const { return m_MaxDisbandSize; }
    sint32 GetMaxRequestsPerPlayerPerTurn() const { return m_MaxRequestsPerPlayerPerTurn; }
    sint32 GetSlavesPerMilitaryUnit() const { return m_SlavesPerMilitaryUnit; }
    sint32 GetMinAbsoluteStartDistance() const { return m_MinAbsoluteStartDistance; }
sint32     GetMapSizeSmall(sint32 index) const;
    sint32 GetNumMapSizeSmall() const { return m_numMapSizeSmall;}
sint32     GetMapSizeMedium(sint32 index) const;
    sint32 GetNumMapSizeMedium() const { return m_numMapSizeMedium;}
sint32     GetMapSizeLarge(sint32 index) const;
    sint32 GetNumMapSizeLarge() const { return m_numMapSizeLarge;}
sint32     GetMapSizeGigantic(sint32 index) const;
    sint32 GetNumMapSizeGigantic() const { return m_numMapSizeGigantic;}
    sint32 GetRailLaunchPollution() const { return m_RailLaunchPollution; }
    sint32 GetSpaceFuelCost() const { return m_SpaceFuelCost; }
    sint32 GetNonSpaceFuelCost() const { return m_NonSpaceFuelCost; }
    sint32 GetStarvationWarningFudgeFactor() const { return m_StarvationWarningFudgeFactor; }
    sint32 GetMaintenanceWarningFudgeFactor() const { return m_MaintenanceWarningFudgeFactor; }
    sint32 GetSupportWarningFudgeFactor() const { return m_SupportWarningFudgeFactor; }
    double GetRelativeAIProductionCheatCoef() const { return m_RelativeAIProductionCheatCoef; }
    double GetRelativeAIScienceCheatCoef() const { return m_RelativeAIScienceCheatCoef; }
    sint32 GetNukeKillsTiles() const { return m_NukeKillsTiles; }
    double GetInciteRevolutionGoldCoefficient() const { return m_InciteRevolutionGoldCoefficient; }
    double GetInciteRevolutionCapitolPenalty() const { return m_InciteRevolutionCapitolPenalty; }
    double GetInciteUprisingGoldCoefficient() const { return m_InciteUprisingGoldCoefficient; }
    double GetInciteUprisingCapitolPenalty() const { return m_InciteUprisingCapitolPenalty; }
    sint32 GetBioInfectionUnhappiness() const { return m_BioInfectionUnhappiness; }
    sint32 GetMinEcoPactViolationLevel() const { return m_MinEcoPactViolationLevel; }
    double GetNanoInfectionTerroristDeathChance() const { return m_NanoInfectionTerroristDeathChance; }
    double GetBioInfectionTerroristDeathChance() const { return m_BioInfectionTerroristDeathChance; }
    double GetFloodChangesCoastToWaterChance() const { return m_FloodChangesCoastToWaterChance; }
    sint32 GetAICheatEcoPactMin() const { return m_AICheatEcoPactMin; }
    sint32 GetAICheatEcoPactMax() const { return m_AICheatEcoPactMax; }
    sint32 GetMaxAbsoluteGrowthRate() const { return m_MaxAbsoluteGrowthRate; }
    double GetTradeDistanceCoefficient() const { return m_TradeDistanceCoefficient; }
    sint32 GetMinLikeTilesForGood() const { return m_MinLikeTilesForGood; }
    double GetMinGoodValue() const { return m_MinGoodValue; }
    double GetMaxGoodValue() const { return m_MaxGoodValue; }
    double GetPiracyWasteCoefficient() const { return m_PiracyWasteCoefficient; }
    sint32 GetBorderIntRadius() const { return m_BorderIntRadius; }
    sint32 GetBorderSquaredRadius() const { return m_BorderSquaredRadius; }
    double GetBioInfectionProductionCoef() const { return m_BioInfectionProductionCoef; }
    double GetNanoBuildingKillPercentage() const { return m_NanoBuildingKillPercentage; }
    sint32 GetBaseStarvationProtection() const { return m_BaseStarvationProtection; }
    double GetCaravanCoef() const { return m_CaravanCoef; }
    double GetDomesticTradeReduction() const { return m_DomesticTradeReduction; }
    double GetTradePactCoef() const { return m_TradePactCoef; }
    sint32 GetPollutionCausedByNuke() const { return m_PollutionCausedByNuke; }
    sint32 GetMaxMatchListCycles() const { return m_MaxMatchListCycles; }
    sint32 GetMinTurnsBetweenRevolts() const { return m_MinTurnsBetweenRevolts; }
    sint32 GetMaxCityWonders() const { return m_MaxCityWonders; }
    sint32 GetMaxCityBuildings() const { return m_MaxCityBuildings; }
    sint32 GetCapturedCityKillPop() const { return m_CapturedCityKillPop; }
    double GetCombatEliteChance() const { return m_CombatEliteChance; }
    double GetCombatLeaderChance() const { return m_CombatLeaderChance; }
    double GetCityOnTradeRouteCoeff() const { return m_CityOnTradeRouteCoeff; }
    sint32 GetCityExpansionDenominator() const { return m_CityExpansionDenominator; }
    sint32 GetTurnsAcceptedForOnePop() const { return m_TurnsAcceptedForOnePop; }
    sint32 GetUseBaseMoveCostsForRoads() const { return m_UseBaseMoveCostsForRoads; }
    double GetRoadAlreadyThereCostsCoefficient() const { return m_RoadAlreadyThereCostsCoefficient; }
    sint32 GetBuildRoadsToClosestCities() const { return m_BuildRoadsToClosestCities; }
    double GetBaseRoadPriorityVsThreatRank() const { return m_BaseRoadPriorityVsThreatRank; }
    sint32 GetCosiderNumCitiesForSlaves() const { return m_CosiderNumCitiesForSlaves; }
    double GetSmallCityImproveCoeff() const { return m_SmallCityImproveCoeff; }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* ConstRecord */

struct ConstRecordAccessorInfo
{
    ConstRecord::IntAccessor        m_intAccessor;
    ConstRecord::BoolAccessor       m_boolAccessor;
    ConstRecord::FloatAccessor      m_floatAccessor;
    ConstRecord::BitIntAccessor     m_bitIntAccessor;
    ConstRecord::BitFloatAccessor   m_bitFloatAccessor;
    ConstRecord::IntArrayAccessor   m_intArrayAccessor;
    ConstRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern ConstRecordAccessorInfo      g_ConstRecord_Accessors[];
extern CTPDatabase<ConstRecord> *   g_theConstDB;

extern const char * g_Const_Tokens[];

#endif
