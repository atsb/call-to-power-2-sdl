
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#include "c3.h"
#include "WonderBuildListRecord.h"

#include <algorithm>
#include "BitArray.h"
#include "c3errors.h"
#include "CTPDatabase.h"
#include "DBLexer.h"
#include "DBTokens.h"
#include "StrDB.h"

#include "WonderRecord.h"

CTPDatabase<WonderBuildListRecord> *g_theWonderBuildListDB = NULL;

void WonderBuildListRecord::Init()
{
    m_Wonder = NULL;
    m_numWonder = 0;
    //GovMod Specific flag initialization
    m_hasGovernmentsModified = false;
}

void WonderBuildListRecord::Serialize(CivArchive &archive)
{
    if(archive.IsStoring()) {
        archive << m_index;
        if(m_name >= 0){
            archive << GetIDText();
        }
        else{
            archive << static_cast<MBCHAR*>(NULL);
        }
        archive << m_numWonder;
        archive.Store((uint8*)m_Wonder, m_numWonder * sizeof(sint32));

    } else {
        //GovMod Specific flag initialization
        m_hasGovernmentsModified = false;

        archive >> m_index;
        {
            MBCHAR* tmpStr = NULL;
            archive >> tmpStr;
            g_theStringDB->GetStringID(tmpStr, m_name);
            SetTextName(g_theStringDB->GetNameStr(m_name));
        }
        archive >> m_numWonder;
        archive.Load((uint8*)m_Wonder, m_numWonder * sizeof(sint32));

    }
}

WonderBuildListRecord::~WonderBuildListRecord()
{
    delete [] m_Wonder;
}

WonderBuildListRecord const & WonderBuildListRecord::operator = (WonderBuildListRecord const & rval)
{
    if (this != &rval)
    {
        m_index = rval.m_index;
        m_hasGovernmentsModified = rval.m_hasGovernmentsModified;

        delete [] m_Wonder;
        m_Wonder = NULL;
        if (rval.m_numWonder > 0)
        {
            m_Wonder = new sint32 [rval.m_numWonder];
            std::copy(rval.m_Wonder, rval.m_Wonder + rval.m_numWonder, m_Wonder);
        }
        m_numWonder = rval.m_numWonder;

    }

    return *this;
}

const char *g_WonderBuildList_Tokens[] =
{
    "Wonder",
};

WonderBuildListRecordAccessorInfo g_WonderBuildListRecord_Accessors[] =
{
    { &WonderBuildListRecord::GetNumWonder, NULL, NULL, NULL, NULL, &WonderBuildListRecord::GetWonderIndex, NULL}, /* Wonder (array) */
};

#define k_Token_WonderBuildList_Wonder           ((k_Token_Custom_Base) + 0)
#define k_Token_WonderBuildList_Max              ((k_Token_Custom_Base) + 1)


static BitArray s_ParsedTokens(1);
void WonderBuildListRecord::CheckRequiredFields(DBLexer *lex)
{
}

sint32 WonderBuildListRecord::Parse(DBLexer *lex, sint32 numRecords)
{
    bool done = false;
    sint32 result = 0;
    sint32 tok;
    s_ParsedTokens.Clear();
    lex->SetTokens(g_WonderBuildList_Tokens, k_Token_WonderBuildList_Max);
    tok = lex->GetToken();
    if(tok == k_Token_Int) {
        tok = lex->GetToken(); // Accept number to make new db compatible with the old database format
    }
    if(tok != k_Token_Name) {
        char newName[256];
        sprintf(newName, "WONDERBUILDLIST_%i", numRecords);
        if(!g_theStringDB->GetStringID(newName, m_name)) {
            g_theStringDB->InsertStr(newName, newName);
            if(!g_theStringDB->GetStringID(newName, m_name))
                SetTextName(newName);
        }
    }
    else{
        if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name)) {
            g_theStringDB->InsertStr(lex->GetTokenText(), lex->GetTokenText());
            if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name))
                SetTextName(lex->GetTokenText());
        }
        tok = lex->GetToken();
    }


    if(tok != k_Token_OpenBrace) {
        DBERROR(("Missing open brace"));
        return 0;
    }

    while(!done) {
        tok = lex->GetToken();
        if(tok >= k_Token_Custom_Base && tok < k_Token_WonderBuildList_Max) {
            s_ParsedTokens.SetBit(tok - k_Token_Custom_Base);
        }
        switch(tok) {
            case k_Token_WonderBuildList_Wonder:
                if(!g_theWonderDB->ParseRecordInArray(lex, (sint32 **)&m_Wonder, &m_numWonder))
                {
                    done = true; break;
                }
                break;
            case k_Token_CloseBrace:
                done = true;
                result = 1;
                break;
            default:
                Assert(false)
                if(!g_theWonderDB->ParseRecordInArray(lex, &m_Wonder, &m_numWonder)) {
                    DBERROR(("Unknown token"));
                    done = true; break;
                }
                break;
        }
    }
    CheckRequiredFields(lex);
    lex->RestoreTokens();
    return result;
}

void WonderBuildListRecord::ResolveDBReferences()
{
    {
        sint32 i;
        for(i = 0; i < m_numWonder; i++) {
            if(m_Wonder[i] & 0x80000000) {
                sint32 id = m_Wonder[i] & 0x7fffffff;
                if(!g_theWonderDB->GetNamedItem(id, m_Wonder[i])) {
                    c3errors_ErrorDialog("DB", "%s not found in Wonder database", g_theStringDB->GetNameStr(id));
                }
            } else if(m_Wonder[i] == 0x7fffffff){
                m_Wonder[i] = -1;
            }
        }
    }
}

void WonderBuildListRecord::Merge(const WonderBuildListRecord & rval){
    // resize m_Wonder if necessary
    if (rval.m_numWonder > m_numWonder)
    {
        delete [] m_Wonder;
        m_Wonder = NULL;
        if (rval.m_numWonder > 0)
            m_Wonder = new sint32 [rval.m_numWonder];
        m_numWonder = rval.m_numWonder;
    }
    if (rval.m_numWonder > 0)
        std::copy(rval.m_Wonder, rval.m_Wonder + rval.m_numWonder, m_Wonder);

}

sint32 WonderBuildListRecord::GetWonderIndex(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numWonder);
    if((index < 0) || (index >= m_numWonder)) {
        return 0;
    }
    return m_Wonder[index];
}

WonderRecord const * WonderBuildListRecord::GetWonder(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numWonder);
    if((index < 0) || (index >= m_numWonder)) {
        return 0;
    }
    return g_theWonderDB->Get(m_Wonder[index]);
}

