
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef CULTURE_RECORD_H__
#define CULTURE_RECORD_H__

class CultureRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class AdvanceRecord;
class BuildingRecord;
class CityStyleRecord;
class CivilisationRecord;
class FeatRecord;
class GovernmentRecord;
class ResourceRecord;
class WonderRecord;
class BuildingRecord;
class BuildingRecord;

#define k_Num_CultureRecord_Tokens 136

//
// m_flags0: Culture
#define k_Culture_IsCityBonus_Bit                0x00000001
#define k_Culture_IsCivilizationBonus_Bit        0x00000002
#define k_Culture_SquaredBorderRadius_Bit        0x00000004
#define k_Culture_IntBorderRadius_Bit            0x00000008
#define k_Culture_ReduceReadinessCost_Bit        0x00000010
#define k_Culture_EmbassiesEverywhere_Bit        0x00000020
#define k_Culture_DecCrimePercent_Bit            0x00000040
#define k_Culture_IncKnowledgePercent_Bit        0x00000080
#define k_Culture_DecEmpireSize_Bit              0x00000100
#define k_Culture_IncHappinessEmpire_Bit         0x00000200
#define k_Culture_CloseEmbassies_Bit             0x00000400
#define k_Culture_ReformCities_Bit               0x00000800
#define k_Culture_FreeSlaves_Bit                 0x00001000
#define k_Culture_ProhibitSlavers_Bit            0x00002000
#define k_Culture_IncConvertedCitiesFeePercent_Bit 0x00004000
#define k_Culture_GoldPerWaterTradeRoute_Bit     0x00008000
#define k_Culture_GoldPerTelevision_Bit          0x00010000
#define k_Culture_GlobalRadar_Bit                0x00020000
#define k_Culture_SpiesEverywhere_Bit            0x00040000
#define k_Culture_GoldPerInternationalTradeRoute_Bit 0x00080000
#define k_Culture_ProtectFromBiologicalWarfare_Bit 0x00100000
#define k_Culture_PollutersToParks_Bit           0x00200000
#define k_Culture_EnableParkRangers_Bit          0x00400000
#define k_Culture_ReduceWorldPollution_Bit       0x00800000
#define k_Culture_AllCitizensContent_Bit         0x01000000
#define k_Culture_EliminateNukes_Bit             0x02000000
#define k_Culture_AllBoatsDeepWater_Bit          0x04000000
#define k_Culture_IncreaseBoatMovement_Bit       0x08000000
#define k_Culture_FreeTradeRoutes_Bit            0x10000000
#define k_Culture_DecreaseMaintenance_Bit        0x20000000
#define k_Culture_RandomAdvanceChance_Bit        0x40000000
#define k_Culture_IncreaseHp_Bit                 0x80000000
//
// m_flags1: Culture
#define k_Culture_MultiplyTradeRoutes_Bit        0x00000001
#define k_Culture_ForcefieldEverywhere_Bit       0x00000002
#define k_Culture_IncreaseScientists_Bit         0x00000004
#define k_Culture_OtherCivRandomAdvanceChance_Bit 0x00000008
#define k_Culture_IncreaseProduction_Bit         0x00000010
#define k_Culture_BonusGold_Bit                  0x00000020
#define k_Culture_CantBuildInSea_Bit             0x00000040
#define k_Culture_CantBuildOnLand_Bit            0x00000080
#define k_Culture_CoastalBuilding_Bit            0x00000100
#define k_Culture_EnablesPunativeAirstrikes_Bit  0x00000200
#define k_Culture_IncreaseFoodAllCities_Bit      0x00000400
#define k_Culture_TemporaryFullHappiness_Bit     0x00000800
#define k_Culture_RevoltingCitiesJoinPlayer_Bit  0x00001000
#define k_Culture_NoPollutionUnhappiness_Bit     0x00002000
#define k_Culture_EmbassiesEverywhereEvenAtWar_Bit 0x00004000
#define k_Culture_IncreaseSpecialists_Bit        0x00008000
#define k_Culture_IncreaseCathedrals_Bit         0x00010000
#define k_Culture_IncreaseBrokerages_Bit         0x00020000
#define k_Culture_IncreaseRegard_Bit             0x00040000
#define k_Culture_PreventConversion_Bit          0x00080000
#define k_Culture_ProtectFromBarbarians_Bit      0x00100000
#define k_Culture_StartGaiaController_Bit        0x00200000
#define k_Culture_GLHidden_Bit                   0x00400000
#define k_Culture_BuildingFeat_Bit               0x00800000
#define k_Culture_BuildingGold_Bit               0x01000000
#define k_Culture_BuildingEverywhere_Bit         0x02000000
#define k_Culture_ActualBuildingEverywhere_Bit   0x04000000
#define k_Culture_BuildingEffectEverywhere_Bit   0x08000000
#define k_Culture_ConflictsWithBuilding_Bit      0x10000000
#define k_Culture_GoldPerBuildingAnywhere_Bit    0x20000000
#define k_Culture_PollutionPercent_Bit           0x40000000
#define k_Culture_PollutionAmount_Bit            0x80000000
//
// m_flags2: Culture
#define k_Culture_EnergyHunger_Bit               0x00000001
#define k_Culture_ProducesEnergy_Bit             0x00000002
#define k_Culture_EnergyHungerPerPop_Bit         0x00000004
#define k_Culture_ProducesEnergyPerPop_Bit       0x00000008
#define k_Culture_TooManyCitiesThresholdModifier_Bit 0x00000010
#define k_Culture_TooManyCitiesCoefficientModifier_Bit 0x00000020
#define k_Culture_RiotLevelModifier_Bit          0x00000040
#define k_Culture_OtherPlayerRiotLevelModifier_Bit 0x00000080
//
// m_flags0: BuildingFeat
#define k_BuildingFeat_Num_Bit                   0x00000001
#define k_BuildingFeat_PercentCities_Bit         0x00000002
//
// m_flags0: BuildingGold
#define k_BuildingGold_Gold_Bit                  0x00000001
#define k_MAX_ObsoleteAdvance                5

class CultureRecord : public CTPRecord
{
public:
    typedef sint32 (CultureRecord::*IntAccessor)() const;
    typedef bool   (CultureRecord::*BoolAccessor)() const;
    typedef double (CultureRecord::*FloatAccessor)() const ;
    typedef bool   (CultureRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (CultureRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (CultureRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (CultureRecord::*FloatArrayAccessor)(sint32 index) const;

    class BuildingFeat {
    private:
        uint32            m_flags0;
        sint32            m_Building; // Index into Building database
        sint32            m_NumValue;
        sint32            m_PercentCitiesValue;

    public:
        BuildingFeat();
        BuildingFeat(CivArchive & archive){ Serialize(archive); };
        ~BuildingFeat();
        BuildingFeat const & operator = (BuildingFeat const & rval);
        bool operator == (BuildingFeat const & rval) {
          if (m_Building != rval.m_Building)
             return false;
          return true;
        }

        void Serialize(CivArchive &archive);
        sint32 Parse(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, BuildingFeat **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, BuildingFeat *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();

        sint32           GetBuildingIndex() const { return m_Building; }
        BuildingRecord const * GetBuilding() const;
        bool HasNum() const { return (m_flags0 & k_BuildingFeat_Num_Bit) != 0; }
        bool GetNum(sint32 & value) const
        {
            if (m_flags0 & k_BuildingFeat_Num_Bit)
            {
                value = m_NumValue;
            }
            return (m_flags0 & k_BuildingFeat_Num_Bit) != 0;
        }
        bool HasPercentCities() const { return (m_flags0 & k_BuildingFeat_PercentCities_Bit) != 0; }
        bool GetPercentCities(sint32 & value) const
        {
            if (m_flags0 & k_BuildingFeat_PercentCities_Bit)
            {
                value = m_PercentCitiesValue;
            }
            return (m_flags0 & k_BuildingFeat_PercentCities_Bit) != 0;
        }

    }; /* class BuildingFeat */

    class BuildingGold {
    private:
        uint32            m_flags0;
        sint32            m_Building; // Index into Building database
        sint32            m_GoldValue;

    public:
        BuildingGold();
        BuildingGold(CivArchive & archive){ Serialize(archive); };
        ~BuildingGold();
        BuildingGold const & operator = (BuildingGold const & rval);
        bool operator == (BuildingGold const & rval) {
          if (m_Building != rval.m_Building)
             return false;
          return true;
        }

        void Serialize(CivArchive &archive);
        sint32 Parse(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, BuildingGold **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, BuildingGold *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();

        sint32           GetBuildingIndex() const { return m_Building; }
        BuildingRecord const * GetBuilding() const;
        bool HasGold() const { return (m_flags0 & k_BuildingGold_Gold_Bit) != 0; }
        bool GetGold(sint32 & value) const
        {
            if (m_flags0 & k_BuildingGold_Gold_Bit)
            {
                value = m_GoldValue;
            }
            return (m_flags0 & k_BuildingGold_Gold_Bit) != 0;
        }

    }; /* class BuildingGold */

private:
    uint32 m_flags0;
    uint32 m_flags1;
    uint32 m_flags2;
    sint32            m_CultureCost;
    sint32            m_Description;
    sint32            m_EnableAdvance; // Index into Advance database
    sint32            m_ObsoleteAdvance[k_MAX_ObsoleteAdvance]; // Index into Advance database
    sint32            m_numObsoleteAdvance;
    sint32          * m_PrerequisiteBuilding; // Index into Building database
    sint32            m_numPrerequisiteBuilding;
    sint32          * m_CultureOnly; // Index into CityStyle database
    sint32            m_numCultureOnly;
    sint32          * m_GovernmentType; // Index into Government database
    sint32            m_numGovernmentType;
    sint32          * m_ObsoleteGovernmentType; // Index into Government database
    sint32            m_numObsoleteGovernmentType;
    sint32          * m_CityStyleOnly; // Index into CityStyle database
    sint32            m_numCityStyleOnly;
    sint32          * m_NeedsCityGood; // Index into Resource database
    sint32            m_numNeedsCityGood;
    sint32          * m_NeedsCityGoodAll; // Index into Resource database
    sint32            m_numNeedsCityGoodAll;
    sint32          * m_NeedsCityGoodAnyCity; // Index into Resource database
    sint32            m_numNeedsCityGoodAnyCity;
    sint32          * m_EnablesGood; // Index into Resource database
    sint32            m_numEnablesGood;
    sint32          * m_CivilisationOnly; // Index into Civilisation database
    sint32            m_numCivilisationOnly;
    sint32          * m_NeedsFeatToBuild; // Index into Feat database
    sint32            m_numNeedsFeatToBuild;
    sint32          * m_NeedsAnyPlayerFeatToBuild; // Index into Feat database
    sint32            m_numNeedsAnyPlayerFeatToBuild;
    sint32            m_SquaredBorderRadiusValue;
    sint32            m_IntBorderRadiusValue;
    sint32            m_ReduceReadinessCostValue;
    sint32            m_DecCrimePercentValue;
    sint32            m_IncKnowledgePercentValue;
    sint32            m_DecEmpireSizeValue;
    sint32            m_IncHappinessEmpireValue;
    sint32            m_IncConvertedCitiesFeePercentValue;
    sint32            m_GoldPerWaterTradeRouteValue;
    sint32            m_GoldPerTelevisionValue;
    sint32            m_GoldPerInternationalTradeRouteValue;
    sint32            m_PollutersToParksValue;
    sint32            m_ReduceWorldPollutionValue;
    sint32            m_IncreaseBoatMovementValue;
    sint32            m_DecreaseMaintenanceValue;
    sint32            m_RandomAdvanceChanceValue;
    sint32            m_IncreaseHpValue;
    sint32            m_MultiplyTradeRoutesValue;
    sint32            m_IncreaseScientistsValue;
    sint32            m_OtherCivRandomAdvanceChanceValue;
    sint32            m_IncreaseProductionValue;
    sint32            m_BonusGoldValue;
    sint32            m_IncreaseFoodAllCitiesValue;
    sint32            m_TemporaryFullHappinessValue;
    sint32            m_IncreaseSpecialistsValue;
    sint32            m_IncreaseCathedralsValue;
    sint32            m_IncreaseBrokeragesValue;
    sint32            m_IncreaseRegardValue;
    BuildingFeat      m_BuildingFeatValue;
    BuildingGold      m_BuildingGoldValue;
    sint32            m_BuildingEverywhereValue; // Index into Building database
    sint32            m_ActualBuildingEverywhereValue; // Index into Building database
    sint32            m_BuildingEffectEverywhereValue; // Index into Building database
    sint32            m_ConflictsWithBuildingValue; // Index into Building database
    sint32          * m_BuildingAnywhere; // Index into Building database
    sint32            m_numBuildingAnywhere;
    sint32            m_GoldPerBuildingAnywhereValue;
    double            m_PollutionPercentValue;
    double            m_PollutionAmountValue;
    sint32          * m_ExcludedByBuilding; // Index into Building database
    sint32            m_numExcludedByBuilding;
    sint32          * m_ExcludedByWonder; // Index into Wonder database
    sint32            m_numExcludedByWonder;
    sint32            m_EnergyHungerValue;
    sint32            m_ProducesEnergyValue;
    sint32            m_EnergyHungerPerPopValue;
    sint32            m_ProducesEnergyPerPopValue;
    sint32            m_TooManyCitiesThresholdModifierValue;
    double            m_TooManyCitiesCoefficientModifierValue;
    sint32            m_RiotLevelModifierValue;
    sint32            m_OtherPlayerRiotLevelModifierValue;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    CultureRecord() { Init(); };
    CultureRecord(CivArchive &archive) { Serialize(archive); };
    CultureRecord(CultureRecord const & rval) { Init(); *this = rval; }
    ~CultureRecord();
    CultureRecord const & operator = (CultureRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const CultureRecord & rval);

    sint32 GetCultureCost() const { return m_CultureCost; }
    sint32 GetDescription() const { return m_Description; }
    bool GetIsCityBonus() const { return (m_flags0 & k_Culture_IsCityBonus_Bit) != 0; }
    bool GetIsCivilizationBonus() const { return (m_flags0 & k_Culture_IsCivilizationBonus_Bit) != 0; }
    sint32           GetEnableAdvanceIndex() const { return m_EnableAdvance; }
    AdvanceRecord const * GetEnableAdvance() const;
    sint32 GetObsoleteAdvanceIndex(sint32 index) const;
    const AdvanceRecord * GetObsoleteAdvance(sint32 index) const;
    sint32 GetNumObsoleteAdvance() const { return m_numObsoleteAdvance;}
    sint32 GetPrerequisiteBuildingIndex(sint32 index) const;
    const BuildingRecord * GetPrerequisiteBuilding(sint32 index) const;
    sint32 GetNumPrerequisiteBuilding() const { return m_numPrerequisiteBuilding;}
    sint32 GetCultureOnlyIndex(sint32 index) const;
    const CityStyleRecord * GetCultureOnly(sint32 index) const;
    sint32 GetNumCultureOnly() const { return m_numCultureOnly;}
    sint32 GetGovernmentTypeIndex(sint32 index) const;
    const GovernmentRecord * GetGovernmentType(sint32 index) const;
    sint32 GetNumGovernmentType() const { return m_numGovernmentType;}
    sint32 GetObsoleteGovernmentTypeIndex(sint32 index) const;
    const GovernmentRecord * GetObsoleteGovernmentType(sint32 index) const;
    sint32 GetNumObsoleteGovernmentType() const { return m_numObsoleteGovernmentType;}
    sint32 GetCityStyleOnlyIndex(sint32 index) const;
    const CityStyleRecord * GetCityStyleOnly(sint32 index) const;
    sint32 GetNumCityStyleOnly() const { return m_numCityStyleOnly;}
    sint32 GetNeedsCityGoodIndex(sint32 index) const;
    const ResourceRecord * GetNeedsCityGood(sint32 index) const;
    sint32 GetNumNeedsCityGood() const { return m_numNeedsCityGood;}
    sint32 GetNeedsCityGoodAllIndex(sint32 index) const;
    const ResourceRecord * GetNeedsCityGoodAll(sint32 index) const;
    sint32 GetNumNeedsCityGoodAll() const { return m_numNeedsCityGoodAll;}
    sint32 GetNeedsCityGoodAnyCityIndex(sint32 index) const;
    const ResourceRecord * GetNeedsCityGoodAnyCity(sint32 index) const;
    sint32 GetNumNeedsCityGoodAnyCity() const { return m_numNeedsCityGoodAnyCity;}
    sint32 GetEnablesGoodIndex(sint32 index) const;
    const ResourceRecord * GetEnablesGood(sint32 index) const;
    sint32 GetNumEnablesGood() const { return m_numEnablesGood;}
    sint32 GetCivilisationOnlyIndex(sint32 index) const;
    const CivilisationRecord * GetCivilisationOnly(sint32 index) const;
    sint32 GetNumCivilisationOnly() const { return m_numCivilisationOnly;}
    sint32 GetNeedsFeatToBuildIndex(sint32 index) const;
    const FeatRecord * GetNeedsFeatToBuild(sint32 index) const;
    sint32 GetNumNeedsFeatToBuild() const { return m_numNeedsFeatToBuild;}
    sint32 GetNeedsAnyPlayerFeatToBuildIndex(sint32 index) const;
    const FeatRecord * GetNeedsAnyPlayerFeatToBuild(sint32 index) const;
    sint32 GetNumNeedsAnyPlayerFeatToBuild() const { return m_numNeedsAnyPlayerFeatToBuild;}
    bool HasSquaredBorderRadius() const { return (m_flags0 & k_Culture_SquaredBorderRadius_Bit) != 0; }
    bool GetSquaredBorderRadius(sint32 & value) const
    {
        if (m_flags0 & k_Culture_SquaredBorderRadius_Bit)
        {
            value = m_SquaredBorderRadiusValue;
        }
        return (m_flags0 & k_Culture_SquaredBorderRadius_Bit) != 0;
    }
    bool HasIntBorderRadius() const { return (m_flags0 & k_Culture_IntBorderRadius_Bit) != 0; }
    bool GetIntBorderRadius(sint32 & value) const
    {
        if (m_flags0 & k_Culture_IntBorderRadius_Bit)
        {
            value = m_IntBorderRadiusValue;
        }
        return (m_flags0 & k_Culture_IntBorderRadius_Bit) != 0;
    }
    bool HasReduceReadinessCost() const { return (m_flags0 & k_Culture_ReduceReadinessCost_Bit) != 0; }
    bool GetReduceReadinessCost(sint32 & value) const
    {
        if (m_flags0 & k_Culture_ReduceReadinessCost_Bit)
        {
            value = m_ReduceReadinessCostValue;
        }
        return (m_flags0 & k_Culture_ReduceReadinessCost_Bit) != 0;
    }
    bool GetEmbassiesEverywhere() const { return (m_flags0 & k_Culture_EmbassiesEverywhere_Bit) != 0; }
    bool HasDecCrimePercent() const { return (m_flags0 & k_Culture_DecCrimePercent_Bit) != 0; }
    bool GetDecCrimePercent(sint32 & value) const
    {
        if (m_flags0 & k_Culture_DecCrimePercent_Bit)
        {
            value = m_DecCrimePercentValue;
        }
        return (m_flags0 & k_Culture_DecCrimePercent_Bit) != 0;
    }
    bool HasIncKnowledgePercent() const { return (m_flags0 & k_Culture_IncKnowledgePercent_Bit) != 0; }
    bool GetIncKnowledgePercent(sint32 & value) const
    {
        if (m_flags0 & k_Culture_IncKnowledgePercent_Bit)
        {
            value = m_IncKnowledgePercentValue;
        }
        return (m_flags0 & k_Culture_IncKnowledgePercent_Bit) != 0;
    }
    bool HasDecEmpireSize() const { return (m_flags0 & k_Culture_DecEmpireSize_Bit) != 0; }
    bool GetDecEmpireSize(sint32 & value) const
    {
        if (m_flags0 & k_Culture_DecEmpireSize_Bit)
        {
            value = m_DecEmpireSizeValue;
        }
        return (m_flags0 & k_Culture_DecEmpireSize_Bit) != 0;
    }
    bool HasIncHappinessEmpire() const { return (m_flags0 & k_Culture_IncHappinessEmpire_Bit) != 0; }
    bool GetIncHappinessEmpire(sint32 & value) const
    {
        if (m_flags0 & k_Culture_IncHappinessEmpire_Bit)
        {
            value = m_IncHappinessEmpireValue;
        }
        return (m_flags0 & k_Culture_IncHappinessEmpire_Bit) != 0;
    }
    bool GetCloseEmbassies() const { return (m_flags0 & k_Culture_CloseEmbassies_Bit) != 0; }
    bool GetReformCities() const { return (m_flags0 & k_Culture_ReformCities_Bit) != 0; }
    bool GetFreeSlaves() const { return (m_flags0 & k_Culture_FreeSlaves_Bit) != 0; }
    bool GetProhibitSlavers() const { return (m_flags0 & k_Culture_ProhibitSlavers_Bit) != 0; }
    bool HasIncConvertedCitiesFeePercent() const { return (m_flags0 & k_Culture_IncConvertedCitiesFeePercent_Bit) != 0; }
    bool GetIncConvertedCitiesFeePercent(sint32 & value) const
    {
        if (m_flags0 & k_Culture_IncConvertedCitiesFeePercent_Bit)
        {
            value = m_IncConvertedCitiesFeePercentValue;
        }
        return (m_flags0 & k_Culture_IncConvertedCitiesFeePercent_Bit) != 0;
    }
    bool HasGoldPerWaterTradeRoute() const { return (m_flags0 & k_Culture_GoldPerWaterTradeRoute_Bit) != 0; }
    bool GetGoldPerWaterTradeRoute(sint32 & value) const
    {
        if (m_flags0 & k_Culture_GoldPerWaterTradeRoute_Bit)
        {
            value = m_GoldPerWaterTradeRouteValue;
        }
        return (m_flags0 & k_Culture_GoldPerWaterTradeRoute_Bit) != 0;
    }
    bool HasGoldPerTelevision() const { return (m_flags0 & k_Culture_GoldPerTelevision_Bit) != 0; }
    bool GetGoldPerTelevision(sint32 & value) const
    {
        if (m_flags0 & k_Culture_GoldPerTelevision_Bit)
        {
            value = m_GoldPerTelevisionValue;
        }
        return (m_flags0 & k_Culture_GoldPerTelevision_Bit) != 0;
    }
    bool GetGlobalRadar() const { return (m_flags0 & k_Culture_GlobalRadar_Bit) != 0; }
    bool GetSpiesEverywhere() const { return (m_flags0 & k_Culture_SpiesEverywhere_Bit) != 0; }
    bool HasGoldPerInternationalTradeRoute() const { return (m_flags0 & k_Culture_GoldPerInternationalTradeRoute_Bit) != 0; }
    bool GetGoldPerInternationalTradeRoute(sint32 & value) const
    {
        if (m_flags0 & k_Culture_GoldPerInternationalTradeRoute_Bit)
        {
            value = m_GoldPerInternationalTradeRouteValue;
        }
        return (m_flags0 & k_Culture_GoldPerInternationalTradeRoute_Bit) != 0;
    }
    bool GetProtectFromBiologicalWarfare() const { return (m_flags0 & k_Culture_ProtectFromBiologicalWarfare_Bit) != 0; }
    bool HasPollutersToParks() const { return (m_flags0 & k_Culture_PollutersToParks_Bit) != 0; }
    bool GetPollutersToParks(sint32 & value) const
    {
        if (m_flags0 & k_Culture_PollutersToParks_Bit)
        {
            value = m_PollutersToParksValue;
        }
        return (m_flags0 & k_Culture_PollutersToParks_Bit) != 0;
    }
    bool GetEnableParkRangers() const { return (m_flags0 & k_Culture_EnableParkRangers_Bit) != 0; }
    bool HasReduceWorldPollution() const { return (m_flags0 & k_Culture_ReduceWorldPollution_Bit) != 0; }
    bool GetReduceWorldPollution(sint32 & value) const
    {
        if (m_flags0 & k_Culture_ReduceWorldPollution_Bit)
        {
            value = m_ReduceWorldPollutionValue;
        }
        return (m_flags0 & k_Culture_ReduceWorldPollution_Bit) != 0;
    }
    bool GetAllCitizensContent() const { return (m_flags0 & k_Culture_AllCitizensContent_Bit) != 0; }
    bool GetEliminateNukes() const { return (m_flags0 & k_Culture_EliminateNukes_Bit) != 0; }
    bool GetAllBoatsDeepWater() const { return (m_flags0 & k_Culture_AllBoatsDeepWater_Bit) != 0; }
    bool HasIncreaseBoatMovement() const { return (m_flags0 & k_Culture_IncreaseBoatMovement_Bit) != 0; }
    bool GetIncreaseBoatMovement(sint32 & value) const
    {
        if (m_flags0 & k_Culture_IncreaseBoatMovement_Bit)
        {
            value = m_IncreaseBoatMovementValue;
        }
        return (m_flags0 & k_Culture_IncreaseBoatMovement_Bit) != 0;
    }
    bool GetFreeTradeRoutes() const { return (m_flags0 & k_Culture_FreeTradeRoutes_Bit) != 0; }
    bool HasDecreaseMaintenance() const { return (m_flags0 & k_Culture_DecreaseMaintenance_Bit) != 0; }
    bool GetDecreaseMaintenance(sint32 & value) const
    {
        if (m_flags0 & k_Culture_DecreaseMaintenance_Bit)
        {
            value = m_DecreaseMaintenanceValue;
        }
        return (m_flags0 & k_Culture_DecreaseMaintenance_Bit) != 0;
    }
    bool HasRandomAdvanceChance() const { return (m_flags0 & k_Culture_RandomAdvanceChance_Bit) != 0; }
    bool GetRandomAdvanceChance(sint32 & value) const
    {
        if (m_flags0 & k_Culture_RandomAdvanceChance_Bit)
        {
            value = m_RandomAdvanceChanceValue;
        }
        return (m_flags0 & k_Culture_RandomAdvanceChance_Bit) != 0;
    }
    bool HasIncreaseHp() const { return (m_flags0 & k_Culture_IncreaseHp_Bit) != 0; }
    bool GetIncreaseHp(sint32 & value) const
    {
        if (m_flags0 & k_Culture_IncreaseHp_Bit)
        {
            value = m_IncreaseHpValue;
        }
        return (m_flags0 & k_Culture_IncreaseHp_Bit) != 0;
    }
    bool HasMultiplyTradeRoutes() const { return (m_flags1 & k_Culture_MultiplyTradeRoutes_Bit) != 0; }
    bool GetMultiplyTradeRoutes(sint32 & value) const
    {
        if (m_flags1 & k_Culture_MultiplyTradeRoutes_Bit)
        {
            value = m_MultiplyTradeRoutesValue;
        }
        return (m_flags1 & k_Culture_MultiplyTradeRoutes_Bit) != 0;
    }
    bool GetForcefieldEverywhere() const { return (m_flags1 & k_Culture_ForcefieldEverywhere_Bit) != 0; }
    bool HasIncreaseScientists() const { return (m_flags1 & k_Culture_IncreaseScientists_Bit) != 0; }
    bool GetIncreaseScientists(sint32 & value) const
    {
        if (m_flags1 & k_Culture_IncreaseScientists_Bit)
        {
            value = m_IncreaseScientistsValue;
        }
        return (m_flags1 & k_Culture_IncreaseScientists_Bit) != 0;
    }
    bool HasOtherCivRandomAdvanceChance() const { return (m_flags1 & k_Culture_OtherCivRandomAdvanceChance_Bit) != 0; }
    bool GetOtherCivRandomAdvanceChance(sint32 & value) const
    {
        if (m_flags1 & k_Culture_OtherCivRandomAdvanceChance_Bit)
        {
            value = m_OtherCivRandomAdvanceChanceValue;
        }
        return (m_flags1 & k_Culture_OtherCivRandomAdvanceChance_Bit) != 0;
    }
    bool HasIncreaseProduction() const { return (m_flags1 & k_Culture_IncreaseProduction_Bit) != 0; }
    bool GetIncreaseProduction(sint32 & value) const
    {
        if (m_flags1 & k_Culture_IncreaseProduction_Bit)
        {
            value = m_IncreaseProductionValue;
        }
        return (m_flags1 & k_Culture_IncreaseProduction_Bit) != 0;
    }
    bool HasBonusGold() const { return (m_flags1 & k_Culture_BonusGold_Bit) != 0; }
    bool GetBonusGold(sint32 & value) const
    {
        if (m_flags1 & k_Culture_BonusGold_Bit)
        {
            value = m_BonusGoldValue;
        }
        return (m_flags1 & k_Culture_BonusGold_Bit) != 0;
    }
    bool GetCantBuildInSea() const { return (m_flags1 & k_Culture_CantBuildInSea_Bit) != 0; }
    bool GetCantBuildOnLand() const { return (m_flags1 & k_Culture_CantBuildOnLand_Bit) != 0; }
    bool GetCoastalBuilding() const { return (m_flags1 & k_Culture_CoastalBuilding_Bit) != 0; }
    bool GetEnablesPunativeAirstrikes() const { return (m_flags1 & k_Culture_EnablesPunativeAirstrikes_Bit) != 0; }
    bool HasIncreaseFoodAllCities() const { return (m_flags1 & k_Culture_IncreaseFoodAllCities_Bit) != 0; }
    bool GetIncreaseFoodAllCities(sint32 & value) const
    {
        if (m_flags1 & k_Culture_IncreaseFoodAllCities_Bit)
        {
            value = m_IncreaseFoodAllCitiesValue;
        }
        return (m_flags1 & k_Culture_IncreaseFoodAllCities_Bit) != 0;
    }
    bool HasTemporaryFullHappiness() const { return (m_flags1 & k_Culture_TemporaryFullHappiness_Bit) != 0; }
    bool GetTemporaryFullHappiness(sint32 & value) const
    {
        if (m_flags1 & k_Culture_TemporaryFullHappiness_Bit)
        {
            value = m_TemporaryFullHappinessValue;
        }
        return (m_flags1 & k_Culture_TemporaryFullHappiness_Bit) != 0;
    }
    bool GetRevoltingCitiesJoinPlayer() const { return (m_flags1 & k_Culture_RevoltingCitiesJoinPlayer_Bit) != 0; }
    bool GetNoPollutionUnhappiness() const { return (m_flags1 & k_Culture_NoPollutionUnhappiness_Bit) != 0; }
    bool GetEmbassiesEverywhereEvenAtWar() const { return (m_flags1 & k_Culture_EmbassiesEverywhereEvenAtWar_Bit) != 0; }
    bool HasIncreaseSpecialists() const { return (m_flags1 & k_Culture_IncreaseSpecialists_Bit) != 0; }
    bool GetIncreaseSpecialists(sint32 & value) const
    {
        if (m_flags1 & k_Culture_IncreaseSpecialists_Bit)
        {
            value = m_IncreaseSpecialistsValue;
        }
        return (m_flags1 & k_Culture_IncreaseSpecialists_Bit) != 0;
    }
    bool HasIncreaseCathedrals() const { return (m_flags1 & k_Culture_IncreaseCathedrals_Bit) != 0; }
    bool GetIncreaseCathedrals(sint32 & value) const
    {
        if (m_flags1 & k_Culture_IncreaseCathedrals_Bit)
        {
            value = m_IncreaseCathedralsValue;
        }
        return (m_flags1 & k_Culture_IncreaseCathedrals_Bit) != 0;
    }
    bool HasIncreaseBrokerages() const { return (m_flags1 & k_Culture_IncreaseBrokerages_Bit) != 0; }
    bool GetIncreaseBrokerages(sint32 & value) const
    {
        if (m_flags1 & k_Culture_IncreaseBrokerages_Bit)
        {
            value = m_IncreaseBrokeragesValue;
        }
        return (m_flags1 & k_Culture_IncreaseBrokerages_Bit) != 0;
    }
    bool HasIncreaseRegard() const { return (m_flags1 & k_Culture_IncreaseRegard_Bit) != 0; }
    bool GetIncreaseRegard(sint32 & value) const
    {
        if (m_flags1 & k_Culture_IncreaseRegard_Bit)
        {
            value = m_IncreaseRegardValue;
        }
        return (m_flags1 & k_Culture_IncreaseRegard_Bit) != 0;
    }
    bool GetPreventConversion() const { return (m_flags1 & k_Culture_PreventConversion_Bit) != 0; }
    bool GetProtectFromBarbarians() const { return (m_flags1 & k_Culture_ProtectFromBarbarians_Bit) != 0; }
    bool GetStartGaiaController() const { return (m_flags1 & k_Culture_StartGaiaController_Bit) != 0; }
    bool GetGLHidden() const { return (m_flags1 & k_Culture_GLHidden_Bit) != 0; }
    bool HasBuildingFeat() const { return (m_flags1 & k_Culture_BuildingFeat_Bit) != 0; }
    bool GetBuildingFeat(const BuildingFeat *&ptr) const
    {
        ptr = (m_flags1 & k_Culture_BuildingFeat_Bit) ? &m_BuildingFeatValue : NULL;
        return (m_flags1 & k_Culture_BuildingFeat_Bit) != 0;
    }
    const BuildingFeat * GetBuildingFeatPtr() const
    {
        return (m_flags1 & k_Culture_BuildingFeat_Bit) ? &m_BuildingFeatValue : NULL;
    }
    bool HasBuildingGold() const { return (m_flags1 & k_Culture_BuildingGold_Bit) != 0; }
    bool GetBuildingGold(const BuildingGold *&ptr) const
    {
        ptr = (m_flags1 & k_Culture_BuildingGold_Bit) ? &m_BuildingGoldValue : NULL;
        return (m_flags1 & k_Culture_BuildingGold_Bit) != 0;
    }
    const BuildingGold * GetBuildingGoldPtr() const
    {
        return (m_flags1 & k_Culture_BuildingGold_Bit) ? &m_BuildingGoldValue : NULL;
    }
    bool HasBuildingEverywhere() const { return (m_flags1 & k_Culture_BuildingEverywhere_Bit) != 0; }
    bool GetBuildingEverywhereIndex(sint32 & index) const
    {
        index = (m_flags1 & k_Culture_BuildingEverywhere_Bit) ? m_BuildingEverywhereValue : -1;
        return (m_flags1 & k_Culture_BuildingEverywhere_Bit) != 0;
    }
    bool GetBuildingEverywhere(const BuildingRecord * & rec) const;
    const BuildingRecord * GetBuildingEverywherePtr() const;
    bool HasActualBuildingEverywhere() const { return (m_flags1 & k_Culture_ActualBuildingEverywhere_Bit) != 0; }
    bool GetActualBuildingEverywhereIndex(sint32 & index) const
    {
        index = (m_flags1 & k_Culture_ActualBuildingEverywhere_Bit) ? m_ActualBuildingEverywhereValue : -1;
        return (m_flags1 & k_Culture_ActualBuildingEverywhere_Bit) != 0;
    }
    bool GetActualBuildingEverywhere(const BuildingRecord * & rec) const;
    const BuildingRecord * GetActualBuildingEverywherePtr() const;
    bool HasBuildingEffectEverywhere() const { return (m_flags1 & k_Culture_BuildingEffectEverywhere_Bit) != 0; }
    bool GetBuildingEffectEverywhereIndex(sint32 & index) const
    {
        index = (m_flags1 & k_Culture_BuildingEffectEverywhere_Bit) ? m_BuildingEffectEverywhereValue : -1;
        return (m_flags1 & k_Culture_BuildingEffectEverywhere_Bit) != 0;
    }
    bool GetBuildingEffectEverywhere(const BuildingRecord * & rec) const;
    const BuildingRecord * GetBuildingEffectEverywherePtr() const;
    bool HasConflictsWithBuilding() const { return (m_flags1 & k_Culture_ConflictsWithBuilding_Bit) != 0; }
    bool GetConflictsWithBuildingIndex(sint32 & index) const
    {
        index = (m_flags1 & k_Culture_ConflictsWithBuilding_Bit) ? m_ConflictsWithBuildingValue : -1;
        return (m_flags1 & k_Culture_ConflictsWithBuilding_Bit) != 0;
    }
    bool GetConflictsWithBuilding(const BuildingRecord * & rec) const;
    const BuildingRecord * GetConflictsWithBuildingPtr() const;
    sint32 GetBuildingAnywhereIndex(sint32 index) const;
    const BuildingRecord * GetBuildingAnywhere(sint32 index) const;
    sint32 GetNumBuildingAnywhere() const { return m_numBuildingAnywhere;}
    bool HasGoldPerBuildingAnywhere() const { return (m_flags1 & k_Culture_GoldPerBuildingAnywhere_Bit) != 0; }
    bool GetGoldPerBuildingAnywhere(sint32 & value) const
    {
        if (m_flags1 & k_Culture_GoldPerBuildingAnywhere_Bit)
        {
            value = m_GoldPerBuildingAnywhereValue;
        }
        return (m_flags1 & k_Culture_GoldPerBuildingAnywhere_Bit) != 0;
    }
    bool HasPollutionPercent() const { return (m_flags1 & k_Culture_PollutionPercent_Bit) != 0; }
    bool GetPollutionPercent(double & value) const
    {
        if (m_flags1 & k_Culture_PollutionPercent_Bit)
        {
            value = m_PollutionPercentValue;
        }
        return (m_flags1 & k_Culture_PollutionPercent_Bit) != 0;
    }
    bool HasPollutionAmount() const { return (m_flags1 & k_Culture_PollutionAmount_Bit) != 0; }
    bool GetPollutionAmount(double & value) const
    {
        if (m_flags1 & k_Culture_PollutionAmount_Bit)
        {
            value = m_PollutionAmountValue;
        }
        return (m_flags1 & k_Culture_PollutionAmount_Bit) != 0;
    }
    sint32 GetExcludedByBuildingIndex(sint32 index) const;
    const BuildingRecord * GetExcludedByBuilding(sint32 index) const;
    sint32 GetNumExcludedByBuilding() const { return m_numExcludedByBuilding;}
    sint32 GetExcludedByWonderIndex(sint32 index) const;
    const WonderRecord * GetExcludedByWonder(sint32 index) const;
    sint32 GetNumExcludedByWonder() const { return m_numExcludedByWonder;}
    bool HasEnergyHunger() const { return (m_flags2 & k_Culture_EnergyHunger_Bit) != 0; }
    bool GetEnergyHunger(sint32 & value) const
    {
        if (m_flags2 & k_Culture_EnergyHunger_Bit)
        {
            value = m_EnergyHungerValue;
        }
        return (m_flags2 & k_Culture_EnergyHunger_Bit) != 0;
    }
    bool HasProducesEnergy() const { return (m_flags2 & k_Culture_ProducesEnergy_Bit) != 0; }
    bool GetProducesEnergy(sint32 & value) const
    {
        if (m_flags2 & k_Culture_ProducesEnergy_Bit)
        {
            value = m_ProducesEnergyValue;
        }
        return (m_flags2 & k_Culture_ProducesEnergy_Bit) != 0;
    }
    bool HasEnergyHungerPerPop() const { return (m_flags2 & k_Culture_EnergyHungerPerPop_Bit) != 0; }
    bool GetEnergyHungerPerPop(sint32 & value) const
    {
        if (m_flags2 & k_Culture_EnergyHungerPerPop_Bit)
        {
            value = m_EnergyHungerPerPopValue;
        }
        return (m_flags2 & k_Culture_EnergyHungerPerPop_Bit) != 0;
    }
    bool HasProducesEnergyPerPop() const { return (m_flags2 & k_Culture_ProducesEnergyPerPop_Bit) != 0; }
    bool GetProducesEnergyPerPop(sint32 & value) const
    {
        if (m_flags2 & k_Culture_ProducesEnergyPerPop_Bit)
        {
            value = m_ProducesEnergyPerPopValue;
        }
        return (m_flags2 & k_Culture_ProducesEnergyPerPop_Bit) != 0;
    }
    bool HasTooManyCitiesThresholdModifier() const { return (m_flags2 & k_Culture_TooManyCitiesThresholdModifier_Bit) != 0; }
    bool GetTooManyCitiesThresholdModifier(sint32 & value) const
    {
        if (m_flags2 & k_Culture_TooManyCitiesThresholdModifier_Bit)
        {
            value = m_TooManyCitiesThresholdModifierValue;
        }
        return (m_flags2 & k_Culture_TooManyCitiesThresholdModifier_Bit) != 0;
    }
    bool HasTooManyCitiesCoefficientModifier() const { return (m_flags2 & k_Culture_TooManyCitiesCoefficientModifier_Bit) != 0; }
    bool GetTooManyCitiesCoefficientModifier(double & value) const
    {
        if (m_flags2 & k_Culture_TooManyCitiesCoefficientModifier_Bit)
        {
            value = m_TooManyCitiesCoefficientModifierValue;
        }
        return (m_flags2 & k_Culture_TooManyCitiesCoefficientModifier_Bit) != 0;
    }
    bool HasRiotLevelModifier() const { return (m_flags2 & k_Culture_RiotLevelModifier_Bit) != 0; }
    bool GetRiotLevelModifier(sint32 & value) const
    {
        if (m_flags2 & k_Culture_RiotLevelModifier_Bit)
        {
            value = m_RiotLevelModifierValue;
        }
        return (m_flags2 & k_Culture_RiotLevelModifier_Bit) != 0;
    }
    bool HasOtherPlayerRiotLevelModifier() const { return (m_flags2 & k_Culture_OtherPlayerRiotLevelModifier_Bit) != 0; }
    bool GetOtherPlayerRiotLevelModifier(sint32 & value) const
    {
        if (m_flags2 & k_Culture_OtherPlayerRiotLevelModifier_Bit)
        {
            value = m_OtherPlayerRiotLevelModifierValue;
        }
        return (m_flags2 & k_Culture_OtherPlayerRiotLevelModifier_Bit) != 0;
    }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* CultureRecord */

struct CultureRecordAccessorInfo
{
    CultureRecord::IntAccessor        m_intAccessor;
    CultureRecord::BoolAccessor       m_boolAccessor;
    CultureRecord::FloatAccessor      m_floatAccessor;
    CultureRecord::BitIntAccessor     m_bitIntAccessor;
    CultureRecord::BitFloatAccessor   m_bitFloatAccessor;
    CultureRecord::IntArrayAccessor   m_intArrayAccessor;
    CultureRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern CultureRecordAccessorInfo      g_CultureRecord_Accessors[];
extern CTPDatabase<CultureRecord> *   g_theCultureDB;

extern const char * g_Culture_Tokens[];

#endif
