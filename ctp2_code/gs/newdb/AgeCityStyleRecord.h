
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef AGECITYSTYLE_RECORD_H__
#define AGECITYSTYLE_RECORD_H__

class AgeCityStyleRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;

#define k_Num_AgeCityStyleRecord_Tokens 10


class AgeCityStyleRecord : public CTPRecord
{
public:
    typedef sint32 (AgeCityStyleRecord::*IntAccessor)() const;
    typedef bool   (AgeCityStyleRecord::*BoolAccessor)() const;
    typedef double (AgeCityStyleRecord::*FloatAccessor)() const ;
    typedef bool   (AgeCityStyleRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (AgeCityStyleRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (AgeCityStyleRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (AgeCityStyleRecord::*FloatArrayAccessor)(sint32 index) const;

    class SizeSprite {
    private:
        sint32            m_Type;
        sint32            m_MinSize;
        sint32            m_MaxSize;
        sint32            m_Sprite;
        sint32            m_Walls;
        sint32            m_ForceField;

    public:
        SizeSprite();
        SizeSprite(CivArchive & archive){ Serialize(archive); };
        ~SizeSprite();
        SizeSprite const & operator = (SizeSprite const & rval);
        bool operator == (SizeSprite const & rval) {
          return false;
        }

        void Serialize(CivArchive &archive);
        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        sint32 ParseFullySequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, SizeSprite **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, SizeSprite *array, sint32 *numElements, sint32 maxSize);
        static sint32 ParseInArraySequential(DBLexer *lex, SizeSprite **array, sint32 *numElements);
        static sint32 ParseInArraySequential(DBLexer *lex, SizeSprite *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();

        sint32 GetType() const { return m_Type; }
        sint32 GetMinSize() const { return m_MinSize; }
        sint32 GetMaxSize() const { return m_MaxSize; }
        sint32 GetSprite() const { return m_Sprite; }
        sint32 GetWalls() const { return m_Walls; }
        sint32 GetForceField() const { return m_ForceField; }

    }; /* class SizeSprite */

private:
    SizeSprite      * m_Sprites;
    sint32            m_numSprites;
    sint32            m_HappyInc;
    double            m_ProductionPercent;
    double            m_FoodPercent;
    double            m_CommercePercent;
    double            m_SciencePercent;
    sint32            m_BonusGold;
    sint32            m_BonusFood;
    sint32            m_BonusProduction;
    sint32            m_BonusScience;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    AgeCityStyleRecord() { Init(); };
    AgeCityStyleRecord(CivArchive &archive) { Serialize(archive); };
    AgeCityStyleRecord(AgeCityStyleRecord const & rval) { Init(); *this = rval; }
    ~AgeCityStyleRecord();
    AgeCityStyleRecord const & operator = (AgeCityStyleRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const AgeCityStyleRecord & rval);

    const SizeSprite * GetSprites(sint32 index) const;
    sint32 GetNumSprites() const { return m_numSprites;}
    sint32 GetHappyInc() const { return m_HappyInc; }
    double GetProductionPercent() const { return m_ProductionPercent; }
    double GetFoodPercent() const { return m_FoodPercent; }
    double GetCommercePercent() const { return m_CommercePercent; }
    double GetSciencePercent() const { return m_SciencePercent; }
    sint32 GetBonusGold() const { return m_BonusGold; }
    sint32 GetBonusFood() const { return m_BonusFood; }
    sint32 GetBonusProduction() const { return m_BonusProduction; }
    sint32 GetBonusScience() const { return m_BonusScience; }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* AgeCityStyleRecord */

struct AgeCityStyleRecordAccessorInfo
{
    AgeCityStyleRecord::IntAccessor        m_intAccessor;
    AgeCityStyleRecord::BoolAccessor       m_boolAccessor;
    AgeCityStyleRecord::FloatAccessor      m_floatAccessor;
    AgeCityStyleRecord::BitIntAccessor     m_bitIntAccessor;
    AgeCityStyleRecord::BitFloatAccessor   m_bitFloatAccessor;
    AgeCityStyleRecord::IntArrayAccessor   m_intArrayAccessor;
    AgeCityStyleRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern AgeCityStyleRecordAccessorInfo      g_AgeCityStyleRecord_Accessors[];
extern CTPDatabase<AgeCityStyleRecord> *   g_theAgeCityStyleDB;

extern const char * g_AgeCityStyle_Tokens[];

#endif
