
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef LEADER_RECORD_H__
#define LEADER_RECORD_H__

class LeaderRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class PersonalityRecord;

#define k_Num_LeaderRecord_Tokens 46

//
// m_flags0: Leader
#define k_Leader_IsMale_Bit                      0x00000001
#define k_Leader_IsFemale_Bit                    0x00000002
#define k_Leader_OffenseBonusLand_Bit            0x00000004
#define k_Leader_OffenseBonusWater_Bit           0x00000008
#define k_Leader_OffenseBonusAir_Bit             0x00000010
#define k_Leader_LowerCrime_Bit                  0x00000020
#define k_Leader_LowerPeaceMovement_Bit          0x00000040
#define k_Leader_GoldPerCitizen_Bit              0x00000080
#define k_Leader_SciencePerPop_Bit               0x00000100
#define k_Leader_ReduceReadinessCost_Bit         0x00000200
#define k_Leader_GoldPerWaterTradeRoute_Bit      0x00000400
#define k_Leader_GoldPerTelevision_Bit           0x00000800
#define k_Leader_GoldPerInternationalTradeRoute_Bit 0x00001000
#define k_Leader_AllBoatsDeepWater_Bit           0x00002000
#define k_Leader_DecreaseMaintenance_Bit         0x00004000
#define k_Leader_PreventConversion_Bit           0x00008000
#define k_Leader_ProtectFromBarbarians_Bit       0x00010000
#define k_Leader_PollutionPercent_Bit            0x00020000
#define k_Leader_PollutionAmount_Bit             0x00040000

class LeaderRecord : public CTPRecord
{
public:
    typedef sint32 (LeaderRecord::*IntAccessor)() const;
    typedef bool   (LeaderRecord::*BoolAccessor)() const;
    typedef double (LeaderRecord::*FloatAccessor)() const ;
    typedef bool   (LeaderRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (LeaderRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (LeaderRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (LeaderRecord::*FloatArrayAccessor)(sint32 index) const;

private:
    uint32 m_flags0;
    sint32            m_LeaderName;
    sint32            m_EmissaryPhoto;
    sint32            m_PersonalityDescription;
    sint32            m_Personality; // Index into Personality database
    sint32            m_Parchment;
    sint32            m_Capital;
    sint32            m_HappyInc;
    sint32            m_ProductionBonus;
    sint32            m_FoodBonus;
    sint32            m_CommerceBonus;
    sint32            m_ScienceBonus;
    sint32            m_IncreaseBoatMovement;
    sint32            m_IncreaseHp;
    double            m_OffenseBonusLandValue;
    double            m_OffenseBonusWaterValue;
    double            m_OffenseBonusAirValue;
    double            m_LowerCrimeValue;
    double            m_LowerPeaceMovementValue;
    sint32            m_GoldPerCitizenValue;
    double            m_SciencePerPopValue;
    sint32            m_ReduceReadinessCostValue;
    sint32            m_GoldPerWaterTradeRouteValue;
    sint32            m_GoldPerTelevisionValue;
    sint32            m_GoldPerInternationalTradeRouteValue;
    sint32            m_DecreaseMaintenanceValue;
    double            m_PollutionPercentValue;
    double            m_PollutionAmountValue;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    LeaderRecord() { Init(); };
    LeaderRecord(CivArchive &archive) { Serialize(archive); };
    LeaderRecord(LeaderRecord const & rval) { Init(); *this = rval; }
    ~LeaderRecord();
    LeaderRecord const & operator = (LeaderRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const LeaderRecord & rval);

    sint32 GetLeaderName() const { return m_LeaderName; }
    sint32 GetEmissaryPhoto() const { return m_EmissaryPhoto; }
    sint32 GetPersonalityDescription() const { return m_PersonalityDescription; }
    sint32           GetPersonalityIndex() const { return m_Personality; }
    PersonalityRecord const * GetPersonality() const;
    sint32 GetParchment() const { return m_Parchment; }
    sint32 GetCapital() const { return m_Capital; }
    bool GetIsMale() const { return (m_flags0 & k_Leader_IsMale_Bit) != 0; }
    bool GetIsFemale() const { return (m_flags0 & k_Leader_IsFemale_Bit) != 0; }
    sint32 GetHappyInc() const { return m_HappyInc; }
    sint32 GetProductionBonus() const { return m_ProductionBonus; }
    sint32 GetFoodBonus() const { return m_FoodBonus; }
    sint32 GetCommerceBonus() const { return m_CommerceBonus; }
    sint32 GetScienceBonus() const { return m_ScienceBonus; }
    sint32 GetIncreaseBoatMovement() const { return m_IncreaseBoatMovement; }
    sint32 GetIncreaseHp() const { return m_IncreaseHp; }
    bool HasOffenseBonusLand() const { return (m_flags0 & k_Leader_OffenseBonusLand_Bit) != 0; }
    bool GetOffenseBonusLand(double & value) const
    {
        if (m_flags0 & k_Leader_OffenseBonusLand_Bit)
        {
            value = m_OffenseBonusLandValue;
        }
        return (m_flags0 & k_Leader_OffenseBonusLand_Bit) != 0;
    }
    bool HasOffenseBonusWater() const { return (m_flags0 & k_Leader_OffenseBonusWater_Bit) != 0; }
    bool GetOffenseBonusWater(double & value) const
    {
        if (m_flags0 & k_Leader_OffenseBonusWater_Bit)
        {
            value = m_OffenseBonusWaterValue;
        }
        return (m_flags0 & k_Leader_OffenseBonusWater_Bit) != 0;
    }
    bool HasOffenseBonusAir() const { return (m_flags0 & k_Leader_OffenseBonusAir_Bit) != 0; }
    bool GetOffenseBonusAir(double & value) const
    {
        if (m_flags0 & k_Leader_OffenseBonusAir_Bit)
        {
            value = m_OffenseBonusAirValue;
        }
        return (m_flags0 & k_Leader_OffenseBonusAir_Bit) != 0;
    }
    bool HasLowerCrime() const { return (m_flags0 & k_Leader_LowerCrime_Bit) != 0; }
    bool GetLowerCrime(double & value) const
    {
        if (m_flags0 & k_Leader_LowerCrime_Bit)
        {
            value = m_LowerCrimeValue;
        }
        return (m_flags0 & k_Leader_LowerCrime_Bit) != 0;
    }
    bool HasLowerPeaceMovement() const { return (m_flags0 & k_Leader_LowerPeaceMovement_Bit) != 0; }
    bool GetLowerPeaceMovement(double & value) const
    {
        if (m_flags0 & k_Leader_LowerPeaceMovement_Bit)
        {
            value = m_LowerPeaceMovementValue;
        }
        return (m_flags0 & k_Leader_LowerPeaceMovement_Bit) != 0;
    }
    bool HasGoldPerCitizen() const { return (m_flags0 & k_Leader_GoldPerCitizen_Bit) != 0; }
    bool GetGoldPerCitizen(sint32 & value) const
    {
        if (m_flags0 & k_Leader_GoldPerCitizen_Bit)
        {
            value = m_GoldPerCitizenValue;
        }
        return (m_flags0 & k_Leader_GoldPerCitizen_Bit) != 0;
    }
    bool HasSciencePerPop() const { return (m_flags0 & k_Leader_SciencePerPop_Bit) != 0; }
    bool GetSciencePerPop(double & value) const
    {
        if (m_flags0 & k_Leader_SciencePerPop_Bit)
        {
            value = m_SciencePerPopValue;
        }
        return (m_flags0 & k_Leader_SciencePerPop_Bit) != 0;
    }
    bool HasReduceReadinessCost() const { return (m_flags0 & k_Leader_ReduceReadinessCost_Bit) != 0; }
    bool GetReduceReadinessCost(sint32 & value) const
    {
        if (m_flags0 & k_Leader_ReduceReadinessCost_Bit)
        {
            value = m_ReduceReadinessCostValue;
        }
        return (m_flags0 & k_Leader_ReduceReadinessCost_Bit) != 0;
    }
    bool HasGoldPerWaterTradeRoute() const { return (m_flags0 & k_Leader_GoldPerWaterTradeRoute_Bit) != 0; }
    bool GetGoldPerWaterTradeRoute(sint32 & value) const
    {
        if (m_flags0 & k_Leader_GoldPerWaterTradeRoute_Bit)
        {
            value = m_GoldPerWaterTradeRouteValue;
        }
        return (m_flags0 & k_Leader_GoldPerWaterTradeRoute_Bit) != 0;
    }
    bool HasGoldPerTelevision() const { return (m_flags0 & k_Leader_GoldPerTelevision_Bit) != 0; }
    bool GetGoldPerTelevision(sint32 & value) const
    {
        if (m_flags0 & k_Leader_GoldPerTelevision_Bit)
        {
            value = m_GoldPerTelevisionValue;
        }
        return (m_flags0 & k_Leader_GoldPerTelevision_Bit) != 0;
    }
    bool HasGoldPerInternationalTradeRoute() const { return (m_flags0 & k_Leader_GoldPerInternationalTradeRoute_Bit) != 0; }
    bool GetGoldPerInternationalTradeRoute(sint32 & value) const
    {
        if (m_flags0 & k_Leader_GoldPerInternationalTradeRoute_Bit)
        {
            value = m_GoldPerInternationalTradeRouteValue;
        }
        return (m_flags0 & k_Leader_GoldPerInternationalTradeRoute_Bit) != 0;
    }
    bool GetAllBoatsDeepWater() const { return (m_flags0 & k_Leader_AllBoatsDeepWater_Bit) != 0; }
    bool HasDecreaseMaintenance() const { return (m_flags0 & k_Leader_DecreaseMaintenance_Bit) != 0; }
    bool GetDecreaseMaintenance(sint32 & value) const
    {
        if (m_flags0 & k_Leader_DecreaseMaintenance_Bit)
        {
            value = m_DecreaseMaintenanceValue;
        }
        return (m_flags0 & k_Leader_DecreaseMaintenance_Bit) != 0;
    }
    bool GetPreventConversion() const { return (m_flags0 & k_Leader_PreventConversion_Bit) != 0; }
    bool GetProtectFromBarbarians() const { return (m_flags0 & k_Leader_ProtectFromBarbarians_Bit) != 0; }
    bool HasPollutionPercent() const { return (m_flags0 & k_Leader_PollutionPercent_Bit) != 0; }
    bool GetPollutionPercent(double & value) const
    {
        if (m_flags0 & k_Leader_PollutionPercent_Bit)
        {
            value = m_PollutionPercentValue;
        }
        return (m_flags0 & k_Leader_PollutionPercent_Bit) != 0;
    }
    bool HasPollutionAmount() const { return (m_flags0 & k_Leader_PollutionAmount_Bit) != 0; }
    bool GetPollutionAmount(double & value) const
    {
        if (m_flags0 & k_Leader_PollutionAmount_Bit)
        {
            value = m_PollutionAmountValue;
        }
        return (m_flags0 & k_Leader_PollutionAmount_Bit) != 0;
    }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* LeaderRecord */

struct LeaderRecordAccessorInfo
{
    LeaderRecord::IntAccessor        m_intAccessor;
    LeaderRecord::BoolAccessor       m_boolAccessor;
    LeaderRecord::FloatAccessor      m_floatAccessor;
    LeaderRecord::BitIntAccessor     m_bitIntAccessor;
    LeaderRecord::BitFloatAccessor   m_bitFloatAccessor;
    LeaderRecord::IntArrayAccessor   m_intArrayAccessor;
    LeaderRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern LeaderRecordAccessorInfo      g_LeaderRecord_Accessors[];
extern CTPDatabase<LeaderRecord> *   g_theLeaderDB;

extern const char * g_Leader_Tokens[];

#endif
