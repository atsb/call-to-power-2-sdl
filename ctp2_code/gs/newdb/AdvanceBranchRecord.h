
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef ADVANCEBRANCH_RECORD_H__
#define ADVANCEBRANCH_RECORD_H__

class AdvanceBranchRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;

#define k_Num_AdvanceBranchRecord_Tokens 2


class AdvanceBranchRecord : public CTPRecord
{
public:
    typedef sint32 (AdvanceBranchRecord::*IntAccessor)() const;
    typedef bool   (AdvanceBranchRecord::*BoolAccessor)() const;
    typedef double (AdvanceBranchRecord::*FloatAccessor)() const ;
    typedef bool   (AdvanceBranchRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (AdvanceBranchRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (AdvanceBranchRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (AdvanceBranchRecord::*FloatArrayAccessor)(sint32 index) const;

private:
    sint32            m_Value;
    char *            m_NameText;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    AdvanceBranchRecord() { Init(); };
    AdvanceBranchRecord(CivArchive &archive) { Serialize(archive); };
    AdvanceBranchRecord(AdvanceBranchRecord const & rval) { Init(); *this = rval; }
    ~AdvanceBranchRecord();
    AdvanceBranchRecord const & operator = (AdvanceBranchRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const AdvanceBranchRecord & rval);

    sint32 GetValue() const { return m_Value; }
    char const * GetNameText() const { return m_NameText; }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* AdvanceBranchRecord */

struct AdvanceBranchRecordAccessorInfo
{
    AdvanceBranchRecord::IntAccessor        m_intAccessor;
    AdvanceBranchRecord::BoolAccessor       m_boolAccessor;
    AdvanceBranchRecord::FloatAccessor      m_floatAccessor;
    AdvanceBranchRecord::BitIntAccessor     m_bitIntAccessor;
    AdvanceBranchRecord::BitFloatAccessor   m_bitFloatAccessor;
    AdvanceBranchRecord::IntArrayAccessor   m_intArrayAccessor;
    AdvanceBranchRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern AdvanceBranchRecordAccessorInfo      g_AdvanceBranchRecord_Accessors[];
extern CTPDatabase<AdvanceBranchRecord> *   g_theAdvanceBranchDB;

extern const char * g_AdvanceBranch_Tokens[];

#endif
