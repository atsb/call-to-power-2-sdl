
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#include "c3.h"
#include "ConstRecord.h"

#include <algorithm>
#include "BitArray.h"
#include "c3errors.h"
#include "CTPDatabase.h"
#include "DBLexer.h"
#include "DBTokens.h"
#include "StrDB.h"


CTPDatabase<ConstRecord> *g_theConstDB = NULL;

void ConstRecord::Init()
{
    m_PercentLand = 0;
    m_PercentContinent = 0;
    m_PercentHomogenious = 0;
    m_MeridianA = 0;
    m_MeridianB = 0;
    m_MeridianC = 0;
    m_MeridianD = 0;
    m_MeridianE = 0;
    m_MeridianF = 0;
    m_HLevelA = 0;
    m_HLevelB = 0;
    m_HLevelC = 0;
    m_HLevelD = 0;
    m_ForestWet = 0;
    m_GrassWet = 0;
    m_PlainsWet = 0;
    m_DesertWet = 0;
    m_ForestDry = 0;
    m_GrassDry = 0;
    m_PlainsDry = 0;
    m_DesertDry = 0;
    m_WhiteWarm = 0;
    m_BrownWarm = 0;
    m_TemperatureRangeAdjustWarm = 0;
    m_WhiteCold = 0;
    m_BrownCold = 0;
    m_TemperatureRangeAdjustCold = 0;
    m_RichnessFewGoods = 0;
    m_RiverCellWidthFewGoods = 0;
    m_RiverCellHeightFewGoods = 0;
    m_RichnessManyGoods = 0;
    m_RiverCellWidthManyGoods = 0;
    m_RiverCellHeightManyGoods = 0;
    m_PercentMountain = 0;
    m_MountainCell = 0;
    m_PercentHills = 0;
    m_MountainSpread = 0;
    m_MountainLength = 0;
    m_GlacierExtend = 0;
    m_PercentVolcano = 0;
    m_PercentTrench = 0;
    m_PercentForest = 0;
    m_PercentGras = 0;
    m_PercentPlains = 0;
    m_PercentDesert = 0;
    m_PercentWhite = 0;
    m_PercentBrown = 0;
    m_TemperatureRangeAdjust = 0;
    m_NiceRadius = 0;
    m_PercentRiver = 0;
    m_RiverLength = 0;
    m_RiverCellWidth = 0;
    m_RiverCellHeight = 0;
    m_Richness = 0;
    m_ChanceLostAtSea = 0;
    m_VeteranCoef = 0;
    m_RevolutionLevel = 0;
    m_DiscoveriesPollutionSizeModifier = 0.000000;
    m_DiscoveriesPollutionProductionModifier = 0.000000;
    m_AveragePollutionTurns = 0;
    m_PopulationProducesPollutionThreshold = 0;
    m_ProductionProducesPollutionThreshold = 0;
    m_MaxEmpireDistCost = 0.000000;
    m_HappinessLaunchCost = 0.000000;
    m_UnitWorkday = 0.000000;
    m_BaseWorkday = 0.000000;
    m_UnitWages = 0.000000;
    m_BaseWages = 0.000000;
    m_UnitRations = 0.000000;
    m_BaseRations = 0.000000;
    m_ChangeCurrentlyBuildingItemPenalty = 0;
    m_TariffReduction = 0;
    m_RevoltInfluenceDistance = 0;
    m_PactCaptureCityExpires = 0;
    m_RewardCaptureCityExpires = 10;
    m_CeaseFireExpires = 0;
    m_ShortCeaseFireExpires = 0;
    m_EndOfGameYearEarlyWarning = 0;
    m_EndOfGameYear = 0;
    m_CaptureCityForGoldMultiplyer = 0;
    m_PactEndPollutionExpires = 0;
    m_LeaveOurLandsExpires = 0;
    m_ReducePollutionExpires = 0;
    m_DestroyEnemyForRewardExpires = 10;
    m_PatienceLostPerRequest = 0;
    m_PatienceRegainedPerRound = 0;
    m_RegainPatienceProbability = 0;
    m_PatienceLostThreshold = 0;
    m_AIGoalTimeSlice = 0;
    m_AIMaxTimeSlice = 0;
    m_AITotalTimeSlice = 0;
    m_EntrenchmentBonus = 0.000000;
    m_ParadropDistance = 0;
    m_ParadropSuccessPercent = 0;
    m_EliteSpyBonus = 0.000000;
    m_CitySecondAttemptSpyBonus = 0.000000;
    m_AssasinationHappinessEffect = 0;
    m_AssasinationHappinessEffectTimer = 0;
    m_SpiedUponWarinessTimer = 0;
    m_MaxPartyCost = 0;
    m_MaxPartyChance = 0.000000;
    m_GossipMapRadius = 0;
    m_HearGossipChance = 0.000000;
    m_FranchiseEffect = 0.000000;
    m_TurnsFranchised = -1;
    m_TurnsToSueFranchise = 0;
    m_SlaverEliteChance = 0.000000;
    m_EliteSlaverBonus = 0.000000;
    m_AbolitionistEliteChance = 0.000000;
    m_EliteAbolitionistBonus = 0.000000;
    m_WatchfulCitySuccessModifier = 0.000000;
    m_WatchfulCityDeathModifier = 0.000000;
    m_WatchfulCityTurns = 0;
    m_BioInfectionTurns = 0;
    m_NanoInfectionTurns = 0;
    m_BioInfectionSpreadChance = 0.000000;
    m_NanoInfectionSpreadChance = 0.000000;
    m_PlagueKillPercentage = 0.000000;
    m_EliteTerroristBonus = 0.000000;
    m_TerroistEliteChance = 0.000000;
    m_NukePopulationPercentage = 0.000000;
    m_SpecialActionMoveCost = 0.000000;
    m_ClericConversionFactor = 0.000000;
    m_TelevangelistConversionFactor = 0.000000;
    m_ReformationChance = 0.000000;
    m_ReformationDeathChance = 0.000000;
    m_ReformationHappinessTime = 0;
    m_ReformationHappinessAmount = 0;
    m_UnconvertedIndulgenceGold = 0;
    m_UnconvertedIndulgenceHappiness = 0;
    m_ConvertedIndulgenceGold = 0;
    m_ConvertedIndulgenceHappiness = 0;
    m_OtherFaithIndulgenceGold = 0;
    m_OtherFaithIndulgenceHappiness = 0;
    m_SoothsayHappyAmount = 0;
    m_RuinsBoxWidth = 0;
    m_RuinsBoxHeight = 0;
    m_RuinsChancePerBox = 0.000000;
    m_MaxRuinsGold = 0;
    m_MaxRuinsAdvance = 0;
    m_MaxRuinsUnit = 0;
    m_UnitRushModifier = 0;
    m_BuildingRushModifier = 0;
    m_WonderRushModifier = 0;
    m_BuildingProductionToValueModifier = 0.000000;
    m_MonopolyThreshold = 0;
    m_PopulationPollutionWarningThreshold = 0;
    m_IndustrialPollutionWarningThreshold = 0;
    m_VeryHappyThreshold = 0;
    m_CityGrowthCoefficient = 0;
    m_RiotLevel = 0;
    m_PowerPointsToMaterials = 0;
    m_MaxAirliftStackSize = 0;
    m_GoldFromPiracy = 0;
    m_NoPiracyExpires = 0;
    m_SpaceLaunchCost = 0;
    m_SpaceLandCost = 0;
    m_WormholeOrbitHeightPercentage = 0;
    m_WormholeSpeed = 0;
    m_WormholeReturnTime = 0;
    m_WormholeVisibleToAllTurns = 0;
    m_MaxGovernmentChangeTurns = 0;
    m_PollutionForcesAnarchy = 0;
    m_FoodToPollutionCoef = 0.000000;
    m_EmancipationUnhappinessTurns = 0;
    m_EmancipationUnhappinessAmount = 0;
    m_CaptureCityAdvanceChance = 0.000000;
    m_CityHealRate = 0.000000;
    m_NormalHealRate = 0.000000;
    m_LocalPollutionLevel = 0;
    m_LocalPollutionChance = 0.000000;
    m_AssaultDestroyBuildingChance = 0.000000;
    m_BombardDestroyBuildingChance = 0.000000;
    m_AdvanceChoicesMin = 0;
    m_AdvanceChoicesMax = 0;
    m_AttackConverterUnhappinessTurns = 0;
    m_AttackConverterUnhappinessAmount = 0.000000;
    m_MinStartDistanceCoefficient = 0.000000;
    m_MaxStartDistanceCoefficient = 0.000000;
    m_MaxSameTiles = 0;
    m_CombatVeteranChance = 0.000000;
    m_StopTradeRounds = 0;
    m_LeaveOurLandsRounds = 0;
    m_ReducePollutionRounds = 0;
    m_CaptureCityRounds = 0;
    m_EndPollutionRounds = 0;
    m_AttackEnemyRounds = 0;
    m_MinContinentStartSize = 0;
    m_BombardKillPopChance = 0.000000;
    m_AssaultKillPopChance = 0.000000;
    m_CaptureKillPopChance = 0.000000;
    m_ScaledPopAncient = 0;
    m_ScaledPopRenaissance = 0;
    m_ScaledPopModern = 0;
    m_ScaledPopGenetic = 0;
    m_ScaledPopDiamond = 0;
    m_PiracyKillsTraderChance = 0;
    m_UprisingChancePerUnguardedSlave = 0;
    m_MaxDisbandSize = 0;
    m_MaxRequestsPerPlayerPerTurn = 0;
    m_SlavesPerMilitaryUnit = 0;
    m_MinAbsoluteStartDistance = 0;
    memset(m_MapSizeSmall, 0, sizeof(m_MapSizeSmall));
    m_numMapSizeSmall = 0;
    memset(m_MapSizeMedium, 0, sizeof(m_MapSizeMedium));
    m_numMapSizeMedium = 0;
    memset(m_MapSizeLarge, 0, sizeof(m_MapSizeLarge));
    m_numMapSizeLarge = 0;
    memset(m_MapSizeGigantic, 0, sizeof(m_MapSizeGigantic));
    m_numMapSizeGigantic = 0;
    m_RailLaunchPollution = 0;
    m_SpaceFuelCost = 0;
    m_NonSpaceFuelCost = 0;
    m_StarvationWarningFudgeFactor = 0;
    m_MaintenanceWarningFudgeFactor = 0;
    m_SupportWarningFudgeFactor = 0;
    m_RelativeAIProductionCheatCoef = 0.000000;
    m_RelativeAIScienceCheatCoef = 0.000000;
    m_NukeKillsTiles = 0;
    m_InciteRevolutionGoldCoefficient = 0.000000;
    m_InciteRevolutionCapitolPenalty = 0.000000;
    m_InciteUprisingGoldCoefficient = 0.000000;
    m_InciteUprisingCapitolPenalty = 0.000000;
    m_BioInfectionUnhappiness = 0;
    m_MinEcoPactViolationLevel = 0;
    m_NanoInfectionTerroristDeathChance = 0.000000;
    m_BioInfectionTerroristDeathChance = 0.000000;
    m_FloodChangesCoastToWaterChance = 0.000000;
    m_AICheatEcoPactMin = 0;
    m_AICheatEcoPactMax = 0;
    m_MaxAbsoluteGrowthRate = 0;
    m_TradeDistanceCoefficient = 0.000000;
    m_MinLikeTilesForGood = 0;
    m_MinGoodValue = 0.000000;
    m_MaxGoodValue = 0.000000;
    m_PiracyWasteCoefficient = 0.000000;
    m_BorderIntRadius = 0;
    m_BorderSquaredRadius = 0;
    m_BioInfectionProductionCoef = 0.000000;
    m_NanoBuildingKillPercentage = 0.000000;
    m_BaseStarvationProtection = 0;
    m_CaravanCoef = 0.000000;
    m_DomesticTradeReduction = 0.500000;
    m_TradePactCoef = 1.050000;
    m_PollutionCausedByNuke = 0;
    m_MaxMatchListCycles = 6;
    m_MinTurnsBetweenRevolts = 1;
    m_MaxCityWonders = 100;
    m_MaxCityBuildings = 100;
    m_CapturedCityKillPop = 1;
    m_CombatEliteChance = 0.050000;
    m_CombatLeaderChance = 0.010000;
    m_CityOnTradeRouteCoeff = 0.300000;
    m_CityExpansionDenominator = 0;
    m_TurnsAcceptedForOnePop = 30;
    m_UseBaseMoveCostsForRoads = 0;
    m_RoadAlreadyThereCostsCoefficient = 0.500000;
    m_BuildRoadsToClosestCities = 5;
    m_BaseRoadPriorityVsThreatRank = 0.500000;
    m_CosiderNumCitiesForSlaves = 5;
    m_SmallCityImproveCoeff = 1.000000;
    //GovMod Specific flag initialization
    m_hasGovernmentsModified = false;
}

void ConstRecord::Serialize(CivArchive &archive)
{
    if(archive.IsStoring()) {
        archive << m_index;
        if(m_name >= 0){
            archive << GetIDText();
        }
        else{
            archive << static_cast<MBCHAR*>(NULL);
        }
        archive << m_PercentLand;
        archive << m_PercentContinent;
        archive << m_PercentHomogenious;
        archive << m_MeridianA;
        archive << m_MeridianB;
        archive << m_MeridianC;
        archive << m_MeridianD;
        archive << m_MeridianE;
        archive << m_MeridianF;
        archive << m_HLevelA;
        archive << m_HLevelB;
        archive << m_HLevelC;
        archive << m_HLevelD;
        archive << m_ForestWet;
        archive << m_GrassWet;
        archive << m_PlainsWet;
        archive << m_DesertWet;
        archive << m_ForestDry;
        archive << m_GrassDry;
        archive << m_PlainsDry;
        archive << m_DesertDry;
        archive << m_WhiteWarm;
        archive << m_BrownWarm;
        archive << m_TemperatureRangeAdjustWarm;
        archive << m_WhiteCold;
        archive << m_BrownCold;
        archive << m_TemperatureRangeAdjustCold;
        archive << m_RichnessFewGoods;
        archive << m_RiverCellWidthFewGoods;
        archive << m_RiverCellHeightFewGoods;
        archive << m_RichnessManyGoods;
        archive << m_RiverCellWidthManyGoods;
        archive << m_RiverCellHeightManyGoods;
        archive << m_PercentMountain;
        archive << m_MountainCell;
        archive << m_PercentHills;
        archive << m_MountainSpread;
        archive << m_MountainLength;
        archive << m_GlacierExtend;
        archive << m_PercentVolcano;
        archive << m_PercentTrench;
        archive << m_PercentForest;
        archive << m_PercentGras;
        archive << m_PercentPlains;
        archive << m_PercentDesert;
        archive << m_PercentWhite;
        archive << m_PercentBrown;
        archive << m_TemperatureRangeAdjust;
        archive << m_NiceRadius;
        archive << m_PercentRiver;
        archive << m_RiverLength;
        archive << m_RiverCellWidth;
        archive << m_RiverCellHeight;
        archive << m_Richness;
        archive << m_ChanceLostAtSea;
        archive << m_VeteranCoef;
        archive << m_RevolutionLevel;
        archive << m_DiscoveriesPollutionSizeModifier;
        archive << m_DiscoveriesPollutionProductionModifier;
        archive << m_AveragePollutionTurns;
        archive << m_PopulationProducesPollutionThreshold;
        archive << m_ProductionProducesPollutionThreshold;
        archive << m_MaxEmpireDistCost;
        archive << m_HappinessLaunchCost;
        archive << m_UnitWorkday;
        archive << m_BaseWorkday;
        archive << m_UnitWages;
        archive << m_BaseWages;
        archive << m_UnitRations;
        archive << m_BaseRations;
        archive << m_ChangeCurrentlyBuildingItemPenalty;
        archive << m_TariffReduction;
        archive << m_RevoltInfluenceDistance;
        archive << m_PactCaptureCityExpires;
        archive << m_RewardCaptureCityExpires;
        archive << m_CeaseFireExpires;
        archive << m_ShortCeaseFireExpires;
        archive << m_EndOfGameYearEarlyWarning;
        archive << m_EndOfGameYear;
        archive << m_CaptureCityForGoldMultiplyer;
        archive << m_PactEndPollutionExpires;
        archive << m_LeaveOurLandsExpires;
        archive << m_ReducePollutionExpires;
        archive << m_DestroyEnemyForRewardExpires;
        archive << m_PatienceLostPerRequest;
        archive << m_PatienceRegainedPerRound;
        archive << m_RegainPatienceProbability;
        archive << m_PatienceLostThreshold;
        archive << m_AIGoalTimeSlice;
        archive << m_AIMaxTimeSlice;
        archive << m_AITotalTimeSlice;
        archive << m_EntrenchmentBonus;
        archive << m_ParadropDistance;
        archive << m_ParadropSuccessPercent;
        archive << m_EliteSpyBonus;
        archive << m_CitySecondAttemptSpyBonus;
        archive << m_AssasinationHappinessEffect;
        archive << m_AssasinationHappinessEffectTimer;
        archive << m_SpiedUponWarinessTimer;
        archive << m_MaxPartyCost;
        archive << m_MaxPartyChance;
        archive << m_GossipMapRadius;
        archive << m_HearGossipChance;
        archive << m_FranchiseEffect;
        archive << m_TurnsFranchised;
        archive << m_TurnsToSueFranchise;
        archive << m_SlaverEliteChance;
        archive << m_EliteSlaverBonus;
        archive << m_AbolitionistEliteChance;
        archive << m_EliteAbolitionistBonus;
        archive << m_WatchfulCitySuccessModifier;
        archive << m_WatchfulCityDeathModifier;
        archive << m_WatchfulCityTurns;
        archive << m_BioInfectionTurns;
        archive << m_NanoInfectionTurns;
        archive << m_BioInfectionSpreadChance;
        archive << m_NanoInfectionSpreadChance;
        archive << m_PlagueKillPercentage;
        archive << m_EliteTerroristBonus;
        archive << m_TerroistEliteChance;
        archive << m_NukePopulationPercentage;
        archive << m_SpecialActionMoveCost;
        archive << m_ClericConversionFactor;
        archive << m_TelevangelistConversionFactor;
        archive << m_ReformationChance;
        archive << m_ReformationDeathChance;
        archive << m_ReformationHappinessTime;
        archive << m_ReformationHappinessAmount;
        archive << m_UnconvertedIndulgenceGold;
        archive << m_UnconvertedIndulgenceHappiness;
        archive << m_ConvertedIndulgenceGold;
        archive << m_ConvertedIndulgenceHappiness;
        archive << m_OtherFaithIndulgenceGold;
        archive << m_OtherFaithIndulgenceHappiness;
        archive << m_SoothsayHappyAmount;
        archive << m_RuinsBoxWidth;
        archive << m_RuinsBoxHeight;
        archive << m_RuinsChancePerBox;
        archive << m_MaxRuinsGold;
        archive << m_MaxRuinsAdvance;
        archive << m_MaxRuinsUnit;
        archive << m_UnitRushModifier;
        archive << m_BuildingRushModifier;
        archive << m_WonderRushModifier;
        archive << m_BuildingProductionToValueModifier;
        archive << m_MonopolyThreshold;
        archive << m_PopulationPollutionWarningThreshold;
        archive << m_IndustrialPollutionWarningThreshold;
        archive << m_VeryHappyThreshold;
        archive << m_CityGrowthCoefficient;
        archive << m_RiotLevel;
        archive << m_PowerPointsToMaterials;
        archive << m_MaxAirliftStackSize;
        archive << m_GoldFromPiracy;
        archive << m_NoPiracyExpires;
        archive << m_SpaceLaunchCost;
        archive << m_SpaceLandCost;
        archive << m_WormholeOrbitHeightPercentage;
        archive << m_WormholeSpeed;
        archive << m_WormholeReturnTime;
        archive << m_WormholeVisibleToAllTurns;
        archive << m_MaxGovernmentChangeTurns;
        archive << m_PollutionForcesAnarchy;
        archive << m_FoodToPollutionCoef;
        archive << m_EmancipationUnhappinessTurns;
        archive << m_EmancipationUnhappinessAmount;
        archive << m_CaptureCityAdvanceChance;
        archive << m_CityHealRate;
        archive << m_NormalHealRate;
        archive << m_LocalPollutionLevel;
        archive << m_LocalPollutionChance;
        archive << m_AssaultDestroyBuildingChance;
        archive << m_BombardDestroyBuildingChance;
        archive << m_AdvanceChoicesMin;
        archive << m_AdvanceChoicesMax;
        archive << m_AttackConverterUnhappinessTurns;
        archive << m_AttackConverterUnhappinessAmount;
        archive << m_MinStartDistanceCoefficient;
        archive << m_MaxStartDistanceCoefficient;
        archive << m_MaxSameTiles;
        archive << m_CombatVeteranChance;
        archive << m_StopTradeRounds;
        archive << m_LeaveOurLandsRounds;
        archive << m_ReducePollutionRounds;
        archive << m_CaptureCityRounds;
        archive << m_EndPollutionRounds;
        archive << m_AttackEnemyRounds;
        archive << m_MinContinentStartSize;
        archive << m_BombardKillPopChance;
        archive << m_AssaultKillPopChance;
        archive << m_CaptureKillPopChance;
        archive << m_ScaledPopAncient;
        archive << m_ScaledPopRenaissance;
        archive << m_ScaledPopModern;
        archive << m_ScaledPopGenetic;
        archive << m_ScaledPopDiamond;
        archive << m_PiracyKillsTraderChance;
        archive << m_UprisingChancePerUnguardedSlave;
        archive << m_MaxDisbandSize;
        archive << m_MaxRequestsPerPlayerPerTurn;
        archive << m_SlavesPerMilitaryUnit;
        archive << m_MinAbsoluteStartDistance;
        archive << m_numMapSizeSmall;
        archive.Store((uint8*)&m_MapSizeSmall, sizeof(m_MapSizeSmall));
        archive << m_numMapSizeMedium;
        archive.Store((uint8*)&m_MapSizeMedium, sizeof(m_MapSizeMedium));
        archive << m_numMapSizeLarge;
        archive.Store((uint8*)&m_MapSizeLarge, sizeof(m_MapSizeLarge));
        archive << m_numMapSizeGigantic;
        archive.Store((uint8*)&m_MapSizeGigantic, sizeof(m_MapSizeGigantic));
        archive << m_RailLaunchPollution;
        archive << m_SpaceFuelCost;
        archive << m_NonSpaceFuelCost;
        archive << m_StarvationWarningFudgeFactor;
        archive << m_MaintenanceWarningFudgeFactor;
        archive << m_SupportWarningFudgeFactor;
        archive << m_RelativeAIProductionCheatCoef;
        archive << m_RelativeAIScienceCheatCoef;
        archive << m_NukeKillsTiles;
        archive << m_InciteRevolutionGoldCoefficient;
        archive << m_InciteRevolutionCapitolPenalty;
        archive << m_InciteUprisingGoldCoefficient;
        archive << m_InciteUprisingCapitolPenalty;
        archive << m_BioInfectionUnhappiness;
        archive << m_MinEcoPactViolationLevel;
        archive << m_NanoInfectionTerroristDeathChance;
        archive << m_BioInfectionTerroristDeathChance;
        archive << m_FloodChangesCoastToWaterChance;
        archive << m_AICheatEcoPactMin;
        archive << m_AICheatEcoPactMax;
        archive << m_MaxAbsoluteGrowthRate;
        archive << m_TradeDistanceCoefficient;
        archive << m_MinLikeTilesForGood;
        archive << m_MinGoodValue;
        archive << m_MaxGoodValue;
        archive << m_PiracyWasteCoefficient;
        archive << m_BorderIntRadius;
        archive << m_BorderSquaredRadius;
        archive << m_BioInfectionProductionCoef;
        archive << m_NanoBuildingKillPercentage;
        archive << m_BaseStarvationProtection;
        archive << m_CaravanCoef;
        archive << m_DomesticTradeReduction;
        archive << m_TradePactCoef;
        archive << m_PollutionCausedByNuke;
        archive << m_MaxMatchListCycles;
        archive << m_MinTurnsBetweenRevolts;
        archive << m_MaxCityWonders;
        archive << m_MaxCityBuildings;
        archive << m_CapturedCityKillPop;
        archive << m_CombatEliteChance;
        archive << m_CombatLeaderChance;
        archive << m_CityOnTradeRouteCoeff;
        archive << m_CityExpansionDenominator;
        archive << m_TurnsAcceptedForOnePop;
        archive << m_UseBaseMoveCostsForRoads;
        archive << m_RoadAlreadyThereCostsCoefficient;
        archive << m_BuildRoadsToClosestCities;
        archive << m_BaseRoadPriorityVsThreatRank;
        archive << m_CosiderNumCitiesForSlaves;
        archive << m_SmallCityImproveCoeff;
    } else {
        //GovMod Specific flag initialization
        m_hasGovernmentsModified = false;

        archive >> m_index;
        {
            MBCHAR* tmpStr = NULL;
            archive >> tmpStr;
            g_theStringDB->GetStringID(tmpStr, m_name);
            SetTextName(g_theStringDB->GetNameStr(m_name));
        }
        archive >> m_PercentLand;
        archive >> m_PercentContinent;
        archive >> m_PercentHomogenious;
        archive >> m_MeridianA;
        archive >> m_MeridianB;
        archive >> m_MeridianC;
        archive >> m_MeridianD;
        archive >> m_MeridianE;
        archive >> m_MeridianF;
        archive >> m_HLevelA;
        archive >> m_HLevelB;
        archive >> m_HLevelC;
        archive >> m_HLevelD;
        archive >> m_ForestWet;
        archive >> m_GrassWet;
        archive >> m_PlainsWet;
        archive >> m_DesertWet;
        archive >> m_ForestDry;
        archive >> m_GrassDry;
        archive >> m_PlainsDry;
        archive >> m_DesertDry;
        archive >> m_WhiteWarm;
        archive >> m_BrownWarm;
        archive >> m_TemperatureRangeAdjustWarm;
        archive >> m_WhiteCold;
        archive >> m_BrownCold;
        archive >> m_TemperatureRangeAdjustCold;
        archive >> m_RichnessFewGoods;
        archive >> m_RiverCellWidthFewGoods;
        archive >> m_RiverCellHeightFewGoods;
        archive >> m_RichnessManyGoods;
        archive >> m_RiverCellWidthManyGoods;
        archive >> m_RiverCellHeightManyGoods;
        archive >> m_PercentMountain;
        archive >> m_MountainCell;
        archive >> m_PercentHills;
        archive >> m_MountainSpread;
        archive >> m_MountainLength;
        archive >> m_GlacierExtend;
        archive >> m_PercentVolcano;
        archive >> m_PercentTrench;
        archive >> m_PercentForest;
        archive >> m_PercentGras;
        archive >> m_PercentPlains;
        archive >> m_PercentDesert;
        archive >> m_PercentWhite;
        archive >> m_PercentBrown;
        archive >> m_TemperatureRangeAdjust;
        archive >> m_NiceRadius;
        archive >> m_PercentRiver;
        archive >> m_RiverLength;
        archive >> m_RiverCellWidth;
        archive >> m_RiverCellHeight;
        archive >> m_Richness;
        archive >> m_ChanceLostAtSea;
        archive >> m_VeteranCoef;
        archive >> m_RevolutionLevel;
        archive >> m_DiscoveriesPollutionSizeModifier;
        archive >> m_DiscoveriesPollutionProductionModifier;
        archive >> m_AveragePollutionTurns;
        archive >> m_PopulationProducesPollutionThreshold;
        archive >> m_ProductionProducesPollutionThreshold;
        archive >> m_MaxEmpireDistCost;
        archive >> m_HappinessLaunchCost;
        archive >> m_UnitWorkday;
        archive >> m_BaseWorkday;
        archive >> m_UnitWages;
        archive >> m_BaseWages;
        archive >> m_UnitRations;
        archive >> m_BaseRations;
        archive >> m_ChangeCurrentlyBuildingItemPenalty;
        archive >> m_TariffReduction;
        archive >> m_RevoltInfluenceDistance;
        archive >> m_PactCaptureCityExpires;
        archive >> m_RewardCaptureCityExpires;
        archive >> m_CeaseFireExpires;
        archive >> m_ShortCeaseFireExpires;
        archive >> m_EndOfGameYearEarlyWarning;
        archive >> m_EndOfGameYear;
        archive >> m_CaptureCityForGoldMultiplyer;
        archive >> m_PactEndPollutionExpires;
        archive >> m_LeaveOurLandsExpires;
        archive >> m_ReducePollutionExpires;
        archive >> m_DestroyEnemyForRewardExpires;
        archive >> m_PatienceLostPerRequest;
        archive >> m_PatienceRegainedPerRound;
        archive >> m_RegainPatienceProbability;
        archive >> m_PatienceLostThreshold;
        archive >> m_AIGoalTimeSlice;
        archive >> m_AIMaxTimeSlice;
        archive >> m_AITotalTimeSlice;
        archive >> m_EntrenchmentBonus;
        archive >> m_ParadropDistance;
        archive >> m_ParadropSuccessPercent;
        archive >> m_EliteSpyBonus;
        archive >> m_CitySecondAttemptSpyBonus;
        archive >> m_AssasinationHappinessEffect;
        archive >> m_AssasinationHappinessEffectTimer;
        archive >> m_SpiedUponWarinessTimer;
        archive >> m_MaxPartyCost;
        archive >> m_MaxPartyChance;
        archive >> m_GossipMapRadius;
        archive >> m_HearGossipChance;
        archive >> m_FranchiseEffect;
        archive >> m_TurnsFranchised;
        archive >> m_TurnsToSueFranchise;
        archive >> m_SlaverEliteChance;
        archive >> m_EliteSlaverBonus;
        archive >> m_AbolitionistEliteChance;
        archive >> m_EliteAbolitionistBonus;
        archive >> m_WatchfulCitySuccessModifier;
        archive >> m_WatchfulCityDeathModifier;
        archive >> m_WatchfulCityTurns;
        archive >> m_BioInfectionTurns;
        archive >> m_NanoInfectionTurns;
        archive >> m_BioInfectionSpreadChance;
        archive >> m_NanoInfectionSpreadChance;
        archive >> m_PlagueKillPercentage;
        archive >> m_EliteTerroristBonus;
        archive >> m_TerroistEliteChance;
        archive >> m_NukePopulationPercentage;
        archive >> m_SpecialActionMoveCost;
        archive >> m_ClericConversionFactor;
        archive >> m_TelevangelistConversionFactor;
        archive >> m_ReformationChance;
        archive >> m_ReformationDeathChance;
        archive >> m_ReformationHappinessTime;
        archive >> m_ReformationHappinessAmount;
        archive >> m_UnconvertedIndulgenceGold;
        archive >> m_UnconvertedIndulgenceHappiness;
        archive >> m_ConvertedIndulgenceGold;
        archive >> m_ConvertedIndulgenceHappiness;
        archive >> m_OtherFaithIndulgenceGold;
        archive >> m_OtherFaithIndulgenceHappiness;
        archive >> m_SoothsayHappyAmount;
        archive >> m_RuinsBoxWidth;
        archive >> m_RuinsBoxHeight;
        archive >> m_RuinsChancePerBox;
        archive >> m_MaxRuinsGold;
        archive >> m_MaxRuinsAdvance;
        archive >> m_MaxRuinsUnit;
        archive >> m_UnitRushModifier;
        archive >> m_BuildingRushModifier;
        archive >> m_WonderRushModifier;
        archive >> m_BuildingProductionToValueModifier;
        archive >> m_MonopolyThreshold;
        archive >> m_PopulationPollutionWarningThreshold;
        archive >> m_IndustrialPollutionWarningThreshold;
        archive >> m_VeryHappyThreshold;
        archive >> m_CityGrowthCoefficient;
        archive >> m_RiotLevel;
        archive >> m_PowerPointsToMaterials;
        archive >> m_MaxAirliftStackSize;
        archive >> m_GoldFromPiracy;
        archive >> m_NoPiracyExpires;
        archive >> m_SpaceLaunchCost;
        archive >> m_SpaceLandCost;
        archive >> m_WormholeOrbitHeightPercentage;
        archive >> m_WormholeSpeed;
        archive >> m_WormholeReturnTime;
        archive >> m_WormholeVisibleToAllTurns;
        archive >> m_MaxGovernmentChangeTurns;
        archive >> m_PollutionForcesAnarchy;
        archive >> m_FoodToPollutionCoef;
        archive >> m_EmancipationUnhappinessTurns;
        archive >> m_EmancipationUnhappinessAmount;
        archive >> m_CaptureCityAdvanceChance;
        archive >> m_CityHealRate;
        archive >> m_NormalHealRate;
        archive >> m_LocalPollutionLevel;
        archive >> m_LocalPollutionChance;
        archive >> m_AssaultDestroyBuildingChance;
        archive >> m_BombardDestroyBuildingChance;
        archive >> m_AdvanceChoicesMin;
        archive >> m_AdvanceChoicesMax;
        archive >> m_AttackConverterUnhappinessTurns;
        archive >> m_AttackConverterUnhappinessAmount;
        archive >> m_MinStartDistanceCoefficient;
        archive >> m_MaxStartDistanceCoefficient;
        archive >> m_MaxSameTiles;
        archive >> m_CombatVeteranChance;
        archive >> m_StopTradeRounds;
        archive >> m_LeaveOurLandsRounds;
        archive >> m_ReducePollutionRounds;
        archive >> m_CaptureCityRounds;
        archive >> m_EndPollutionRounds;
        archive >> m_AttackEnemyRounds;
        archive >> m_MinContinentStartSize;
        archive >> m_BombardKillPopChance;
        archive >> m_AssaultKillPopChance;
        archive >> m_CaptureKillPopChance;
        archive >> m_ScaledPopAncient;
        archive >> m_ScaledPopRenaissance;
        archive >> m_ScaledPopModern;
        archive >> m_ScaledPopGenetic;
        archive >> m_ScaledPopDiamond;
        archive >> m_PiracyKillsTraderChance;
        archive >> m_UprisingChancePerUnguardedSlave;
        archive >> m_MaxDisbandSize;
        archive >> m_MaxRequestsPerPlayerPerTurn;
        archive >> m_SlavesPerMilitaryUnit;
        archive >> m_MinAbsoluteStartDistance;
        archive >> m_numMapSizeSmall;
        archive.Load((uint8*)&m_MapSizeSmall, sizeof(m_MapSizeSmall));
        archive >> m_numMapSizeMedium;
        archive.Load((uint8*)&m_MapSizeMedium, sizeof(m_MapSizeMedium));
        archive >> m_numMapSizeLarge;
        archive.Load((uint8*)&m_MapSizeLarge, sizeof(m_MapSizeLarge));
        archive >> m_numMapSizeGigantic;
        archive.Load((uint8*)&m_MapSizeGigantic, sizeof(m_MapSizeGigantic));
        archive >> m_RailLaunchPollution;
        archive >> m_SpaceFuelCost;
        archive >> m_NonSpaceFuelCost;
        archive >> m_StarvationWarningFudgeFactor;
        archive >> m_MaintenanceWarningFudgeFactor;
        archive >> m_SupportWarningFudgeFactor;
        archive >> m_RelativeAIProductionCheatCoef;
        archive >> m_RelativeAIScienceCheatCoef;
        archive >> m_NukeKillsTiles;
        archive >> m_InciteRevolutionGoldCoefficient;
        archive >> m_InciteRevolutionCapitolPenalty;
        archive >> m_InciteUprisingGoldCoefficient;
        archive >> m_InciteUprisingCapitolPenalty;
        archive >> m_BioInfectionUnhappiness;
        archive >> m_MinEcoPactViolationLevel;
        archive >> m_NanoInfectionTerroristDeathChance;
        archive >> m_BioInfectionTerroristDeathChance;
        archive >> m_FloodChangesCoastToWaterChance;
        archive >> m_AICheatEcoPactMin;
        archive >> m_AICheatEcoPactMax;
        archive >> m_MaxAbsoluteGrowthRate;
        archive >> m_TradeDistanceCoefficient;
        archive >> m_MinLikeTilesForGood;
        archive >> m_MinGoodValue;
        archive >> m_MaxGoodValue;
        archive >> m_PiracyWasteCoefficient;
        archive >> m_BorderIntRadius;
        archive >> m_BorderSquaredRadius;
        archive >> m_BioInfectionProductionCoef;
        archive >> m_NanoBuildingKillPercentage;
        archive >> m_BaseStarvationProtection;
        archive >> m_CaravanCoef;
        archive >> m_DomesticTradeReduction;
        archive >> m_TradePactCoef;
        archive >> m_PollutionCausedByNuke;
        archive >> m_MaxMatchListCycles;
        archive >> m_MinTurnsBetweenRevolts;
        archive >> m_MaxCityWonders;
        archive >> m_MaxCityBuildings;
        archive >> m_CapturedCityKillPop;
        archive >> m_CombatEliteChance;
        archive >> m_CombatLeaderChance;
        archive >> m_CityOnTradeRouteCoeff;
        archive >> m_CityExpansionDenominator;
        archive >> m_TurnsAcceptedForOnePop;
        archive >> m_UseBaseMoveCostsForRoads;
        archive >> m_RoadAlreadyThereCostsCoefficient;
        archive >> m_BuildRoadsToClosestCities;
        archive >> m_BaseRoadPriorityVsThreatRank;
        archive >> m_CosiderNumCitiesForSlaves;
        archive >> m_SmallCityImproveCoeff;
    }
}

ConstRecord::~ConstRecord()
{
}

ConstRecord const & ConstRecord::operator = (ConstRecord const & rval)
{
    if (this != &rval)
    {
        m_index = rval.m_index;
        m_hasGovernmentsModified = rval.m_hasGovernmentsModified;

        m_PercentLand = rval.m_PercentLand;

        m_PercentContinent = rval.m_PercentContinent;

        m_PercentHomogenious = rval.m_PercentHomogenious;

        m_MeridianA = rval.m_MeridianA;

        m_MeridianB = rval.m_MeridianB;

        m_MeridianC = rval.m_MeridianC;

        m_MeridianD = rval.m_MeridianD;

        m_MeridianE = rval.m_MeridianE;

        m_MeridianF = rval.m_MeridianF;

        m_HLevelA = rval.m_HLevelA;

        m_HLevelB = rval.m_HLevelB;

        m_HLevelC = rval.m_HLevelC;

        m_HLevelD = rval.m_HLevelD;

        m_ForestWet = rval.m_ForestWet;

        m_GrassWet = rval.m_GrassWet;

        m_PlainsWet = rval.m_PlainsWet;

        m_DesertWet = rval.m_DesertWet;

        m_ForestDry = rval.m_ForestDry;

        m_GrassDry = rval.m_GrassDry;

        m_PlainsDry = rval.m_PlainsDry;

        m_DesertDry = rval.m_DesertDry;

        m_WhiteWarm = rval.m_WhiteWarm;

        m_BrownWarm = rval.m_BrownWarm;

        m_TemperatureRangeAdjustWarm = rval.m_TemperatureRangeAdjustWarm;

        m_WhiteCold = rval.m_WhiteCold;

        m_BrownCold = rval.m_BrownCold;

        m_TemperatureRangeAdjustCold = rval.m_TemperatureRangeAdjustCold;

        m_RichnessFewGoods = rval.m_RichnessFewGoods;

        m_RiverCellWidthFewGoods = rval.m_RiverCellWidthFewGoods;

        m_RiverCellHeightFewGoods = rval.m_RiverCellHeightFewGoods;

        m_RichnessManyGoods = rval.m_RichnessManyGoods;

        m_RiverCellWidthManyGoods = rval.m_RiverCellWidthManyGoods;

        m_RiverCellHeightManyGoods = rval.m_RiverCellHeightManyGoods;

        m_PercentMountain = rval.m_PercentMountain;

        m_MountainCell = rval.m_MountainCell;

        m_PercentHills = rval.m_PercentHills;

        m_MountainSpread = rval.m_MountainSpread;

        m_MountainLength = rval.m_MountainLength;

        m_GlacierExtend = rval.m_GlacierExtend;

        m_PercentVolcano = rval.m_PercentVolcano;

        m_PercentTrench = rval.m_PercentTrench;

        m_PercentForest = rval.m_PercentForest;

        m_PercentGras = rval.m_PercentGras;

        m_PercentPlains = rval.m_PercentPlains;

        m_PercentDesert = rval.m_PercentDesert;

        m_PercentWhite = rval.m_PercentWhite;

        m_PercentBrown = rval.m_PercentBrown;

        m_TemperatureRangeAdjust = rval.m_TemperatureRangeAdjust;

        m_NiceRadius = rval.m_NiceRadius;

        m_PercentRiver = rval.m_PercentRiver;

        m_RiverLength = rval.m_RiverLength;

        m_RiverCellWidth = rval.m_RiverCellWidth;

        m_RiverCellHeight = rval.m_RiverCellHeight;

        m_Richness = rval.m_Richness;

        m_ChanceLostAtSea = rval.m_ChanceLostAtSea;

        m_VeteranCoef = rval.m_VeteranCoef;

        m_RevolutionLevel = rval.m_RevolutionLevel;

        m_DiscoveriesPollutionSizeModifier = rval.m_DiscoveriesPollutionSizeModifier;

        m_DiscoveriesPollutionProductionModifier = rval.m_DiscoveriesPollutionProductionModifier;

        m_AveragePollutionTurns = rval.m_AveragePollutionTurns;

        m_PopulationProducesPollutionThreshold = rval.m_PopulationProducesPollutionThreshold;

        m_ProductionProducesPollutionThreshold = rval.m_ProductionProducesPollutionThreshold;

        m_MaxEmpireDistCost = rval.m_MaxEmpireDistCost;

        m_HappinessLaunchCost = rval.m_HappinessLaunchCost;

        m_UnitWorkday = rval.m_UnitWorkday;

        m_BaseWorkday = rval.m_BaseWorkday;

        m_UnitWages = rval.m_UnitWages;

        m_BaseWages = rval.m_BaseWages;

        m_UnitRations = rval.m_UnitRations;

        m_BaseRations = rval.m_BaseRations;

        m_ChangeCurrentlyBuildingItemPenalty = rval.m_ChangeCurrentlyBuildingItemPenalty;

        m_TariffReduction = rval.m_TariffReduction;

        m_RevoltInfluenceDistance = rval.m_RevoltInfluenceDistance;

        m_PactCaptureCityExpires = rval.m_PactCaptureCityExpires;

        m_RewardCaptureCityExpires = rval.m_RewardCaptureCityExpires;

        m_CeaseFireExpires = rval.m_CeaseFireExpires;

        m_ShortCeaseFireExpires = rval.m_ShortCeaseFireExpires;

        m_EndOfGameYearEarlyWarning = rval.m_EndOfGameYearEarlyWarning;

        m_EndOfGameYear = rval.m_EndOfGameYear;

        m_CaptureCityForGoldMultiplyer = rval.m_CaptureCityForGoldMultiplyer;

        m_PactEndPollutionExpires = rval.m_PactEndPollutionExpires;

        m_LeaveOurLandsExpires = rval.m_LeaveOurLandsExpires;

        m_ReducePollutionExpires = rval.m_ReducePollutionExpires;

        m_DestroyEnemyForRewardExpires = rval.m_DestroyEnemyForRewardExpires;

        m_PatienceLostPerRequest = rval.m_PatienceLostPerRequest;

        m_PatienceRegainedPerRound = rval.m_PatienceRegainedPerRound;

        m_RegainPatienceProbability = rval.m_RegainPatienceProbability;

        m_PatienceLostThreshold = rval.m_PatienceLostThreshold;

        m_AIGoalTimeSlice = rval.m_AIGoalTimeSlice;

        m_AIMaxTimeSlice = rval.m_AIMaxTimeSlice;

        m_AITotalTimeSlice = rval.m_AITotalTimeSlice;

        m_EntrenchmentBonus = rval.m_EntrenchmentBonus;

        m_ParadropDistance = rval.m_ParadropDistance;

        m_ParadropSuccessPercent = rval.m_ParadropSuccessPercent;

        m_EliteSpyBonus = rval.m_EliteSpyBonus;

        m_CitySecondAttemptSpyBonus = rval.m_CitySecondAttemptSpyBonus;

        m_AssasinationHappinessEffect = rval.m_AssasinationHappinessEffect;

        m_AssasinationHappinessEffectTimer = rval.m_AssasinationHappinessEffectTimer;

        m_SpiedUponWarinessTimer = rval.m_SpiedUponWarinessTimer;

        m_MaxPartyCost = rval.m_MaxPartyCost;

        m_MaxPartyChance = rval.m_MaxPartyChance;

        m_GossipMapRadius = rval.m_GossipMapRadius;

        m_HearGossipChance = rval.m_HearGossipChance;

        m_FranchiseEffect = rval.m_FranchiseEffect;

        m_TurnsFranchised = rval.m_TurnsFranchised;

        m_TurnsToSueFranchise = rval.m_TurnsToSueFranchise;

        m_SlaverEliteChance = rval.m_SlaverEliteChance;

        m_EliteSlaverBonus = rval.m_EliteSlaverBonus;

        m_AbolitionistEliteChance = rval.m_AbolitionistEliteChance;

        m_EliteAbolitionistBonus = rval.m_EliteAbolitionistBonus;

        m_WatchfulCitySuccessModifier = rval.m_WatchfulCitySuccessModifier;

        m_WatchfulCityDeathModifier = rval.m_WatchfulCityDeathModifier;

        m_WatchfulCityTurns = rval.m_WatchfulCityTurns;

        m_BioInfectionTurns = rval.m_BioInfectionTurns;

        m_NanoInfectionTurns = rval.m_NanoInfectionTurns;

        m_BioInfectionSpreadChance = rval.m_BioInfectionSpreadChance;

        m_NanoInfectionSpreadChance = rval.m_NanoInfectionSpreadChance;

        m_PlagueKillPercentage = rval.m_PlagueKillPercentage;

        m_EliteTerroristBonus = rval.m_EliteTerroristBonus;

        m_TerroistEliteChance = rval.m_TerroistEliteChance;

        m_NukePopulationPercentage = rval.m_NukePopulationPercentage;

        m_SpecialActionMoveCost = rval.m_SpecialActionMoveCost;

        m_ClericConversionFactor = rval.m_ClericConversionFactor;

        m_TelevangelistConversionFactor = rval.m_TelevangelistConversionFactor;

        m_ReformationChance = rval.m_ReformationChance;

        m_ReformationDeathChance = rval.m_ReformationDeathChance;

        m_ReformationHappinessTime = rval.m_ReformationHappinessTime;

        m_ReformationHappinessAmount = rval.m_ReformationHappinessAmount;

        m_UnconvertedIndulgenceGold = rval.m_UnconvertedIndulgenceGold;

        m_UnconvertedIndulgenceHappiness = rval.m_UnconvertedIndulgenceHappiness;

        m_ConvertedIndulgenceGold = rval.m_ConvertedIndulgenceGold;

        m_ConvertedIndulgenceHappiness = rval.m_ConvertedIndulgenceHappiness;

        m_OtherFaithIndulgenceGold = rval.m_OtherFaithIndulgenceGold;

        m_OtherFaithIndulgenceHappiness = rval.m_OtherFaithIndulgenceHappiness;

        m_SoothsayHappyAmount = rval.m_SoothsayHappyAmount;

        m_RuinsBoxWidth = rval.m_RuinsBoxWidth;

        m_RuinsBoxHeight = rval.m_RuinsBoxHeight;

        m_RuinsChancePerBox = rval.m_RuinsChancePerBox;

        m_MaxRuinsGold = rval.m_MaxRuinsGold;

        m_MaxRuinsAdvance = rval.m_MaxRuinsAdvance;

        m_MaxRuinsUnit = rval.m_MaxRuinsUnit;

        m_UnitRushModifier = rval.m_UnitRushModifier;

        m_BuildingRushModifier = rval.m_BuildingRushModifier;

        m_WonderRushModifier = rval.m_WonderRushModifier;

        m_BuildingProductionToValueModifier = rval.m_BuildingProductionToValueModifier;

        m_MonopolyThreshold = rval.m_MonopolyThreshold;

        m_PopulationPollutionWarningThreshold = rval.m_PopulationPollutionWarningThreshold;

        m_IndustrialPollutionWarningThreshold = rval.m_IndustrialPollutionWarningThreshold;

        m_VeryHappyThreshold = rval.m_VeryHappyThreshold;

        m_CityGrowthCoefficient = rval.m_CityGrowthCoefficient;

        m_RiotLevel = rval.m_RiotLevel;

        m_PowerPointsToMaterials = rval.m_PowerPointsToMaterials;

        m_MaxAirliftStackSize = rval.m_MaxAirliftStackSize;

        m_GoldFromPiracy = rval.m_GoldFromPiracy;

        m_NoPiracyExpires = rval.m_NoPiracyExpires;

        m_SpaceLaunchCost = rval.m_SpaceLaunchCost;

        m_SpaceLandCost = rval.m_SpaceLandCost;

        m_WormholeOrbitHeightPercentage = rval.m_WormholeOrbitHeightPercentage;

        m_WormholeSpeed = rval.m_WormholeSpeed;

        m_WormholeReturnTime = rval.m_WormholeReturnTime;

        m_WormholeVisibleToAllTurns = rval.m_WormholeVisibleToAllTurns;

        m_MaxGovernmentChangeTurns = rval.m_MaxGovernmentChangeTurns;

        m_PollutionForcesAnarchy = rval.m_PollutionForcesAnarchy;

        m_FoodToPollutionCoef = rval.m_FoodToPollutionCoef;

        m_EmancipationUnhappinessTurns = rval.m_EmancipationUnhappinessTurns;

        m_EmancipationUnhappinessAmount = rval.m_EmancipationUnhappinessAmount;

        m_CaptureCityAdvanceChance = rval.m_CaptureCityAdvanceChance;

        m_CityHealRate = rval.m_CityHealRate;

        m_NormalHealRate = rval.m_NormalHealRate;

        m_LocalPollutionLevel = rval.m_LocalPollutionLevel;

        m_LocalPollutionChance = rval.m_LocalPollutionChance;

        m_AssaultDestroyBuildingChance = rval.m_AssaultDestroyBuildingChance;

        m_BombardDestroyBuildingChance = rval.m_BombardDestroyBuildingChance;

        m_AdvanceChoicesMin = rval.m_AdvanceChoicesMin;

        m_AdvanceChoicesMax = rval.m_AdvanceChoicesMax;

        m_AttackConverterUnhappinessTurns = rval.m_AttackConverterUnhappinessTurns;

        m_AttackConverterUnhappinessAmount = rval.m_AttackConverterUnhappinessAmount;

        m_MinStartDistanceCoefficient = rval.m_MinStartDistanceCoefficient;

        m_MaxStartDistanceCoefficient = rval.m_MaxStartDistanceCoefficient;

        m_MaxSameTiles = rval.m_MaxSameTiles;

        m_CombatVeteranChance = rval.m_CombatVeteranChance;

        m_StopTradeRounds = rval.m_StopTradeRounds;

        m_LeaveOurLandsRounds = rval.m_LeaveOurLandsRounds;

        m_ReducePollutionRounds = rval.m_ReducePollutionRounds;

        m_CaptureCityRounds = rval.m_CaptureCityRounds;

        m_EndPollutionRounds = rval.m_EndPollutionRounds;

        m_AttackEnemyRounds = rval.m_AttackEnemyRounds;

        m_MinContinentStartSize = rval.m_MinContinentStartSize;

        m_BombardKillPopChance = rval.m_BombardKillPopChance;

        m_AssaultKillPopChance = rval.m_AssaultKillPopChance;

        m_CaptureKillPopChance = rval.m_CaptureKillPopChance;

        m_ScaledPopAncient = rval.m_ScaledPopAncient;

        m_ScaledPopRenaissance = rval.m_ScaledPopRenaissance;

        m_ScaledPopModern = rval.m_ScaledPopModern;

        m_ScaledPopGenetic = rval.m_ScaledPopGenetic;

        m_ScaledPopDiamond = rval.m_ScaledPopDiamond;

        m_PiracyKillsTraderChance = rval.m_PiracyKillsTraderChance;

        m_UprisingChancePerUnguardedSlave = rval.m_UprisingChancePerUnguardedSlave;

        m_MaxDisbandSize = rval.m_MaxDisbandSize;

        m_MaxRequestsPerPlayerPerTurn = rval.m_MaxRequestsPerPlayerPerTurn;

        m_SlavesPerMilitaryUnit = rval.m_SlavesPerMilitaryUnit;

        m_MinAbsoluteStartDistance = rval.m_MinAbsoluteStartDistance;

        std::copy(rval.m_MapSizeSmall, rval.m_MapSizeSmall + rval.m_numMapSizeSmall, m_MapSizeSmall);

        std::copy(rval.m_MapSizeMedium, rval.m_MapSizeMedium + rval.m_numMapSizeMedium, m_MapSizeMedium);

        std::copy(rval.m_MapSizeLarge, rval.m_MapSizeLarge + rval.m_numMapSizeLarge, m_MapSizeLarge);

        std::copy(rval.m_MapSizeGigantic, rval.m_MapSizeGigantic + rval.m_numMapSizeGigantic, m_MapSizeGigantic);

        m_RailLaunchPollution = rval.m_RailLaunchPollution;

        m_SpaceFuelCost = rval.m_SpaceFuelCost;

        m_NonSpaceFuelCost = rval.m_NonSpaceFuelCost;

        m_StarvationWarningFudgeFactor = rval.m_StarvationWarningFudgeFactor;

        m_MaintenanceWarningFudgeFactor = rval.m_MaintenanceWarningFudgeFactor;

        m_SupportWarningFudgeFactor = rval.m_SupportWarningFudgeFactor;

        m_RelativeAIProductionCheatCoef = rval.m_RelativeAIProductionCheatCoef;

        m_RelativeAIScienceCheatCoef = rval.m_RelativeAIScienceCheatCoef;

        m_NukeKillsTiles = rval.m_NukeKillsTiles;

        m_InciteRevolutionGoldCoefficient = rval.m_InciteRevolutionGoldCoefficient;

        m_InciteRevolutionCapitolPenalty = rval.m_InciteRevolutionCapitolPenalty;

        m_InciteUprisingGoldCoefficient = rval.m_InciteUprisingGoldCoefficient;

        m_InciteUprisingCapitolPenalty = rval.m_InciteUprisingCapitolPenalty;

        m_BioInfectionUnhappiness = rval.m_BioInfectionUnhappiness;

        m_MinEcoPactViolationLevel = rval.m_MinEcoPactViolationLevel;

        m_NanoInfectionTerroristDeathChance = rval.m_NanoInfectionTerroristDeathChance;

        m_BioInfectionTerroristDeathChance = rval.m_BioInfectionTerroristDeathChance;

        m_FloodChangesCoastToWaterChance = rval.m_FloodChangesCoastToWaterChance;

        m_AICheatEcoPactMin = rval.m_AICheatEcoPactMin;

        m_AICheatEcoPactMax = rval.m_AICheatEcoPactMax;

        m_MaxAbsoluteGrowthRate = rval.m_MaxAbsoluteGrowthRate;

        m_TradeDistanceCoefficient = rval.m_TradeDistanceCoefficient;

        m_MinLikeTilesForGood = rval.m_MinLikeTilesForGood;

        m_MinGoodValue = rval.m_MinGoodValue;

        m_MaxGoodValue = rval.m_MaxGoodValue;

        m_PiracyWasteCoefficient = rval.m_PiracyWasteCoefficient;

        m_BorderIntRadius = rval.m_BorderIntRadius;

        m_BorderSquaredRadius = rval.m_BorderSquaredRadius;

        m_BioInfectionProductionCoef = rval.m_BioInfectionProductionCoef;

        m_NanoBuildingKillPercentage = rval.m_NanoBuildingKillPercentage;

        m_BaseStarvationProtection = rval.m_BaseStarvationProtection;

        m_CaravanCoef = rval.m_CaravanCoef;

        m_DomesticTradeReduction = rval.m_DomesticTradeReduction;

        m_TradePactCoef = rval.m_TradePactCoef;

        m_PollutionCausedByNuke = rval.m_PollutionCausedByNuke;

        m_MaxMatchListCycles = rval.m_MaxMatchListCycles;

        m_MinTurnsBetweenRevolts = rval.m_MinTurnsBetweenRevolts;

        m_MaxCityWonders = rval.m_MaxCityWonders;

        m_MaxCityBuildings = rval.m_MaxCityBuildings;

        m_CapturedCityKillPop = rval.m_CapturedCityKillPop;

        m_CombatEliteChance = rval.m_CombatEliteChance;

        m_CombatLeaderChance = rval.m_CombatLeaderChance;

        m_CityOnTradeRouteCoeff = rval.m_CityOnTradeRouteCoeff;

        m_CityExpansionDenominator = rval.m_CityExpansionDenominator;

        m_TurnsAcceptedForOnePop = rval.m_TurnsAcceptedForOnePop;

        m_UseBaseMoveCostsForRoads = rval.m_UseBaseMoveCostsForRoads;

        m_RoadAlreadyThereCostsCoefficient = rval.m_RoadAlreadyThereCostsCoefficient;

        m_BuildRoadsToClosestCities = rval.m_BuildRoadsToClosestCities;

        m_BaseRoadPriorityVsThreatRank = rval.m_BaseRoadPriorityVsThreatRank;

        m_CosiderNumCitiesForSlaves = rval.m_CosiderNumCitiesForSlaves;

        m_SmallCityImproveCoeff = rval.m_SmallCityImproveCoeff;

    }

    return *this;
}

const char *g_Const_Tokens[] =
{
    "PercentLand",
    "PercentContinent",
    "PercentHomogenious",
    "MeridianA",
    "MeridianB",
    "MeridianC",
    "MeridianD",
    "MeridianE",
    "MeridianF",
    "HLevelA",
    "HLevelB",
    "HLevelC",
    "HLevelD",
    "ForestWet",
    "GrassWet",
    "PlainsWet",
    "DesertWet",
    "ForestDry",
    "GrassDry",
    "PlainsDry",
    "DesertDry",
    "WhiteWarm",
    "BrownWarm",
    "TemperatureRangeAdjustWarm",
    "WhiteCold",
    "BrownCold",
    "TemperatureRangeAdjustCold",
    "RichnessFewGoods",
    "RiverCellWidthFewGoods",
    "RiverCellHeightFewGoods",
    "RichnessManyGoods",
    "RiverCellWidthManyGoods",
    "RiverCellHeightManyGoods",
    "PercentMountain",
    "MountainCell",
    "PercentHills",
    "MountainSpread",
    "MountainLength",
    "GlacierExtend",
    "PercentVolcano",
    "PercentTrench",
    "PercentForest",
    "PercentGras",
    "PercentPlains",
    "PercentDesert",
    "PercentWhite",
    "PercentBrown",
    "TemperatureRangeAdjust",
    "NiceRadius",
    "PercentRiver",
    "RiverLength",
    "RiverCellWidth",
    "RiverCellHeight",
    "Richness",
    "ChanceLostAtSea",
    "VeteranCoef",
    "RevolutionLevel",
    "DiscoveriesPollutionSizeModifier",
    "DiscoveriesPollutionProductionModifier",
    "AveragePollutionTurns",
    "PopulationProducesPollutionThreshold",
    "ProductionProducesPollutionThreshold",
    "MaxEmpireDistCost",
    "HappinessLaunchCost",
    "UnitWorkday",
    "BaseWorkday",
    "UnitWages",
    "BaseWages",
    "UnitRations",
    "BaseRations",
    "ChangeCurrentlyBuildingItemPenalty",
    "TariffReduction",
    "RevoltInfluenceDistance",
    "PactCaptureCityExpires",
    "RewardCaptureCityExpires",
    "CeaseFireExpires",
    "ShortCeaseFireExpires",
    "EndOfGameYearEarlyWarning",
    "EndOfGameYear",
    "CaptureCityForGoldMultiplyer",
    "PactEndPollutionExpires",
    "LeaveOurLandsExpires",
    "ReducePollutionExpires",
    "DestroyEnemyForRewardExpires",
    "PatienceLostPerRequest",
    "PatienceRegainedPerRound",
    "RegainPatienceProbability",
    "PatienceLostThreshold",
    "AIGoalTimeSlice",
    "AIMaxTimeSlice",
    "AITotalTimeSlice",
    "EntrenchmentBonus",
    "ParadropDistance",
    "ParadropSuccessPercent",
    "EliteSpyBonus",
    "CitySecondAttemptSpyBonus",
    "AssasinationHappinessEffect",
    "AssasinationHappinessEffectTimer",
    "SpiedUponWarinessTimer",
    "MaxPartyCost",
    "MaxPartyChance",
    "GossipMapRadius",
    "HearGossipChance",
    "FranchiseEffect",
    "TurnsFranchised",
    "TurnsToSueFranchise",
    "SlaverEliteChance",
    "EliteSlaverBonus",
    "AbolitionistEliteChance",
    "EliteAbolitionistBonus",
    "WatchfulCitySuccessModifier",
    "WatchfulCityDeathModifier",
    "WatchfulCityTurns",
    "BioInfectionTurns",
    "NanoInfectionTurns",
    "BioInfectionSpreadChance",
    "NanoInfectionSpreadChance",
    "PlagueKillPercentage",
    "EliteTerroristBonus",
    "TerroistEliteChance",
    "NukePopulationPercentage",
    "SpecialActionMoveCost",
    "ClericConversionFactor",
    "TelevangelistConversionFactor",
    "ReformationChance",
    "ReformationDeathChance",
    "ReformationHappinessTime",
    "ReformationHappinessAmount",
    "UnconvertedIndulgenceGold",
    "UnconvertedIndulgenceHappiness",
    "ConvertedIndulgenceGold",
    "ConvertedIndulgenceHappiness",
    "OtherFaithIndulgenceGold",
    "OtherFaithIndulgenceHappiness",
    "SoothsayHappyAmount",
    "RuinsBoxWidth",
    "RuinsBoxHeight",
    "RuinsChancePerBox",
    "MaxRuinsGold",
    "MaxRuinsAdvance",
    "MaxRuinsUnit",
    "UnitRushModifier",
    "BuildingRushModifier",
    "WonderRushModifier",
    "BuildingProductionToValueModifier",
    "MonopolyThreshold",
    "PopulationPollutionWarningThreshold",
    "IndustrialPollutionWarningThreshold",
    "VeryHappyThreshold",
    "CityGrowthCoefficient",
    "RiotLevel",
    "PowerPointsToMaterials",
    "MaxAirliftStackSize",
    "GoldFromPiracy",
    "NoPiracyExpires",
    "SpaceLaunchCost",
    "SpaceLandCost",
    "WormholeOrbitHeightPercentage",
    "WormholeSpeed",
    "WormholeReturnTime",
    "WormholeVisibleToAllTurns",
    "MaxGovernmentChangeTurns",
    "PollutionForcesAnarchy",
    "FoodToPollutionCoef",
    "EmancipationUnhappinessTurns",
    "EmancipationUnhappinessAmount",
    "CaptureCityAdvanceChance",
    "CityHealRate",
    "NormalHealRate",
    "LocalPollutionLevel",
    "LocalPollutionChance",
    "AssaultDestroyBuildingChance",
    "BombardDestroyBuildingChance",
    "AdvanceChoicesMin",
    "AdvanceChoicesMax",
    "AttackConverterUnhappinessTurns",
    "AttackConverterUnhappinessAmount",
    "MinStartDistanceCoefficient",
    "MaxStartDistanceCoefficient",
    "MaxSameTiles",
    "CombatVeteranChance",
    "StopTradeRounds",
    "LeaveOurLandsRounds",
    "ReducePollutionRounds",
    "CaptureCityRounds",
    "EndPollutionRounds",
    "AttackEnemyRounds",
    "MinContinentStartSize",
    "BombardKillPopChance",
    "AssaultKillPopChance",
    "CaptureKillPopChance",
    "ScaledPopAncient",
    "ScaledPopRenaissance",
    "ScaledPopModern",
    "ScaledPopGenetic",
    "ScaledPopDiamond",
    "PiracyKillsTraderChance",
    "UprisingChancePerUnguardedSlave",
    "MaxDisbandSize",
    "MaxRequestsPerPlayerPerTurn",
    "SlavesPerMilitaryUnit",
    "MinAbsoluteStartDistance",
    "MapSizeSmall",
    "MapSizeMedium",
    "MapSizeLarge",
    "MapSizeGigantic",
    "RailLaunchPollution",
    "SpaceFuelCost",
    "NonSpaceFuelCost",
    "StarvationWarningFudgeFactor",
    "MaintenanceWarningFudgeFactor",
    "SupportWarningFudgeFactor",
    "RelativeAIProductionCheatCoef",
    "RelativeAIScienceCheatCoef",
    "NukeKillsTiles",
    "InciteRevolutionGoldCoefficient",
    "InciteRevolutionCapitolPenalty",
    "InciteUprisingGoldCoefficient",
    "InciteUprisingCapitolPenalty",
    "BioInfectionUnhappiness",
    "MinEcoPactViolationLevel",
    "NanoInfectionTerroristDeathChance",
    "BioInfectionTerroristDeathChance",
    "FloodChangesCoastToWaterChance",
    "AICheatEcoPactMin",
    "AICheatEcoPactMax",
    "MaxAbsoluteGrowthRate",
    "TradeDistanceCoefficient",
    "MinLikeTilesForGood",
    "MinGoodValue",
    "MaxGoodValue",
    "PiracyWasteCoefficient",
    "BorderIntRadius",
    "BorderSquaredRadius",
    "BioInfectionProductionCoef",
    "NanoBuildingKillPercentage",
    "BaseStarvationProtection",
    "CaravanCoef",
    "DomesticTradeReduction",
    "TradePactCoef",
    "PollutionCausedByNuke",
    "MaxMatchListCycles",
    "MinTurnsBetweenRevolts",
    "MaxCityWonders",
    "MaxCityBuildings",
    "CapturedCityKillPop",
    "CombatEliteChance",
    "CombatLeaderChance",
    "CityOnTradeRouteCoeff",
    "CityExpansionDenominator",
    "TurnsAcceptedForOnePop",
    "UseBaseMoveCostsForRoads",
    "RoadAlreadyThereCostsCoefficient",
    "BuildRoadsToClosestCities",
    "BaseRoadPriorityVsThreatRank",
    "CosiderNumCitiesForSlaves",
    "SmallCityImproveCoeff",
    "PERCENT_LAND",
    "PERCENT_CONTINENT",
    "PERCENT_HOMOGENOUS",
    "MERIDIANA",
    "MERIDIANB",
    "MERIDIANC",
    "MERIDIAND",
    "MERIDIANE",
    "MERIDIANF",
    "HLEVELA",
    "HLEVELB",
    "HLEVELC",
    "HLEVELD",
    "FORESTWET",
    "GRASSWET",
    "PLAINSWET",
    "DESERTWET",
    "FORESTDRY",
    "GRASSDRY",
    "PLAINSDRY",
    "DESERTDRY",
    "WHITEWARM",
    "BROWNWARM",
    "TEMPERATURERANGEADJUSTWARM",
    "WHITECOLD",
    "BROWNCOLD",
    "TEMPERATURERANGEADJUSTCOLD",
    "RICHNESSFEWGOODS",
    "RIVERCELLWIDTHFEWGOODS",
    "RIVERCELLHEIGHTFEWGOODS",
    "RICHNESSMANYGOODS",
    "RIVERCELLWIDTHMANYGOODS",
    "RIVERCELLHEIGHTMANYGOODS",
    "PERCENT_MOUNTAIN",
    "MOUNTAIN_CELL",
    "PERCENT_HILLS",
    "MOUNTAIN_SPREAD",
    "MOUNTAIN_LENGTH",
    "GLACIER_EXTENT",
    "PERCENT_VOLCANO",
    "PERCENT_TRENCH",
    "PERCENT_FOREST",
    "PERCENT_GRASS",
    "PERCENT_PLAINS",
    "PERCENT_DESERT",
    "PERCENT_WHITE",
    "PERCENT_BROWN",
    "TEMPERATURE_RANGE_ADJUST",
    "NICE_RADIUS",
    "PERCENT_RIVER",
    "RIVER_LENGTH",
    "RIVER_CELL_WIDTH",
    "RIVER_CELL_HEIGHT",
    "RICHNESS",
    "CHANCE_LOST_AT_SEA",
    "VETERAN_COEF",
    "REVOLUTION_LEVEL",
    "DISCOVERIES_POLLUTION_SIZE_MODIFIER",
    "DISCOVERIES_POLLUTION_PRODUCTION_MODIFIER",
    "AVERAGE_POLLUTION_TURNS",
    "POPULATION_PRODUCES_POLLUTION_THRESHOLD",
    "PRODUCTION_PRODUCES_POLLUTION_THRESHOLD",
    "MAX_EMPIRE_DIST_COST",
    "HAPPINESS_LAUNCH_COST",
    "UNIT_WORKDAY",
    "BASE_WORKDAY",
    "UNIT_WAGES",
    "BASE_WAGES",
    "UNIT_RATIONS",
    "BASE_RATIONS",
    "CHANGE_CURRENTLY_BUILDING_ITEM_PENALTY",
    "TARIFF_REDUCTION",
    "REVOLT_INFLUENCE_DISTANCE",
    "PACT_CAPTURE_CITY_EXPIRES",
    "REWARD_CAPTURE_CITY_EXPIRES",
    "CEASE_FIRE_EXPIRES",
    "SHORT_CEASE_FIRE_EXPIRES",
    "END_OF_GAME_YEAR_EARLY_WARNING",
    "END_OF_GAME_YEAR",
    "CAPTURE_CITY_FOR_GOLD_MULTIPLIER",
    "PACT_END_POLLUTION_EXPIRES",
    "LEAVE_OUR_LANDS_EXPIRES",
    "REDUCE_POLLUTION_EXPIRES",
    "DESTROY_ENEMY_FOR_REWARD_EXPIRES",
    "PATIENCE_LOST_PER_REQUEST",
    "PATIENCE_REGAINED_PER_ROUND",
    "REGAIN_PATIENCE_PROBABILITY",
    "PATIENCE_LOST_THRESHOLD",
    "AI_GOAL_TIME_SLICE",
    "AI_MAX_TIME_SLICE",
    "AI_TOTAL_TIME_SLICE",
    "ENTRENCHMENT_BONUS",
    "PARADROP_DISTANCE",
    "PARADROP_SUCCESS_PERCENT",
    "ELITE_SPY_BONUS",
    "CITY_SECOND_ATTEMPT_SPY_BONUS",
    "ASSASINATION_HAPPINESS_EFFECT",
    "ASSASINATION_HAPPINESS_EFFECT_TIMER",
    "SPIED_UPON_WARINESS_TIMER",
    "MAX_PARTY_COST",
    "MAX_PARTY_CHANCE",
    "GOSSIP_MAP_RADIUS",
    "HEAR_GOSSIP_CHANCE",
    "FRANCHISE_EFFECT",
    "TURNS_FRANCHISED",
    "TURNS_TO_SUE_FRANCHISE",
    "SLAVER_ELITE_CHANCE",
    "ELITE_SLAVER_BONUS",
    "ABOLITIONIST_ELITE_CHANCE",
    "ELITE_ABOLITIONIST_BONUS",
    "WATCHFUL_CITY_SUCCESS_MODIFIER",
    "WATCHFUL_CITY_DEATH_MODIFIER",
    "WATCHFUL_CITY_TURNS",
    "BIO_INFECTION_TURNS",
    "NANO_INFECTION_TURNS",
    "BIO_INFECTION_SPREAD_CHANCE",
    "NANO_INFECTION_SPREAD_CHANCE",
    "PLAGUE_KILL_PERCENTAGE",
    "ELITE_TERRORIST_BONUS",
    "TERRORIST_ELITE_CHANCE",
    "NUKE_POPULATION_PERCENTAGE",
    "SPECIAL_ACTION_MOVE_COST",
    "CLERIC_CONVERSION_FACTOR",
    "TELEVANGELIST_CONVERSION_FACTOR",
    "REFORMATION_CHANCE",
    "REFORMATION_DEATH_CHANCE",
    "REFORMATION_HAPPINESS_TIME",
    "REFORMATION_HAPPINESS_AMOUNT",
    "UNCONVERTED_INDULGENCE_GOLD",
    "UNCONVERTED_INDULGENCE_HAPPINESS",
    "CONVERTED_INDULGENCE_GOLD",
    "CONVERTED_INDULGENCE_HAPPINESS",
    "OTHER_FAITH_INDULGENCE_GOLD",
    "OTHER_FAITH_INDULGENCE_HAPPINESS",
    "SOOTHSAY_HAPPY_AMOUNT",
    "RUINS_BOX_WIDTH",
    "RUINS_BOX_HEIGHT",
    "RUINS_CHANCE_PER_BOX",
    "MAX_RUINS_GOLD",
    "MAX_RUINS_ADVANCE",
    "MAX_RUINS_UNIT",
    "UNIT_RUSH_MODIFIER",
    "IMPROVEMENT_RUSH_MODIFIER",
    "WONDER_RUSH_MODIFIER",
    "BUILDING_PRODUCTION_TO_VALUE_MODIFIER",
    "MONOPOLY_THRESHOLD",
    "POPULATION_POLLUTION_WARNING_THRESHOLD",
    "INDUSTRIAL_POLLUTION_WARNING_THRESHOLD",
    "VERY_HAPPY_THRESHOLD",
    "CITY_GROWTH_COEFFICIENT",
    "RIOT_LEVEL",
    "POWER_POINTS_TO_MATERIALS",
    "MAX_AIRLIFT_STACK_SIZE",
    "GOLD_FROM_PIRACY",
    "NO_PIRACY_EXPIRES",
    "SPACE_LAUNCH_COST",
    "SPACE_LAND_COST",
    "WORMHOLE_ORBIT_HEIGHT_PERCENTAGE",
    "WORMHOLE_SPEED",
    "WORMHOLE_RETURN_TIME",
    "WORMHOLE_VISIBLE_TO_ALL_TURNS",
    "MAX_GOVERNMENT_CHANGE_TURNS",
    "POLLUTION_FORCES_ANARCHY",
    "FOOD_TO_POLLUTION_COEF",
    "EMANCIPATION_UNHAPPINESS_TURNS",
    "EMANCIPATION_UNHAPPINESS_AMOUNT",
    "CAPTURE_CITY_ADVANCE_CHANCE",
    "CITY_HEAL_RATE",
    "NORMAL_HEAL_RATE",
    "LOCAL_POLLUTION_LEVEL",
    "LOCAL_POLLUTION_CHANCE",
    "ASSAULT_DESTROY_BUILDING_CHANCE",
    "BOMBARD_DESTROY_BUILDING_CHANCE",
    "ADVANCE_CHOICES_MIN",
    "ADVANCE_CHOICES_MAX",
    "ATTACK_CONVERTER_UNHAPPINESS_TURNS",
    "ATTACK_CONVERTER_UNHAPPINESS_AMOUNT",
    "MIN_START_DISTANCE_COEFFICIENT",
    "MAX_START_DISTANCE_COEFFICIENT",
    "MAX_SAME_TILES",
    "COMBAT_VETERAN_CHANCE",
    "STOP_TRADE_ROUNDS",
    "LEAVE_OUR_LANDS_ROUNDS",
    "REDUCE_POLLUTION_ROUNDS",
    "CAPTURE_CITY_ROUNDS",
    "END_POLLUTION_ROUNDS",
    "ATTACK_ENEMY_ROUNDS",
    "MIN_CONTINENT_START_SIZE",
    "BOMBARD_KILL_POP_CHANCE",
    "ASSAULT_KILL_POP_CHANCE",
    "CAPTURE_KILL_POP_CHANCE",
    "SCALED_POP_ANCIENT",
    "SCALED_POP_RENAISSANCE",
    "SCALED_POP_MODERN",
    "SCALED_POP_GENETIC",
    "SCALED_POP_DIAMOND",
    "PIRACY_KILLS_TRADER_CHANCE",
    "UPRISING_CHANCE_PER_UNGUARDED_SLAVE",
    "MAX_DISBAND_SIZE",
    "MAX_REQUESTS_PER_PLAYER_PER_TURN",
    "SLAVES_PER_MILITARY_UNIT",
    "MIN_ABSOLUTE_START_DISTANCE",
    "MAP_SIZE_SMALL",
    "MAP_SIZE_MEDIUM",
    "MAP_SIZE_LARGE",
    "MAP_SIZE_GIGANTIC",
    "RAIL_LAUNCH_POLLUTION",
    "SPACE_FUEL_COST",
    "NON_SPACE_FUEL_COST",
    "STARVATION_WARNING_FUDGE_FACTOR",
    "MAINTENANCE_WARNING_FUDGE_FACTOR",
    "SUPPORT_WARNING_FUDGE_FACTOR",
    "RELATIVE_AI_PRODUCTION_CHEAT_COEF",
    "RELATIVE_AI_SCIENCE_CHEAT_COEF",
    "NUKE_KILL_TILES",
    "INCITE_REVOLUTION_GOLD_COEFFICIENT",
    "INCITE_REVOLUTION_CAPITOL_PENALTY",
    "INCITE_UPRISING_GOLD_COEFFICIENT",
    "INCITE_UPRISING_CAPITOL_PENALTY",
    "BIO_INFECTION_UNHAPPINESS",
    "MIN_ECO_PACT_VIOLATION_LEVEL",
    "NANO_INFECTION_TERRORIST_DEATH_CHANCE",
    "BIO_INFECTION_TERRORIST_DEATH_CHANCE",
    "FLOOD_CHANGES_COAST_TO_WATER_CHANCE",
    "AI_CHEAT_ECO_PACT_MIN",
    "AI_CHEAT_ECO_PACT_MAx",
    "MAX_ABSOLUTE_GROWTH_RATE",
    "TRADE_DISTANCE_COEFFICIENT",
    "MIN_LIKE_TILES_FOR_GOOD",
    "MIN_GOOD_VALUE",
    "MAX_GOOD_VALUE",
    "PIRACY_WASTE_COEFFICIENT",
    "BORDER_INT_RADIUS",
    "BORDER_SQUARED_RADIUS",
    "BIO_INFECTION_PRODUCTION_COEF",
    "NANO_BUILDING_KILL_PERCENTAGE",
    "BASE_STARVATION_PROTECTION",
    "CARAVAN_COEF",
    "DOMESTIC_TRADE_COEF",
    "PACT_TRADE_COEF",
    "POLLUTION_CAUSED_BY_NUKE",
    "MAX_MATCH_LIST_CYCLES",
    "MIN_TURNS_BETWEEN_REVOLT",
    "MAX_CITY_WONDERS",
    "MAX_CITY_BUILDINGS",
    "CAPTURED_CITY_KILL_POP",
    "COMBAT_ELITE_CHANCE",
    "COMBAT_LEADER_CHANCE",
    "CITY_ON_TRADE_ROUTE_BONUS",
    "CITY_EXPANSION_DENOMINATOR",
    "TURNS_ACCEPTED_FOR_ONE_POP",
};

ConstRecordAccessorInfo g_ConstRecord_Accessors[] =
{
    { &ConstRecord::GetPercentLand, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentContinent, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentHomogenious, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMeridianA, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMeridianB, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMeridianC, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMeridianD, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMeridianE, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMeridianF, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetHLevelA, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetHLevelB, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetHLevelC, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetHLevelD, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetForestWet, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetGrassWet, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPlainsWet, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetDesertWet, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetForestDry, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetGrassDry, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPlainsDry, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetDesertDry, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetWhiteWarm, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetBrownWarm, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetTemperatureRangeAdjustWarm, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetWhiteCold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetBrownCold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetTemperatureRangeAdjustCold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRichnessFewGoods, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRiverCellWidthFewGoods, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRiverCellHeightFewGoods, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRichnessManyGoods, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRiverCellWidthManyGoods, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRiverCellHeightManyGoods, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentMountain, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMountainCell, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentHills, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMountainSpread, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMountainLength, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetGlacierExtend, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentVolcano, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentTrench, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentForest, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentGras, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentPlains, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentDesert, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentWhite, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentBrown, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetTemperatureRangeAdjust, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetNiceRadius, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPercentRiver, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRiverLength, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRiverCellWidth, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRiverCellHeight, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRichness, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetChanceLostAtSea, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetVeteranCoef, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRevolutionLevel, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetDiscoveriesPollutionSizeModifier, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetDiscoveriesPollutionProductionModifier, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetAveragePollutionTurns, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPopulationProducesPollutionThreshold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetProductionProducesPollutionThreshold, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetMaxEmpireDistCost, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetHappinessLaunchCost, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetUnitWorkday, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetBaseWorkday, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetUnitWages, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetBaseWages, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetUnitRations, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetBaseRations, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetChangeCurrentlyBuildingItemPenalty, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetTariffReduction, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRevoltInfluenceDistance, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPactCaptureCityExpires, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRewardCaptureCityExpires, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetCeaseFireExpires, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetShortCeaseFireExpires, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetEndOfGameYearEarlyWarning, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetEndOfGameYear, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetCaptureCityForGoldMultiplyer, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPactEndPollutionExpires, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetLeaveOurLandsExpires, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetReducePollutionExpires, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetDestroyEnemyForRewardExpires, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPatienceLostPerRequest, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPatienceRegainedPerRound, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRegainPatienceProbability, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPatienceLostThreshold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetAIGoalTimeSlice, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetAIMaxTimeSlice, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetAITotalTimeSlice, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetEntrenchmentBonus, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetParadropDistance, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetParadropSuccessPercent, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetEliteSpyBonus, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetCitySecondAttemptSpyBonus, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetAssasinationHappinessEffect, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetAssasinationHappinessEffectTimer, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetSpiedUponWarinessTimer, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxPartyCost, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetMaxPartyChance, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetGossipMapRadius, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetHearGossipChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetFranchiseEffect, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetTurnsFranchised, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetTurnsToSueFranchise, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetSlaverEliteChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetEliteSlaverBonus, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetAbolitionistEliteChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetEliteAbolitionistBonus, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetWatchfulCitySuccessModifier, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetWatchfulCityDeathModifier, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetWatchfulCityTurns, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetBioInfectionTurns, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetNanoInfectionTurns, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetBioInfectionSpreadChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetNanoInfectionSpreadChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetPlagueKillPercentage, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetEliteTerroristBonus, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetTerroistEliteChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetNukePopulationPercentage, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetSpecialActionMoveCost, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetClericConversionFactor, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetTelevangelistConversionFactor, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetReformationChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetReformationDeathChance, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetReformationHappinessTime, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetReformationHappinessAmount, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetUnconvertedIndulgenceGold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetUnconvertedIndulgenceHappiness, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetConvertedIndulgenceGold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetConvertedIndulgenceHappiness, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetOtherFaithIndulgenceGold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetOtherFaithIndulgenceHappiness, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetSoothsayHappyAmount, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRuinsBoxWidth, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRuinsBoxHeight, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetRuinsChancePerBox, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxRuinsGold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxRuinsAdvance, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxRuinsUnit, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetUnitRushModifier, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetBuildingRushModifier, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetWonderRushModifier, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetBuildingProductionToValueModifier, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMonopolyThreshold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPopulationPollutionWarningThreshold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetIndustrialPollutionWarningThreshold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetVeryHappyThreshold, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetCityGrowthCoefficient, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetRiotLevel, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPowerPointsToMaterials, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxAirliftStackSize, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetGoldFromPiracy, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetNoPiracyExpires, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetSpaceLaunchCost, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetSpaceLandCost, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetWormholeOrbitHeightPercentage, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetWormholeSpeed, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetWormholeReturnTime, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetWormholeVisibleToAllTurns, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxGovernmentChangeTurns, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPollutionForcesAnarchy, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetFoodToPollutionCoef, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetEmancipationUnhappinessTurns, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetEmancipationUnhappinessAmount, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetCaptureCityAdvanceChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetCityHealRate, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetNormalHealRate, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetLocalPollutionLevel, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetLocalPollutionChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetAssaultDestroyBuildingChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetBombardDestroyBuildingChance, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetAdvanceChoicesMin, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetAdvanceChoicesMax, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetAttackConverterUnhappinessTurns, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetAttackConverterUnhappinessAmount, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetMinStartDistanceCoefficient, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetMaxStartDistanceCoefficient, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxSameTiles, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetCombatVeteranChance, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetStopTradeRounds, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetLeaveOurLandsRounds, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetReducePollutionRounds, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetCaptureCityRounds, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetEndPollutionRounds, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetAttackEnemyRounds, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMinContinentStartSize, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetBombardKillPopChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetAssaultKillPopChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetCaptureKillPopChance, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetScaledPopAncient, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetScaledPopRenaissance, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetScaledPopModern, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetScaledPopGenetic, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetScaledPopDiamond, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPiracyKillsTraderChance, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetUprisingChancePerUnguardedSlave, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxDisbandSize, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxRequestsPerPlayerPerTurn, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetSlavesPerMilitaryUnit, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMinAbsoluteStartDistance, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetNumMapSizeSmall, NULL, NULL, NULL, NULL, &ConstRecord::GetMapSizeSmall, NULL}, /* MapSizeSmall (array) */
    { &ConstRecord::GetNumMapSizeMedium, NULL, NULL, NULL, NULL, &ConstRecord::GetMapSizeMedium, NULL}, /* MapSizeMedium (array) */
    { &ConstRecord::GetNumMapSizeLarge, NULL, NULL, NULL, NULL, &ConstRecord::GetMapSizeLarge, NULL}, /* MapSizeLarge (array) */
    { &ConstRecord::GetNumMapSizeGigantic, NULL, NULL, NULL, NULL, &ConstRecord::GetMapSizeGigantic, NULL}, /* MapSizeGigantic (array) */
    { &ConstRecord::GetRailLaunchPollution, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetSpaceFuelCost, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetNonSpaceFuelCost, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetStarvationWarningFudgeFactor, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaintenanceWarningFudgeFactor, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetSupportWarningFudgeFactor, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetRelativeAIProductionCheatCoef, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetRelativeAIScienceCheatCoef, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetNukeKillsTiles, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetInciteRevolutionGoldCoefficient, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetInciteRevolutionCapitolPenalty, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetInciteUprisingGoldCoefficient, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetInciteUprisingCapitolPenalty, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetBioInfectionUnhappiness, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMinEcoPactViolationLevel, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetNanoInfectionTerroristDeathChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetBioInfectionTerroristDeathChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetFloodChangesCoastToWaterChance, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetAICheatEcoPactMin, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetAICheatEcoPactMax, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxAbsoluteGrowthRate, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetTradeDistanceCoefficient, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMinLikeTilesForGood, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetMinGoodValue, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetMaxGoodValue, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetPiracyWasteCoefficient, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetBorderIntRadius, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetBorderSquaredRadius, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetBioInfectionProductionCoef, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetNanoBuildingKillPercentage, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetBaseStarvationProtection, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetCaravanCoef, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetDomesticTradeReduction, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetTradePactCoef, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetPollutionCausedByNuke, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxMatchListCycles, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMinTurnsBetweenRevolts, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxCityWonders, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetMaxCityBuildings, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetCapturedCityKillPop, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetCombatEliteChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetCombatLeaderChance, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetCityOnTradeRouteCoeff, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetCityExpansionDenominator, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetTurnsAcceptedForOnePop, NULL, NULL, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetUseBaseMoveCostsForRoads, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetRoadAlreadyThereCostsCoefficient, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetBuildRoadsToClosestCities, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetBaseRoadPriorityVsThreatRank, NULL, NULL, NULL, NULL },
    { &ConstRecord::GetCosiderNumCitiesForSlaves, NULL, NULL, NULL, NULL, NULL, NULL },
    { NULL, NULL, &ConstRecord::GetSmallCityImproveCoeff, NULL, NULL, NULL, NULL },
};

#define k_Token_Const_PercentLand                ((k_Token_Custom_Base) + 0)
#define k_Token_Const_PercentContinent           ((k_Token_Custom_Base) + 1)
#define k_Token_Const_PercentHomogenious         ((k_Token_Custom_Base) + 2)
#define k_Token_Const_MeridianA                  ((k_Token_Custom_Base) + 3)
#define k_Token_Const_MeridianB                  ((k_Token_Custom_Base) + 4)
#define k_Token_Const_MeridianC                  ((k_Token_Custom_Base) + 5)
#define k_Token_Const_MeridianD                  ((k_Token_Custom_Base) + 6)
#define k_Token_Const_MeridianE                  ((k_Token_Custom_Base) + 7)
#define k_Token_Const_MeridianF                  ((k_Token_Custom_Base) + 8)
#define k_Token_Const_HLevelA                    ((k_Token_Custom_Base) + 9)
#define k_Token_Const_HLevelB                    ((k_Token_Custom_Base) + 10)
#define k_Token_Const_HLevelC                    ((k_Token_Custom_Base) + 11)
#define k_Token_Const_HLevelD                    ((k_Token_Custom_Base) + 12)
#define k_Token_Const_ForestWet                  ((k_Token_Custom_Base) + 13)
#define k_Token_Const_GrassWet                   ((k_Token_Custom_Base) + 14)
#define k_Token_Const_PlainsWet                  ((k_Token_Custom_Base) + 15)
#define k_Token_Const_DesertWet                  ((k_Token_Custom_Base) + 16)
#define k_Token_Const_ForestDry                  ((k_Token_Custom_Base) + 17)
#define k_Token_Const_GrassDry                   ((k_Token_Custom_Base) + 18)
#define k_Token_Const_PlainsDry                  ((k_Token_Custom_Base) + 19)
#define k_Token_Const_DesertDry                  ((k_Token_Custom_Base) + 20)
#define k_Token_Const_WhiteWarm                  ((k_Token_Custom_Base) + 21)
#define k_Token_Const_BrownWarm                  ((k_Token_Custom_Base) + 22)
#define k_Token_Const_TemperatureRangeAdjustWarm ((k_Token_Custom_Base) + 23)
#define k_Token_Const_WhiteCold                  ((k_Token_Custom_Base) + 24)
#define k_Token_Const_BrownCold                  ((k_Token_Custom_Base) + 25)
#define k_Token_Const_TemperatureRangeAdjustCold ((k_Token_Custom_Base) + 26)
#define k_Token_Const_RichnessFewGoods           ((k_Token_Custom_Base) + 27)
#define k_Token_Const_RiverCellWidthFewGoods     ((k_Token_Custom_Base) + 28)
#define k_Token_Const_RiverCellHeightFewGoods    ((k_Token_Custom_Base) + 29)
#define k_Token_Const_RichnessManyGoods          ((k_Token_Custom_Base) + 30)
#define k_Token_Const_RiverCellWidthManyGoods    ((k_Token_Custom_Base) + 31)
#define k_Token_Const_RiverCellHeightManyGoods   ((k_Token_Custom_Base) + 32)
#define k_Token_Const_PercentMountain            ((k_Token_Custom_Base) + 33)
#define k_Token_Const_MountainCell               ((k_Token_Custom_Base) + 34)
#define k_Token_Const_PercentHills               ((k_Token_Custom_Base) + 35)
#define k_Token_Const_MountainSpread             ((k_Token_Custom_Base) + 36)
#define k_Token_Const_MountainLength             ((k_Token_Custom_Base) + 37)
#define k_Token_Const_GlacierExtend              ((k_Token_Custom_Base) + 38)
#define k_Token_Const_PercentVolcano             ((k_Token_Custom_Base) + 39)
#define k_Token_Const_PercentTrench              ((k_Token_Custom_Base) + 40)
#define k_Token_Const_PercentForest              ((k_Token_Custom_Base) + 41)
#define k_Token_Const_PercentGras                ((k_Token_Custom_Base) + 42)
#define k_Token_Const_PercentPlains              ((k_Token_Custom_Base) + 43)
#define k_Token_Const_PercentDesert              ((k_Token_Custom_Base) + 44)
#define k_Token_Const_PercentWhite               ((k_Token_Custom_Base) + 45)
#define k_Token_Const_PercentBrown               ((k_Token_Custom_Base) + 46)
#define k_Token_Const_TemperatureRangeAdjust     ((k_Token_Custom_Base) + 47)
#define k_Token_Const_NiceRadius                 ((k_Token_Custom_Base) + 48)
#define k_Token_Const_PercentRiver               ((k_Token_Custom_Base) + 49)
#define k_Token_Const_RiverLength                ((k_Token_Custom_Base) + 50)
#define k_Token_Const_RiverCellWidth             ((k_Token_Custom_Base) + 51)
#define k_Token_Const_RiverCellHeight            ((k_Token_Custom_Base) + 52)
#define k_Token_Const_Richness                   ((k_Token_Custom_Base) + 53)
#define k_Token_Const_ChanceLostAtSea            ((k_Token_Custom_Base) + 54)
#define k_Token_Const_VeteranCoef                ((k_Token_Custom_Base) + 55)
#define k_Token_Const_RevolutionLevel            ((k_Token_Custom_Base) + 56)
#define k_Token_Const_DiscoveriesPollutionSizeModifier ((k_Token_Custom_Base) + 57)
#define k_Token_Const_DiscoveriesPollutionProductionModifier ((k_Token_Custom_Base) + 58)
#define k_Token_Const_AveragePollutionTurns      ((k_Token_Custom_Base) + 59)
#define k_Token_Const_PopulationProducesPollutionThreshold ((k_Token_Custom_Base) + 60)
#define k_Token_Const_ProductionProducesPollutionThreshold ((k_Token_Custom_Base) + 61)
#define k_Token_Const_MaxEmpireDistCost          ((k_Token_Custom_Base) + 62)
#define k_Token_Const_HappinessLaunchCost        ((k_Token_Custom_Base) + 63)
#define k_Token_Const_UnitWorkday                ((k_Token_Custom_Base) + 64)
#define k_Token_Const_BaseWorkday                ((k_Token_Custom_Base) + 65)
#define k_Token_Const_UnitWages                  ((k_Token_Custom_Base) + 66)
#define k_Token_Const_BaseWages                  ((k_Token_Custom_Base) + 67)
#define k_Token_Const_UnitRations                ((k_Token_Custom_Base) + 68)
#define k_Token_Const_BaseRations                ((k_Token_Custom_Base) + 69)
#define k_Token_Const_ChangeCurrentlyBuildingItemPenalty ((k_Token_Custom_Base) + 70)
#define k_Token_Const_TariffReduction            ((k_Token_Custom_Base) + 71)
#define k_Token_Const_RevoltInfluenceDistance    ((k_Token_Custom_Base) + 72)
#define k_Token_Const_PactCaptureCityExpires     ((k_Token_Custom_Base) + 73)
#define k_Token_Const_RewardCaptureCityExpires   ((k_Token_Custom_Base) + 74)
#define k_Token_Const_CeaseFireExpires           ((k_Token_Custom_Base) + 75)
#define k_Token_Const_ShortCeaseFireExpires      ((k_Token_Custom_Base) + 76)
#define k_Token_Const_EndOfGameYearEarlyWarning  ((k_Token_Custom_Base) + 77)
#define k_Token_Const_EndOfGameYear              ((k_Token_Custom_Base) + 78)
#define k_Token_Const_CaptureCityForGoldMultiplyer ((k_Token_Custom_Base) + 79)
#define k_Token_Const_PactEndPollutionExpires    ((k_Token_Custom_Base) + 80)
#define k_Token_Const_LeaveOurLandsExpires       ((k_Token_Custom_Base) + 81)
#define k_Token_Const_ReducePollutionExpires     ((k_Token_Custom_Base) + 82)
#define k_Token_Const_DestroyEnemyForRewardExpires ((k_Token_Custom_Base) + 83)
#define k_Token_Const_PatienceLostPerRequest     ((k_Token_Custom_Base) + 84)
#define k_Token_Const_PatienceRegainedPerRound   ((k_Token_Custom_Base) + 85)
#define k_Token_Const_RegainPatienceProbability  ((k_Token_Custom_Base) + 86)
#define k_Token_Const_PatienceLostThreshold      ((k_Token_Custom_Base) + 87)
#define k_Token_Const_AIGoalTimeSlice            ((k_Token_Custom_Base) + 88)
#define k_Token_Const_AIMaxTimeSlice             ((k_Token_Custom_Base) + 89)
#define k_Token_Const_AITotalTimeSlice           ((k_Token_Custom_Base) + 90)
#define k_Token_Const_EntrenchmentBonus          ((k_Token_Custom_Base) + 91)
#define k_Token_Const_ParadropDistance           ((k_Token_Custom_Base) + 92)
#define k_Token_Const_ParadropSuccessPercent     ((k_Token_Custom_Base) + 93)
#define k_Token_Const_EliteSpyBonus              ((k_Token_Custom_Base) + 94)
#define k_Token_Const_CitySecondAttemptSpyBonus  ((k_Token_Custom_Base) + 95)
#define k_Token_Const_AssasinationHappinessEffect ((k_Token_Custom_Base) + 96)
#define k_Token_Const_AssasinationHappinessEffectTimer ((k_Token_Custom_Base) + 97)
#define k_Token_Const_SpiedUponWarinessTimer     ((k_Token_Custom_Base) + 98)
#define k_Token_Const_MaxPartyCost               ((k_Token_Custom_Base) + 99)
#define k_Token_Const_MaxPartyChance             ((k_Token_Custom_Base) + 100)
#define k_Token_Const_GossipMapRadius            ((k_Token_Custom_Base) + 101)
#define k_Token_Const_HearGossipChance           ((k_Token_Custom_Base) + 102)
#define k_Token_Const_FranchiseEffect            ((k_Token_Custom_Base) + 103)
#define k_Token_Const_TurnsFranchised            ((k_Token_Custom_Base) + 104)
#define k_Token_Const_TurnsToSueFranchise        ((k_Token_Custom_Base) + 105)
#define k_Token_Const_SlaverEliteChance          ((k_Token_Custom_Base) + 106)
#define k_Token_Const_EliteSlaverBonus           ((k_Token_Custom_Base) + 107)
#define k_Token_Const_AbolitionistEliteChance    ((k_Token_Custom_Base) + 108)
#define k_Token_Const_EliteAbolitionistBonus     ((k_Token_Custom_Base) + 109)
#define k_Token_Const_WatchfulCitySuccessModifier ((k_Token_Custom_Base) + 110)
#define k_Token_Const_WatchfulCityDeathModifier  ((k_Token_Custom_Base) + 111)
#define k_Token_Const_WatchfulCityTurns          ((k_Token_Custom_Base) + 112)
#define k_Token_Const_BioInfectionTurns          ((k_Token_Custom_Base) + 113)
#define k_Token_Const_NanoInfectionTurns         ((k_Token_Custom_Base) + 114)
#define k_Token_Const_BioInfectionSpreadChance   ((k_Token_Custom_Base) + 115)
#define k_Token_Const_NanoInfectionSpreadChance  ((k_Token_Custom_Base) + 116)
#define k_Token_Const_PlagueKillPercentage       ((k_Token_Custom_Base) + 117)
#define k_Token_Const_EliteTerroristBonus        ((k_Token_Custom_Base) + 118)
#define k_Token_Const_TerroistEliteChance        ((k_Token_Custom_Base) + 119)
#define k_Token_Const_NukePopulationPercentage   ((k_Token_Custom_Base) + 120)
#define k_Token_Const_SpecialActionMoveCost      ((k_Token_Custom_Base) + 121)
#define k_Token_Const_ClericConversionFactor     ((k_Token_Custom_Base) + 122)
#define k_Token_Const_TelevangelistConversionFactor ((k_Token_Custom_Base) + 123)
#define k_Token_Const_ReformationChance          ((k_Token_Custom_Base) + 124)
#define k_Token_Const_ReformationDeathChance     ((k_Token_Custom_Base) + 125)
#define k_Token_Const_ReformationHappinessTime   ((k_Token_Custom_Base) + 126)
#define k_Token_Const_ReformationHappinessAmount ((k_Token_Custom_Base) + 127)
#define k_Token_Const_UnconvertedIndulgenceGold  ((k_Token_Custom_Base) + 128)
#define k_Token_Const_UnconvertedIndulgenceHappiness ((k_Token_Custom_Base) + 129)
#define k_Token_Const_ConvertedIndulgenceGold    ((k_Token_Custom_Base) + 130)
#define k_Token_Const_ConvertedIndulgenceHappiness ((k_Token_Custom_Base) + 131)
#define k_Token_Const_OtherFaithIndulgenceGold   ((k_Token_Custom_Base) + 132)
#define k_Token_Const_OtherFaithIndulgenceHappiness ((k_Token_Custom_Base) + 133)
#define k_Token_Const_SoothsayHappyAmount        ((k_Token_Custom_Base) + 134)
#define k_Token_Const_RuinsBoxWidth              ((k_Token_Custom_Base) + 135)
#define k_Token_Const_RuinsBoxHeight             ((k_Token_Custom_Base) + 136)
#define k_Token_Const_RuinsChancePerBox          ((k_Token_Custom_Base) + 137)
#define k_Token_Const_MaxRuinsGold               ((k_Token_Custom_Base) + 138)
#define k_Token_Const_MaxRuinsAdvance            ((k_Token_Custom_Base) + 139)
#define k_Token_Const_MaxRuinsUnit               ((k_Token_Custom_Base) + 140)
#define k_Token_Const_UnitRushModifier           ((k_Token_Custom_Base) + 141)
#define k_Token_Const_BuildingRushModifier       ((k_Token_Custom_Base) + 142)
#define k_Token_Const_WonderRushModifier         ((k_Token_Custom_Base) + 143)
#define k_Token_Const_BuildingProductionToValueModifier ((k_Token_Custom_Base) + 144)
#define k_Token_Const_MonopolyThreshold          ((k_Token_Custom_Base) + 145)
#define k_Token_Const_PopulationPollutionWarningThreshold ((k_Token_Custom_Base) + 146)
#define k_Token_Const_IndustrialPollutionWarningThreshold ((k_Token_Custom_Base) + 147)
#define k_Token_Const_VeryHappyThreshold         ((k_Token_Custom_Base) + 148)
#define k_Token_Const_CityGrowthCoefficient      ((k_Token_Custom_Base) + 149)
#define k_Token_Const_RiotLevel                  ((k_Token_Custom_Base) + 150)
#define k_Token_Const_PowerPointsToMaterials     ((k_Token_Custom_Base) + 151)
#define k_Token_Const_MaxAirliftStackSize        ((k_Token_Custom_Base) + 152)
#define k_Token_Const_GoldFromPiracy             ((k_Token_Custom_Base) + 153)
#define k_Token_Const_NoPiracyExpires            ((k_Token_Custom_Base) + 154)
#define k_Token_Const_SpaceLaunchCost            ((k_Token_Custom_Base) + 155)
#define k_Token_Const_SpaceLandCost              ((k_Token_Custom_Base) + 156)
#define k_Token_Const_WormholeOrbitHeightPercentage ((k_Token_Custom_Base) + 157)
#define k_Token_Const_WormholeSpeed              ((k_Token_Custom_Base) + 158)
#define k_Token_Const_WormholeReturnTime         ((k_Token_Custom_Base) + 159)
#define k_Token_Const_WormholeVisibleToAllTurns  ((k_Token_Custom_Base) + 160)
#define k_Token_Const_MaxGovernmentChangeTurns   ((k_Token_Custom_Base) + 161)
#define k_Token_Const_PollutionForcesAnarchy     ((k_Token_Custom_Base) + 162)
#define k_Token_Const_FoodToPollutionCoef        ((k_Token_Custom_Base) + 163)
#define k_Token_Const_EmancipationUnhappinessTurns ((k_Token_Custom_Base) + 164)
#define k_Token_Const_EmancipationUnhappinessAmount ((k_Token_Custom_Base) + 165)
#define k_Token_Const_CaptureCityAdvanceChance   ((k_Token_Custom_Base) + 166)
#define k_Token_Const_CityHealRate               ((k_Token_Custom_Base) + 167)
#define k_Token_Const_NormalHealRate             ((k_Token_Custom_Base) + 168)
#define k_Token_Const_LocalPollutionLevel        ((k_Token_Custom_Base) + 169)
#define k_Token_Const_LocalPollutionChance       ((k_Token_Custom_Base) + 170)
#define k_Token_Const_AssaultDestroyBuildingChance ((k_Token_Custom_Base) + 171)
#define k_Token_Const_BombardDestroyBuildingChance ((k_Token_Custom_Base) + 172)
#define k_Token_Const_AdvanceChoicesMin          ((k_Token_Custom_Base) + 173)
#define k_Token_Const_AdvanceChoicesMax          ((k_Token_Custom_Base) + 174)
#define k_Token_Const_AttackConverterUnhappinessTurns ((k_Token_Custom_Base) + 175)
#define k_Token_Const_AttackConverterUnhappinessAmount ((k_Token_Custom_Base) + 176)
#define k_Token_Const_MinStartDistanceCoefficient ((k_Token_Custom_Base) + 177)
#define k_Token_Const_MaxStartDistanceCoefficient ((k_Token_Custom_Base) + 178)
#define k_Token_Const_MaxSameTiles               ((k_Token_Custom_Base) + 179)
#define k_Token_Const_CombatVeteranChance        ((k_Token_Custom_Base) + 180)
#define k_Token_Const_StopTradeRounds            ((k_Token_Custom_Base) + 181)
#define k_Token_Const_LeaveOurLandsRounds        ((k_Token_Custom_Base) + 182)
#define k_Token_Const_ReducePollutionRounds      ((k_Token_Custom_Base) + 183)
#define k_Token_Const_CaptureCityRounds          ((k_Token_Custom_Base) + 184)
#define k_Token_Const_EndPollutionRounds         ((k_Token_Custom_Base) + 185)
#define k_Token_Const_AttackEnemyRounds          ((k_Token_Custom_Base) + 186)
#define k_Token_Const_MinContinentStartSize      ((k_Token_Custom_Base) + 187)
#define k_Token_Const_BombardKillPopChance       ((k_Token_Custom_Base) + 188)
#define k_Token_Const_AssaultKillPopChance       ((k_Token_Custom_Base) + 189)
#define k_Token_Const_CaptureKillPopChance       ((k_Token_Custom_Base) + 190)
#define k_Token_Const_ScaledPopAncient           ((k_Token_Custom_Base) + 191)
#define k_Token_Const_ScaledPopRenaissance       ((k_Token_Custom_Base) + 192)
#define k_Token_Const_ScaledPopModern            ((k_Token_Custom_Base) + 193)
#define k_Token_Const_ScaledPopGenetic           ((k_Token_Custom_Base) + 194)
#define k_Token_Const_ScaledPopDiamond           ((k_Token_Custom_Base) + 195)
#define k_Token_Const_PiracyKillsTraderChance    ((k_Token_Custom_Base) + 196)
#define k_Token_Const_UprisingChancePerUnguardedSlave ((k_Token_Custom_Base) + 197)
#define k_Token_Const_MaxDisbandSize             ((k_Token_Custom_Base) + 198)
#define k_Token_Const_MaxRequestsPerPlayerPerTurn ((k_Token_Custom_Base) + 199)
#define k_Token_Const_SlavesPerMilitaryUnit      ((k_Token_Custom_Base) + 200)
#define k_Token_Const_MinAbsoluteStartDistance   ((k_Token_Custom_Base) + 201)
#define k_Token_Const_MapSizeSmall               ((k_Token_Custom_Base) + 202)
#define k_Token_Const_MapSizeMedium              ((k_Token_Custom_Base) + 203)
#define k_Token_Const_MapSizeLarge               ((k_Token_Custom_Base) + 204)
#define k_Token_Const_MapSizeGigantic            ((k_Token_Custom_Base) + 205)
#define k_Token_Const_RailLaunchPollution        ((k_Token_Custom_Base) + 206)
#define k_Token_Const_SpaceFuelCost              ((k_Token_Custom_Base) + 207)
#define k_Token_Const_NonSpaceFuelCost           ((k_Token_Custom_Base) + 208)
#define k_Token_Const_StarvationWarningFudgeFactor ((k_Token_Custom_Base) + 209)
#define k_Token_Const_MaintenanceWarningFudgeFactor ((k_Token_Custom_Base) + 210)
#define k_Token_Const_SupportWarningFudgeFactor  ((k_Token_Custom_Base) + 211)
#define k_Token_Const_RelativeAIProductionCheatCoef ((k_Token_Custom_Base) + 212)
#define k_Token_Const_RelativeAIScienceCheatCoef ((k_Token_Custom_Base) + 213)
#define k_Token_Const_NukeKillsTiles             ((k_Token_Custom_Base) + 214)
#define k_Token_Const_InciteRevolutionGoldCoefficient ((k_Token_Custom_Base) + 215)
#define k_Token_Const_InciteRevolutionCapitolPenalty ((k_Token_Custom_Base) + 216)
#define k_Token_Const_InciteUprisingGoldCoefficient ((k_Token_Custom_Base) + 217)
#define k_Token_Const_InciteUprisingCapitolPenalty ((k_Token_Custom_Base) + 218)
#define k_Token_Const_BioInfectionUnhappiness    ((k_Token_Custom_Base) + 219)
#define k_Token_Const_MinEcoPactViolationLevel   ((k_Token_Custom_Base) + 220)
#define k_Token_Const_NanoInfectionTerroristDeathChance ((k_Token_Custom_Base) + 221)
#define k_Token_Const_BioInfectionTerroristDeathChance ((k_Token_Custom_Base) + 222)
#define k_Token_Const_FloodChangesCoastToWaterChance ((k_Token_Custom_Base) + 223)
#define k_Token_Const_AICheatEcoPactMin          ((k_Token_Custom_Base) + 224)
#define k_Token_Const_AICheatEcoPactMax          ((k_Token_Custom_Base) + 225)
#define k_Token_Const_MaxAbsoluteGrowthRate      ((k_Token_Custom_Base) + 226)
#define k_Token_Const_TradeDistanceCoefficient   ((k_Token_Custom_Base) + 227)
#define k_Token_Const_MinLikeTilesForGood        ((k_Token_Custom_Base) + 228)
#define k_Token_Const_MinGoodValue               ((k_Token_Custom_Base) + 229)
#define k_Token_Const_MaxGoodValue               ((k_Token_Custom_Base) + 230)
#define k_Token_Const_PiracyWasteCoefficient     ((k_Token_Custom_Base) + 231)
#define k_Token_Const_BorderIntRadius            ((k_Token_Custom_Base) + 232)
#define k_Token_Const_BorderSquaredRadius        ((k_Token_Custom_Base) + 233)
#define k_Token_Const_BioInfectionProductionCoef ((k_Token_Custom_Base) + 234)
#define k_Token_Const_NanoBuildingKillPercentage ((k_Token_Custom_Base) + 235)
#define k_Token_Const_BaseStarvationProtection   ((k_Token_Custom_Base) + 236)
#define k_Token_Const_CaravanCoef                ((k_Token_Custom_Base) + 237)
#define k_Token_Const_DomesticTradeReduction     ((k_Token_Custom_Base) + 238)
#define k_Token_Const_TradePactCoef              ((k_Token_Custom_Base) + 239)
#define k_Token_Const_PollutionCausedByNuke      ((k_Token_Custom_Base) + 240)
#define k_Token_Const_MaxMatchListCycles         ((k_Token_Custom_Base) + 241)
#define k_Token_Const_MinTurnsBetweenRevolts     ((k_Token_Custom_Base) + 242)
#define k_Token_Const_MaxCityWonders             ((k_Token_Custom_Base) + 243)
#define k_Token_Const_MaxCityBuildings           ((k_Token_Custom_Base) + 244)
#define k_Token_Const_CapturedCityKillPop        ((k_Token_Custom_Base) + 245)
#define k_Token_Const_CombatEliteChance          ((k_Token_Custom_Base) + 246)
#define k_Token_Const_CombatLeaderChance         ((k_Token_Custom_Base) + 247)
#define k_Token_Const_CityOnTradeRouteCoeff      ((k_Token_Custom_Base) + 248)
#define k_Token_Const_CityExpansionDenominator   ((k_Token_Custom_Base) + 249)
#define k_Token_Const_TurnsAcceptedForOnePop     ((k_Token_Custom_Base) + 250)
#define k_Token_Const_UseBaseMoveCostsForRoads   ((k_Token_Custom_Base) + 251)
#define k_Token_Const_RoadAlreadyThereCostsCoefficient ((k_Token_Custom_Base) + 252)
#define k_Token_Const_BuildRoadsToClosestCities  ((k_Token_Custom_Base) + 253)
#define k_Token_Const_BaseRoadPriorityVsThreatRank ((k_Token_Custom_Base) + 254)
#define k_Token_Const_CosiderNumCitiesForSlaves  ((k_Token_Custom_Base) + 255)
#define k_Token_Const_SmallCityImproveCoeff      ((k_Token_Custom_Base) + 256)
#define k_Token_Const_PERCENT_LAND               ((k_Token_Custom_Base) + 257)
#define k_Token_Const_PERCENT_CONTINENT          ((k_Token_Custom_Base) + 258)
#define k_Token_Const_PERCENT_HOMOGENOUS         ((k_Token_Custom_Base) + 259)
#define k_Token_Const_MERIDIANA                  ((k_Token_Custom_Base) + 260)
#define k_Token_Const_MERIDIANB                  ((k_Token_Custom_Base) + 261)
#define k_Token_Const_MERIDIANC                  ((k_Token_Custom_Base) + 262)
#define k_Token_Const_MERIDIAND                  ((k_Token_Custom_Base) + 263)
#define k_Token_Const_MERIDIANE                  ((k_Token_Custom_Base) + 264)
#define k_Token_Const_MERIDIANF                  ((k_Token_Custom_Base) + 265)
#define k_Token_Const_HLEVELA                    ((k_Token_Custom_Base) + 266)
#define k_Token_Const_HLEVELB                    ((k_Token_Custom_Base) + 267)
#define k_Token_Const_HLEVELC                    ((k_Token_Custom_Base) + 268)
#define k_Token_Const_HLEVELD                    ((k_Token_Custom_Base) + 269)
#define k_Token_Const_FORESTWET                  ((k_Token_Custom_Base) + 270)
#define k_Token_Const_GRASSWET                   ((k_Token_Custom_Base) + 271)
#define k_Token_Const_PLAINSWET                  ((k_Token_Custom_Base) + 272)
#define k_Token_Const_DESERTWET                  ((k_Token_Custom_Base) + 273)
#define k_Token_Const_FORESTDRY                  ((k_Token_Custom_Base) + 274)
#define k_Token_Const_GRASSDRY                   ((k_Token_Custom_Base) + 275)
#define k_Token_Const_PLAINSDRY                  ((k_Token_Custom_Base) + 276)
#define k_Token_Const_DESERTDRY                  ((k_Token_Custom_Base) + 277)
#define k_Token_Const_WHITEWARM                  ((k_Token_Custom_Base) + 278)
#define k_Token_Const_BROWNWARM                  ((k_Token_Custom_Base) + 279)
#define k_Token_Const_TEMPERATURERANGEADJUSTWARM ((k_Token_Custom_Base) + 280)
#define k_Token_Const_WHITECOLD                  ((k_Token_Custom_Base) + 281)
#define k_Token_Const_BROWNCOLD                  ((k_Token_Custom_Base) + 282)
#define k_Token_Const_TEMPERATURERANGEADJUSTCOLD ((k_Token_Custom_Base) + 283)
#define k_Token_Const_RICHNESSFEWGOODS           ((k_Token_Custom_Base) + 284)
#define k_Token_Const_RIVERCELLWIDTHFEWGOODS     ((k_Token_Custom_Base) + 285)
#define k_Token_Const_RIVERCELLHEIGHTFEWGOODS    ((k_Token_Custom_Base) + 286)
#define k_Token_Const_RICHNESSMANYGOODS          ((k_Token_Custom_Base) + 287)
#define k_Token_Const_RIVERCELLWIDTHMANYGOODS    ((k_Token_Custom_Base) + 288)
#define k_Token_Const_RIVERCELLHEIGHTMANYGOODS   ((k_Token_Custom_Base) + 289)
#define k_Token_Const_PERCENT_MOUNTAIN           ((k_Token_Custom_Base) + 290)
#define k_Token_Const_MOUNTAIN_CELL              ((k_Token_Custom_Base) + 291)
#define k_Token_Const_PERCENT_HILLS              ((k_Token_Custom_Base) + 292)
#define k_Token_Const_MOUNTAIN_SPREAD            ((k_Token_Custom_Base) + 293)
#define k_Token_Const_MOUNTAIN_LENGTH            ((k_Token_Custom_Base) + 294)
#define k_Token_Const_GLACIER_EXTENT             ((k_Token_Custom_Base) + 295)
#define k_Token_Const_PERCENT_VOLCANO            ((k_Token_Custom_Base) + 296)
#define k_Token_Const_PERCENT_TRENCH             ((k_Token_Custom_Base) + 297)
#define k_Token_Const_PERCENT_FOREST             ((k_Token_Custom_Base) + 298)
#define k_Token_Const_PERCENT_GRASS              ((k_Token_Custom_Base) + 299)
#define k_Token_Const_PERCENT_PLAINS             ((k_Token_Custom_Base) + 300)
#define k_Token_Const_PERCENT_DESERT             ((k_Token_Custom_Base) + 301)
#define k_Token_Const_PERCENT_WHITE              ((k_Token_Custom_Base) + 302)
#define k_Token_Const_PERCENT_BROWN              ((k_Token_Custom_Base) + 303)
#define k_Token_Const_TEMPERATURE_RANGE_ADJUST   ((k_Token_Custom_Base) + 304)
#define k_Token_Const_NICE_RADIUS                ((k_Token_Custom_Base) + 305)
#define k_Token_Const_PERCENT_RIVER              ((k_Token_Custom_Base) + 306)
#define k_Token_Const_RIVER_LENGTH               ((k_Token_Custom_Base) + 307)
#define k_Token_Const_RIVER_CELL_WIDTH           ((k_Token_Custom_Base) + 308)
#define k_Token_Const_RIVER_CELL_HEIGHT          ((k_Token_Custom_Base) + 309)
#define k_Token_Const_RICHNESS                   ((k_Token_Custom_Base) + 310)
#define k_Token_Const_CHANCE_LOST_AT_SEA         ((k_Token_Custom_Base) + 311)
#define k_Token_Const_VETERAN_COEF               ((k_Token_Custom_Base) + 312)
#define k_Token_Const_REVOLUTION_LEVEL           ((k_Token_Custom_Base) + 313)
#define k_Token_Const_DISCOVERIES_POLLUTION_SIZE_MODIFIER ((k_Token_Custom_Base) + 314)
#define k_Token_Const_DISCOVERIES_POLLUTION_PRODUCTION_MODIFIER ((k_Token_Custom_Base) + 315)
#define k_Token_Const_AVERAGE_POLLUTION_TURNS    ((k_Token_Custom_Base) + 316)
#define k_Token_Const_POPULATION_PRODUCES_POLLUTION_THRESHOLD ((k_Token_Custom_Base) + 317)
#define k_Token_Const_PRODUCTION_PRODUCES_POLLUTION_THRESHOLD ((k_Token_Custom_Base) + 318)
#define k_Token_Const_MAX_EMPIRE_DIST_COST       ((k_Token_Custom_Base) + 319)
#define k_Token_Const_HAPPINESS_LAUNCH_COST      ((k_Token_Custom_Base) + 320)
#define k_Token_Const_UNIT_WORKDAY               ((k_Token_Custom_Base) + 321)
#define k_Token_Const_BASE_WORKDAY               ((k_Token_Custom_Base) + 322)
#define k_Token_Const_UNIT_WAGES                 ((k_Token_Custom_Base) + 323)
#define k_Token_Const_BASE_WAGES                 ((k_Token_Custom_Base) + 324)
#define k_Token_Const_UNIT_RATIONS               ((k_Token_Custom_Base) + 325)
#define k_Token_Const_BASE_RATIONS               ((k_Token_Custom_Base) + 326)
#define k_Token_Const_CHANGE_CURRENTLY_BUILDING_ITEM_PENALTY ((k_Token_Custom_Base) + 327)
#define k_Token_Const_TARIFF_REDUCTION           ((k_Token_Custom_Base) + 328)
#define k_Token_Const_REVOLT_INFLUENCE_DISTANCE  ((k_Token_Custom_Base) + 329)
#define k_Token_Const_PACT_CAPTURE_CITY_EXPIRES  ((k_Token_Custom_Base) + 330)
#define k_Token_Const_REWARD_CAPTURE_CITY_EXPIRES ((k_Token_Custom_Base) + 331)
#define k_Token_Const_CEASE_FIRE_EXPIRES         ((k_Token_Custom_Base) + 332)
#define k_Token_Const_SHORT_CEASE_FIRE_EXPIRES   ((k_Token_Custom_Base) + 333)
#define k_Token_Const_END_OF_GAME_YEAR_EARLY_WARNING ((k_Token_Custom_Base) + 334)
#define k_Token_Const_END_OF_GAME_YEAR           ((k_Token_Custom_Base) + 335)
#define k_Token_Const_CAPTURE_CITY_FOR_GOLD_MULTIPLIER ((k_Token_Custom_Base) + 336)
#define k_Token_Const_PACT_END_POLLUTION_EXPIRES ((k_Token_Custom_Base) + 337)
#define k_Token_Const_LEAVE_OUR_LANDS_EXPIRES    ((k_Token_Custom_Base) + 338)
#define k_Token_Const_REDUCE_POLLUTION_EXPIRES   ((k_Token_Custom_Base) + 339)
#define k_Token_Const_DESTROY_ENEMY_FOR_REWARD_EXPIRES ((k_Token_Custom_Base) + 340)
#define k_Token_Const_PATIENCE_LOST_PER_REQUEST  ((k_Token_Custom_Base) + 341)
#define k_Token_Const_PATIENCE_REGAINED_PER_ROUND ((k_Token_Custom_Base) + 342)
#define k_Token_Const_REGAIN_PATIENCE_PROBABILITY ((k_Token_Custom_Base) + 343)
#define k_Token_Const_PATIENCE_LOST_THRESHOLD    ((k_Token_Custom_Base) + 344)
#define k_Token_Const_AI_GOAL_TIME_SLICE         ((k_Token_Custom_Base) + 345)
#define k_Token_Const_AI_MAX_TIME_SLICE          ((k_Token_Custom_Base) + 346)
#define k_Token_Const_AI_TOTAL_TIME_SLICE        ((k_Token_Custom_Base) + 347)
#define k_Token_Const_ENTRENCHMENT_BONUS         ((k_Token_Custom_Base) + 348)
#define k_Token_Const_PARADROP_DISTANCE          ((k_Token_Custom_Base) + 349)
#define k_Token_Const_PARADROP_SUCCESS_PERCENT   ((k_Token_Custom_Base) + 350)
#define k_Token_Const_ELITE_SPY_BONUS            ((k_Token_Custom_Base) + 351)
#define k_Token_Const_CITY_SECOND_ATTEMPT_SPY_BONUS ((k_Token_Custom_Base) + 352)
#define k_Token_Const_ASSASINATION_HAPPINESS_EFFECT ((k_Token_Custom_Base) + 353)
#define k_Token_Const_ASSASINATION_HAPPINESS_EFFECT_TIMER ((k_Token_Custom_Base) + 354)
#define k_Token_Const_SPIED_UPON_WARINESS_TIMER  ((k_Token_Custom_Base) + 355)
#define k_Token_Const_MAX_PARTY_COST             ((k_Token_Custom_Base) + 356)
#define k_Token_Const_MAX_PARTY_CHANCE           ((k_Token_Custom_Base) + 357)
#define k_Token_Const_GOSSIP_MAP_RADIUS          ((k_Token_Custom_Base) + 358)
#define k_Token_Const_HEAR_GOSSIP_CHANCE         ((k_Token_Custom_Base) + 359)
#define k_Token_Const_FRANCHISE_EFFECT           ((k_Token_Custom_Base) + 360)
#define k_Token_Const_TURNS_FRANCHISED           ((k_Token_Custom_Base) + 361)
#define k_Token_Const_TURNS_TO_SUE_FRANCHISE     ((k_Token_Custom_Base) + 362)
#define k_Token_Const_SLAVER_ELITE_CHANCE        ((k_Token_Custom_Base) + 363)
#define k_Token_Const_ELITE_SLAVER_BONUS         ((k_Token_Custom_Base) + 364)
#define k_Token_Const_ABOLITIONIST_ELITE_CHANCE  ((k_Token_Custom_Base) + 365)
#define k_Token_Const_ELITE_ABOLITIONIST_BONUS   ((k_Token_Custom_Base) + 366)
#define k_Token_Const_WATCHFUL_CITY_SUCCESS_MODIFIER ((k_Token_Custom_Base) + 367)
#define k_Token_Const_WATCHFUL_CITY_DEATH_MODIFIER ((k_Token_Custom_Base) + 368)
#define k_Token_Const_WATCHFUL_CITY_TURNS        ((k_Token_Custom_Base) + 369)
#define k_Token_Const_BIO_INFECTION_TURNS        ((k_Token_Custom_Base) + 370)
#define k_Token_Const_NANO_INFECTION_TURNS       ((k_Token_Custom_Base) + 371)
#define k_Token_Const_BIO_INFECTION_SPREAD_CHANCE ((k_Token_Custom_Base) + 372)
#define k_Token_Const_NANO_INFECTION_SPREAD_CHANCE ((k_Token_Custom_Base) + 373)
#define k_Token_Const_PLAGUE_KILL_PERCENTAGE     ((k_Token_Custom_Base) + 374)
#define k_Token_Const_ELITE_TERRORIST_BONUS      ((k_Token_Custom_Base) + 375)
#define k_Token_Const_TERRORIST_ELITE_CHANCE     ((k_Token_Custom_Base) + 376)
#define k_Token_Const_NUKE_POPULATION_PERCENTAGE ((k_Token_Custom_Base) + 377)
#define k_Token_Const_SPECIAL_ACTION_MOVE_COST   ((k_Token_Custom_Base) + 378)
#define k_Token_Const_CLERIC_CONVERSION_FACTOR   ((k_Token_Custom_Base) + 379)
#define k_Token_Const_TELEVANGELIST_CONVERSION_FACTOR ((k_Token_Custom_Base) + 380)
#define k_Token_Const_REFORMATION_CHANCE         ((k_Token_Custom_Base) + 381)
#define k_Token_Const_REFORMATION_DEATH_CHANCE   ((k_Token_Custom_Base) + 382)
#define k_Token_Const_REFORMATION_HAPPINESS_TIME ((k_Token_Custom_Base) + 383)
#define k_Token_Const_REFORMATION_HAPPINESS_AMOUNT ((k_Token_Custom_Base) + 384)
#define k_Token_Const_UNCONVERTED_INDULGENCE_GOLD ((k_Token_Custom_Base) + 385)
#define k_Token_Const_UNCONVERTED_INDULGENCE_HAPPINESS ((k_Token_Custom_Base) + 386)
#define k_Token_Const_CONVERTED_INDULGENCE_GOLD  ((k_Token_Custom_Base) + 387)
#define k_Token_Const_CONVERTED_INDULGENCE_HAPPINESS ((k_Token_Custom_Base) + 388)
#define k_Token_Const_OTHER_FAITH_INDULGENCE_GOLD ((k_Token_Custom_Base) + 389)
#define k_Token_Const_OTHER_FAITH_INDULGENCE_HAPPINESS ((k_Token_Custom_Base) + 390)
#define k_Token_Const_SOOTHSAY_HAPPY_AMOUNT      ((k_Token_Custom_Base) + 391)
#define k_Token_Const_RUINS_BOX_WIDTH            ((k_Token_Custom_Base) + 392)
#define k_Token_Const_RUINS_BOX_HEIGHT           ((k_Token_Custom_Base) + 393)
#define k_Token_Const_RUINS_CHANCE_PER_BOX       ((k_Token_Custom_Base) + 394)
#define k_Token_Const_MAX_RUINS_GOLD             ((k_Token_Custom_Base) + 395)
#define k_Token_Const_MAX_RUINS_ADVANCE          ((k_Token_Custom_Base) + 396)
#define k_Token_Const_MAX_RUINS_UNIT             ((k_Token_Custom_Base) + 397)
#define k_Token_Const_UNIT_RUSH_MODIFIER         ((k_Token_Custom_Base) + 398)
#define k_Token_Const_IMPROVEMENT_RUSH_MODIFIER  ((k_Token_Custom_Base) + 399)
#define k_Token_Const_WONDER_RUSH_MODIFIER       ((k_Token_Custom_Base) + 400)
#define k_Token_Const_BUILDING_PRODUCTION_TO_VALUE_MODIFIER ((k_Token_Custom_Base) + 401)
#define k_Token_Const_MONOPOLY_THRESHOLD         ((k_Token_Custom_Base) + 402)
#define k_Token_Const_POPULATION_POLLUTION_WARNING_THRESHOLD ((k_Token_Custom_Base) + 403)
#define k_Token_Const_INDUSTRIAL_POLLUTION_WARNING_THRESHOLD ((k_Token_Custom_Base) + 404)
#define k_Token_Const_VERY_HAPPY_THRESHOLD       ((k_Token_Custom_Base) + 405)
#define k_Token_Const_CITY_GROWTH_COEFFICIENT    ((k_Token_Custom_Base) + 406)
#define k_Token_Const_RIOT_LEVEL                 ((k_Token_Custom_Base) + 407)
#define k_Token_Const_POWER_POINTS_TO_MATERIALS  ((k_Token_Custom_Base) + 408)
#define k_Token_Const_MAX_AIRLIFT_STACK_SIZE     ((k_Token_Custom_Base) + 409)
#define k_Token_Const_GOLD_FROM_PIRACY           ((k_Token_Custom_Base) + 410)
#define k_Token_Const_NO_PIRACY_EXPIRES          ((k_Token_Custom_Base) + 411)
#define k_Token_Const_SPACE_LAUNCH_COST          ((k_Token_Custom_Base) + 412)
#define k_Token_Const_SPACE_LAND_COST            ((k_Token_Custom_Base) + 413)
#define k_Token_Const_WORMHOLE_ORBIT_HEIGHT_PERCENTAGE ((k_Token_Custom_Base) + 414)
#define k_Token_Const_WORMHOLE_SPEED             ((k_Token_Custom_Base) + 415)
#define k_Token_Const_WORMHOLE_RETURN_TIME       ((k_Token_Custom_Base) + 416)
#define k_Token_Const_WORMHOLE_VISIBLE_TO_ALL_TURNS ((k_Token_Custom_Base) + 417)
#define k_Token_Const_MAX_GOVERNMENT_CHANGE_TURNS ((k_Token_Custom_Base) + 418)
#define k_Token_Const_POLLUTION_FORCES_ANARCHY   ((k_Token_Custom_Base) + 419)
#define k_Token_Const_FOOD_TO_POLLUTION_COEF     ((k_Token_Custom_Base) + 420)
#define k_Token_Const_EMANCIPATION_UNHAPPINESS_TURNS ((k_Token_Custom_Base) + 421)
#define k_Token_Const_EMANCIPATION_UNHAPPINESS_AMOUNT ((k_Token_Custom_Base) + 422)
#define k_Token_Const_CAPTURE_CITY_ADVANCE_CHANCE ((k_Token_Custom_Base) + 423)
#define k_Token_Const_CITY_HEAL_RATE             ((k_Token_Custom_Base) + 424)
#define k_Token_Const_NORMAL_HEAL_RATE           ((k_Token_Custom_Base) + 425)
#define k_Token_Const_LOCAL_POLLUTION_LEVEL      ((k_Token_Custom_Base) + 426)
#define k_Token_Const_LOCAL_POLLUTION_CHANCE     ((k_Token_Custom_Base) + 427)
#define k_Token_Const_ASSAULT_DESTROY_BUILDING_CHANCE ((k_Token_Custom_Base) + 428)
#define k_Token_Const_BOMBARD_DESTROY_BUILDING_CHANCE ((k_Token_Custom_Base) + 429)
#define k_Token_Const_ADVANCE_CHOICES_MIN        ((k_Token_Custom_Base) + 430)
#define k_Token_Const_ADVANCE_CHOICES_MAX        ((k_Token_Custom_Base) + 431)
#define k_Token_Const_ATTACK_CONVERTER_UNHAPPINESS_TURNS ((k_Token_Custom_Base) + 432)
#define k_Token_Const_ATTACK_CONVERTER_UNHAPPINESS_AMOUNT ((k_Token_Custom_Base) + 433)
#define k_Token_Const_MIN_START_DISTANCE_COEFFICIENT ((k_Token_Custom_Base) + 434)
#define k_Token_Const_MAX_START_DISTANCE_COEFFICIENT ((k_Token_Custom_Base) + 435)
#define k_Token_Const_MAX_SAME_TILES             ((k_Token_Custom_Base) + 436)
#define k_Token_Const_COMBAT_VETERAN_CHANCE      ((k_Token_Custom_Base) + 437)
#define k_Token_Const_STOP_TRADE_ROUNDS          ((k_Token_Custom_Base) + 438)
#define k_Token_Const_LEAVE_OUR_LANDS_ROUNDS     ((k_Token_Custom_Base) + 439)
#define k_Token_Const_REDUCE_POLLUTION_ROUNDS    ((k_Token_Custom_Base) + 440)
#define k_Token_Const_CAPTURE_CITY_ROUNDS        ((k_Token_Custom_Base) + 441)
#define k_Token_Const_END_POLLUTION_ROUNDS       ((k_Token_Custom_Base) + 442)
#define k_Token_Const_ATTACK_ENEMY_ROUNDS        ((k_Token_Custom_Base) + 443)
#define k_Token_Const_MIN_CONTINENT_START_SIZE   ((k_Token_Custom_Base) + 444)
#define k_Token_Const_BOMBARD_KILL_POP_CHANCE    ((k_Token_Custom_Base) + 445)
#define k_Token_Const_ASSAULT_KILL_POP_CHANCE    ((k_Token_Custom_Base) + 446)
#define k_Token_Const_CAPTURE_KILL_POP_CHANCE    ((k_Token_Custom_Base) + 447)
#define k_Token_Const_SCALED_POP_ANCIENT         ((k_Token_Custom_Base) + 448)
#define k_Token_Const_SCALED_POP_RENAISSANCE     ((k_Token_Custom_Base) + 449)
#define k_Token_Const_SCALED_POP_MODERN          ((k_Token_Custom_Base) + 450)
#define k_Token_Const_SCALED_POP_GENETIC         ((k_Token_Custom_Base) + 451)
#define k_Token_Const_SCALED_POP_DIAMOND         ((k_Token_Custom_Base) + 452)
#define k_Token_Const_PIRACY_KILLS_TRADER_CHANCE ((k_Token_Custom_Base) + 453)
#define k_Token_Const_UPRISING_CHANCE_PER_UNGUARDED_SLAVE ((k_Token_Custom_Base) + 454)
#define k_Token_Const_MAX_DISBAND_SIZE           ((k_Token_Custom_Base) + 455)
#define k_Token_Const_MAX_REQUESTS_PER_PLAYER_PER_TURN ((k_Token_Custom_Base) + 456)
#define k_Token_Const_SLAVES_PER_MILITARY_UNIT   ((k_Token_Custom_Base) + 457)
#define k_Token_Const_MIN_ABSOLUTE_START_DISTANCE ((k_Token_Custom_Base) + 458)
#define k_Token_Const_MAP_SIZE_SMALL             ((k_Token_Custom_Base) + 459)
#define k_Token_Const_MAP_SIZE_MEDIUM            ((k_Token_Custom_Base) + 460)
#define k_Token_Const_MAP_SIZE_LARGE             ((k_Token_Custom_Base) + 461)
#define k_Token_Const_MAP_SIZE_GIGANTIC          ((k_Token_Custom_Base) + 462)
#define k_Token_Const_RAIL_LAUNCH_POLLUTION      ((k_Token_Custom_Base) + 463)
#define k_Token_Const_SPACE_FUEL_COST            ((k_Token_Custom_Base) + 464)
#define k_Token_Const_NON_SPACE_FUEL_COST        ((k_Token_Custom_Base) + 465)
#define k_Token_Const_STARVATION_WARNING_FUDGE_FACTOR ((k_Token_Custom_Base) + 466)
#define k_Token_Const_MAINTENANCE_WARNING_FUDGE_FACTOR ((k_Token_Custom_Base) + 467)
#define k_Token_Const_SUPPORT_WARNING_FUDGE_FACTOR ((k_Token_Custom_Base) + 468)
#define k_Token_Const_RELATIVE_AI_PRODUCTION_CHEAT_COEF ((k_Token_Custom_Base) + 469)
#define k_Token_Const_RELATIVE_AI_SCIENCE_CHEAT_COEF ((k_Token_Custom_Base) + 470)
#define k_Token_Const_NUKE_KILL_TILES            ((k_Token_Custom_Base) + 471)
#define k_Token_Const_INCITE_REVOLUTION_GOLD_COEFFICIENT ((k_Token_Custom_Base) + 472)
#define k_Token_Const_INCITE_REVOLUTION_CAPITOL_PENALTY ((k_Token_Custom_Base) + 473)
#define k_Token_Const_INCITE_UPRISING_GOLD_COEFFICIENT ((k_Token_Custom_Base) + 474)
#define k_Token_Const_INCITE_UPRISING_CAPITOL_PENALTY ((k_Token_Custom_Base) + 475)
#define k_Token_Const_BIO_INFECTION_UNHAPPINESS  ((k_Token_Custom_Base) + 476)
#define k_Token_Const_MIN_ECO_PACT_VIOLATION_LEVEL ((k_Token_Custom_Base) + 477)
#define k_Token_Const_NANO_INFECTION_TERRORIST_DEATH_CHANCE ((k_Token_Custom_Base) + 478)
#define k_Token_Const_BIO_INFECTION_TERRORIST_DEATH_CHANCE ((k_Token_Custom_Base) + 479)
#define k_Token_Const_FLOOD_CHANGES_COAST_TO_WATER_CHANCE ((k_Token_Custom_Base) + 480)
#define k_Token_Const_AI_CHEAT_ECO_PACT_MIN      ((k_Token_Custom_Base) + 481)
#define k_Token_Const_AI_CHEAT_ECO_PACT_MAx      ((k_Token_Custom_Base) + 482)
#define k_Token_Const_MAX_ABSOLUTE_GROWTH_RATE   ((k_Token_Custom_Base) + 483)
#define k_Token_Const_TRADE_DISTANCE_COEFFICIENT ((k_Token_Custom_Base) + 484)
#define k_Token_Const_MIN_LIKE_TILES_FOR_GOOD    ((k_Token_Custom_Base) + 485)
#define k_Token_Const_MIN_GOOD_VALUE             ((k_Token_Custom_Base) + 486)
#define k_Token_Const_MAX_GOOD_VALUE             ((k_Token_Custom_Base) + 487)
#define k_Token_Const_PIRACY_WASTE_COEFFICIENT   ((k_Token_Custom_Base) + 488)
#define k_Token_Const_BORDER_INT_RADIUS          ((k_Token_Custom_Base) + 489)
#define k_Token_Const_BORDER_SQUARED_RADIUS      ((k_Token_Custom_Base) + 490)
#define k_Token_Const_BIO_INFECTION_PRODUCTION_COEF ((k_Token_Custom_Base) + 491)
#define k_Token_Const_NANO_BUILDING_KILL_PERCENTAGE ((k_Token_Custom_Base) + 492)
#define k_Token_Const_BASE_STARVATION_PROTECTION ((k_Token_Custom_Base) + 493)
#define k_Token_Const_CARAVAN_COEF               ((k_Token_Custom_Base) + 494)
#define k_Token_Const_DOMESTIC_TRADE_COEF        ((k_Token_Custom_Base) + 495)
#define k_Token_Const_PACT_TRADE_COEF            ((k_Token_Custom_Base) + 496)
#define k_Token_Const_POLLUTION_CAUSED_BY_NUKE   ((k_Token_Custom_Base) + 497)
#define k_Token_Const_MAX_MATCH_LIST_CYCLES      ((k_Token_Custom_Base) + 498)
#define k_Token_Const_MIN_TURNS_BETWEEN_REVOLT   ((k_Token_Custom_Base) + 499)
#define k_Token_Const_MAX_CITY_WONDERS           ((k_Token_Custom_Base) + 500)
#define k_Token_Const_MAX_CITY_BUILDINGS         ((k_Token_Custom_Base) + 501)
#define k_Token_Const_CAPTURED_CITY_KILL_POP     ((k_Token_Custom_Base) + 502)
#define k_Token_Const_COMBAT_ELITE_CHANCE        ((k_Token_Custom_Base) + 503)
#define k_Token_Const_COMBAT_LEADER_CHANCE       ((k_Token_Custom_Base) + 504)
#define k_Token_Const_CITY_ON_TRADE_ROUTE_BONUS  ((k_Token_Custom_Base) + 505)
#define k_Token_Const_CITY_EXPANSION_DENOMINATOR ((k_Token_Custom_Base) + 506)
#define k_Token_Const_TURNS_ACCEPTED_FOR_ONE_POP ((k_Token_Custom_Base) + 507)
#define k_Token_Const_Max                        ((k_Token_Custom_Base) + 508)


static BitArray s_ParsedTokens(508);
void ConstRecord::CheckRequiredFields(DBLexer *lex)
{
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentLand - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_LAND - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentLand missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentContinent - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_CONTINENT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentContinent missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentHomogenious - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_HOMOGENOUS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentHomogenious missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MeridianA - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MERIDIANA - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MeridianA missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MeridianB - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MERIDIANB - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MeridianB missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MeridianC - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MERIDIANC - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MeridianC missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MeridianD - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MERIDIAND - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MeridianD missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MeridianE - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MERIDIANE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MeridianE missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MeridianF - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MERIDIANF - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MeridianF missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_HLevelA - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_HLEVELA - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field HLevelA missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_HLevelB - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_HLEVELB - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field HLevelB missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_HLevelC - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_HLEVELC - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field HLevelC missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_HLevelD - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_HLEVELD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field HLevelD missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ForestWet - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_FORESTWET - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ForestWet missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_GrassWet - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_GRASSWET - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field GrassWet missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PlainsWet - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PLAINSWET - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PlainsWet missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_DesertWet - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_DESERTWET - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field DesertWet missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ForestDry - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_FORESTDRY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ForestDry missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_GrassDry - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_GRASSDRY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field GrassDry missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PlainsDry - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PLAINSDRY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PlainsDry missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_DesertDry - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_DESERTDRY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field DesertDry missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_WhiteWarm - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_WHITEWARM - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field WhiteWarm missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BrownWarm - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BROWNWARM - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BrownWarm missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_TemperatureRangeAdjustWarm - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_TEMPERATURERANGEADJUSTWARM - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field TemperatureRangeAdjustWarm missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_WhiteCold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_WHITECOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field WhiteCold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BrownCold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BROWNCOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BrownCold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_TemperatureRangeAdjustCold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_TEMPERATURERANGEADJUSTCOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field TemperatureRangeAdjustCold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RichnessFewGoods - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RICHNESSFEWGOODS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RichnessFewGoods missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RiverCellWidthFewGoods - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RIVERCELLWIDTHFEWGOODS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RiverCellWidthFewGoods missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RiverCellHeightFewGoods - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RIVERCELLHEIGHTFEWGOODS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RiverCellHeightFewGoods missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RichnessManyGoods - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RICHNESSMANYGOODS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RichnessManyGoods missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RiverCellWidthManyGoods - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RIVERCELLWIDTHMANYGOODS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RiverCellWidthManyGoods missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RiverCellHeightManyGoods - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RIVERCELLHEIGHTMANYGOODS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RiverCellHeightManyGoods missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentMountain - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_MOUNTAIN - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentMountain missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MountainCell - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MOUNTAIN_CELL - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MountainCell missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentHills - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_HILLS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentHills missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MountainSpread - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MOUNTAIN_SPREAD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MountainSpread missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MountainLength - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MOUNTAIN_LENGTH - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MountainLength missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_GlacierExtend - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_GLACIER_EXTENT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field GlacierExtend missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentVolcano - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_VOLCANO - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentVolcano missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentTrench - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_TRENCH - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentTrench missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentForest - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_FOREST - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentForest missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentGras - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_GRASS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentGras missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentPlains - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_PLAINS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentPlains missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentDesert - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_DESERT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentDesert missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentWhite - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_WHITE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentWhite missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentBrown - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_BROWN - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentBrown missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_TemperatureRangeAdjust - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_TEMPERATURE_RANGE_ADJUST - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field TemperatureRangeAdjust missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_NiceRadius - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_NICE_RADIUS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field NiceRadius missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PercentRiver - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PERCENT_RIVER - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PercentRiver missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RiverLength - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RIVER_LENGTH - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RiverLength missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RiverCellWidth - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RIVER_CELL_WIDTH - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RiverCellWidth missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RiverCellHeight - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RIVER_CELL_HEIGHT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RiverCellHeight missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_Richness - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RICHNESS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field Richness missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ChanceLostAtSea - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CHANCE_LOST_AT_SEA - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ChanceLostAtSea missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_VeteranCoef - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_VETERAN_COEF - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field VeteranCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RevolutionLevel - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_REVOLUTION_LEVEL - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RevolutionLevel missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_DiscoveriesPollutionSizeModifier - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_DISCOVERIES_POLLUTION_SIZE_MODIFIER - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field DiscoveriesPollutionSizeModifier missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_DiscoveriesPollutionProductionModifier - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_DISCOVERIES_POLLUTION_PRODUCTION_MODIFIER - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field DiscoveriesPollutionProductionModifier missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AveragePollutionTurns - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_AVERAGE_POLLUTION_TURNS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AveragePollutionTurns missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PopulationProducesPollutionThreshold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_POPULATION_PRODUCES_POLLUTION_THRESHOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PopulationProducesPollutionThreshold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ProductionProducesPollutionThreshold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PRODUCTION_PRODUCES_POLLUTION_THRESHOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ProductionProducesPollutionThreshold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxEmpireDistCost - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_EMPIRE_DIST_COST - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxEmpireDistCost missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_HappinessLaunchCost - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_HAPPINESS_LAUNCH_COST - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field HappinessLaunchCost missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_UnitWorkday - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_UNIT_WORKDAY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field UnitWorkday missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BaseWorkday - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BASE_WORKDAY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BaseWorkday missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_UnitWages - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_UNIT_WAGES - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field UnitWages missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BaseWages - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BASE_WAGES - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BaseWages missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_UnitRations - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_UNIT_RATIONS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field UnitRations missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BaseRations - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BASE_RATIONS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BaseRations missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ChangeCurrentlyBuildingItemPenalty - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CHANGE_CURRENTLY_BUILDING_ITEM_PENALTY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ChangeCurrentlyBuildingItemPenalty missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_TariffReduction - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_TARIFF_REDUCTION - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field TariffReduction missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RevoltInfluenceDistance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_REVOLT_INFLUENCE_DISTANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RevoltInfluenceDistance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PactCaptureCityExpires - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PACT_CAPTURE_CITY_EXPIRES - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PactCaptureCityExpires missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_CeaseFireExpires - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CEASE_FIRE_EXPIRES - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field CeaseFireExpires missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ShortCeaseFireExpires - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SHORT_CEASE_FIRE_EXPIRES - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ShortCeaseFireExpires missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_EndOfGameYearEarlyWarning - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_END_OF_GAME_YEAR_EARLY_WARNING - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field EndOfGameYearEarlyWarning missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_EndOfGameYear - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_END_OF_GAME_YEAR - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field EndOfGameYear missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_CaptureCityForGoldMultiplyer - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CAPTURE_CITY_FOR_GOLD_MULTIPLIER - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field CaptureCityForGoldMultiplyer missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PactEndPollutionExpires - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PACT_END_POLLUTION_EXPIRES - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PactEndPollutionExpires missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_LeaveOurLandsExpires - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_LEAVE_OUR_LANDS_EXPIRES - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field LeaveOurLandsExpires missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ReducePollutionExpires - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_REDUCE_POLLUTION_EXPIRES - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ReducePollutionExpires missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PatienceLostPerRequest - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PATIENCE_LOST_PER_REQUEST - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PatienceLostPerRequest missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PatienceRegainedPerRound - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PATIENCE_REGAINED_PER_ROUND - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PatienceRegainedPerRound missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RegainPatienceProbability - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_REGAIN_PATIENCE_PROBABILITY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RegainPatienceProbability missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PatienceLostThreshold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PATIENCE_LOST_THRESHOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PatienceLostThreshold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AIGoalTimeSlice - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_AI_GOAL_TIME_SLICE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AIGoalTimeSlice missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AIMaxTimeSlice - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_AI_MAX_TIME_SLICE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AIMaxTimeSlice missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AITotalTimeSlice - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_AI_TOTAL_TIME_SLICE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AITotalTimeSlice missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_EntrenchmentBonus - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ENTRENCHMENT_BONUS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field EntrenchmentBonus missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ParadropDistance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PARADROP_DISTANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ParadropDistance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ParadropSuccessPercent - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PARADROP_SUCCESS_PERCENT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ParadropSuccessPercent missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_EliteSpyBonus - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ELITE_SPY_BONUS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field EliteSpyBonus missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_CitySecondAttemptSpyBonus - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CITY_SECOND_ATTEMPT_SPY_BONUS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field CitySecondAttemptSpyBonus missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AssasinationHappinessEffect - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ASSASINATION_HAPPINESS_EFFECT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AssasinationHappinessEffect missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AssasinationHappinessEffectTimer - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ASSASINATION_HAPPINESS_EFFECT_TIMER - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AssasinationHappinessEffectTimer missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_SpiedUponWarinessTimer - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SPIED_UPON_WARINESS_TIMER - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field SpiedUponWarinessTimer missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxPartyCost - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_PARTY_COST - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxPartyCost missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxPartyChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_PARTY_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxPartyChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_GossipMapRadius - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_GOSSIP_MAP_RADIUS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field GossipMapRadius missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_HearGossipChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_HEAR_GOSSIP_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field HearGossipChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_FranchiseEffect - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_FRANCHISE_EFFECT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field FranchiseEffect missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_TurnsToSueFranchise - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_TURNS_TO_SUE_FRANCHISE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field TurnsToSueFranchise missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_SlaverEliteChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SLAVER_ELITE_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field SlaverEliteChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_EliteSlaverBonus - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ELITE_SLAVER_BONUS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field EliteSlaverBonus missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AbolitionistEliteChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ABOLITIONIST_ELITE_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AbolitionistEliteChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_EliteAbolitionistBonus - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ELITE_ABOLITIONIST_BONUS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field EliteAbolitionistBonus missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_WatchfulCitySuccessModifier - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_WATCHFUL_CITY_SUCCESS_MODIFIER - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field WatchfulCitySuccessModifier missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_WatchfulCityDeathModifier - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_WATCHFUL_CITY_DEATH_MODIFIER - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field WatchfulCityDeathModifier missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_WatchfulCityTurns - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_WATCHFUL_CITY_TURNS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field WatchfulCityTurns missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BioInfectionTurns - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BIO_INFECTION_TURNS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BioInfectionTurns missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_NanoInfectionTurns - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_NANO_INFECTION_TURNS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field NanoInfectionTurns missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BioInfectionSpreadChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BIO_INFECTION_SPREAD_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BioInfectionSpreadChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_NanoInfectionSpreadChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_NANO_INFECTION_SPREAD_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field NanoInfectionSpreadChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PlagueKillPercentage - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PLAGUE_KILL_PERCENTAGE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PlagueKillPercentage missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_EliteTerroristBonus - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ELITE_TERRORIST_BONUS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field EliteTerroristBonus missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_TerroistEliteChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_TERRORIST_ELITE_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field TerroistEliteChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_NukePopulationPercentage - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_NUKE_POPULATION_PERCENTAGE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field NukePopulationPercentage missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_SpecialActionMoveCost - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SPECIAL_ACTION_MOVE_COST - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field SpecialActionMoveCost missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ClericConversionFactor - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CLERIC_CONVERSION_FACTOR - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ClericConversionFactor missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_TelevangelistConversionFactor - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_TELEVANGELIST_CONVERSION_FACTOR - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field TelevangelistConversionFactor missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ReformationChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_REFORMATION_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ReformationChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ReformationDeathChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_REFORMATION_DEATH_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ReformationDeathChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ReformationHappinessTime - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_REFORMATION_HAPPINESS_TIME - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ReformationHappinessTime missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ReformationHappinessAmount - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_REFORMATION_HAPPINESS_AMOUNT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ReformationHappinessAmount missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_UnconvertedIndulgenceGold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_UNCONVERTED_INDULGENCE_GOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field UnconvertedIndulgenceGold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_UnconvertedIndulgenceHappiness - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_UNCONVERTED_INDULGENCE_HAPPINESS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field UnconvertedIndulgenceHappiness missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ConvertedIndulgenceGold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CONVERTED_INDULGENCE_GOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ConvertedIndulgenceGold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ConvertedIndulgenceHappiness - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CONVERTED_INDULGENCE_HAPPINESS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ConvertedIndulgenceHappiness missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_OtherFaithIndulgenceGold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_OTHER_FAITH_INDULGENCE_GOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field OtherFaithIndulgenceGold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_OtherFaithIndulgenceHappiness - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_OTHER_FAITH_INDULGENCE_HAPPINESS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field OtherFaithIndulgenceHappiness missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_SoothsayHappyAmount - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SOOTHSAY_HAPPY_AMOUNT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field SoothsayHappyAmount missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RuinsBoxWidth - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RUINS_BOX_WIDTH - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RuinsBoxWidth missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RuinsBoxHeight - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RUINS_BOX_HEIGHT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RuinsBoxHeight missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RuinsChancePerBox - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RUINS_CHANCE_PER_BOX - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RuinsChancePerBox missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxRuinsGold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_RUINS_GOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxRuinsGold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxRuinsAdvance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_RUINS_ADVANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxRuinsAdvance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxRuinsUnit - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_RUINS_UNIT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxRuinsUnit missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_UnitRushModifier - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_UNIT_RUSH_MODIFIER - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field UnitRushModifier missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BuildingRushModifier - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_IMPROVEMENT_RUSH_MODIFIER - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BuildingRushModifier missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_WonderRushModifier - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_WONDER_RUSH_MODIFIER - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field WonderRushModifier missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BuildingProductionToValueModifier - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BUILDING_PRODUCTION_TO_VALUE_MODIFIER - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BuildingProductionToValueModifier missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MonopolyThreshold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MONOPOLY_THRESHOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MonopolyThreshold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PopulationPollutionWarningThreshold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_POPULATION_POLLUTION_WARNING_THRESHOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PopulationPollutionWarningThreshold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_IndustrialPollutionWarningThreshold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_INDUSTRIAL_POLLUTION_WARNING_THRESHOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field IndustrialPollutionWarningThreshold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_VeryHappyThreshold - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_VERY_HAPPY_THRESHOLD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field VeryHappyThreshold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_CityGrowthCoefficient - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CITY_GROWTH_COEFFICIENT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field CityGrowthCoefficient missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RiotLevel - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RIOT_LEVEL - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RiotLevel missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PowerPointsToMaterials - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_POWER_POINTS_TO_MATERIALS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PowerPointsToMaterials missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxAirliftStackSize - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_AIRLIFT_STACK_SIZE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxAirliftStackSize missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_GoldFromPiracy - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_GOLD_FROM_PIRACY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field GoldFromPiracy missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_NoPiracyExpires - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_NO_PIRACY_EXPIRES - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field NoPiracyExpires missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_SpaceLaunchCost - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SPACE_LAUNCH_COST - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field SpaceLaunchCost missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_SpaceLandCost - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SPACE_LAND_COST - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field SpaceLandCost missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_WormholeOrbitHeightPercentage - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_WORMHOLE_ORBIT_HEIGHT_PERCENTAGE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field WormholeOrbitHeightPercentage missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_WormholeSpeed - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_WORMHOLE_SPEED - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field WormholeSpeed missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_WormholeReturnTime - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_WORMHOLE_RETURN_TIME - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field WormholeReturnTime missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_WormholeVisibleToAllTurns - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_WORMHOLE_VISIBLE_TO_ALL_TURNS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field WormholeVisibleToAllTurns missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxGovernmentChangeTurns - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_GOVERNMENT_CHANGE_TURNS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxGovernmentChangeTurns missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PollutionForcesAnarchy - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_POLLUTION_FORCES_ANARCHY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PollutionForcesAnarchy missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_FoodToPollutionCoef - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_FOOD_TO_POLLUTION_COEF - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field FoodToPollutionCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_EmancipationUnhappinessTurns - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_EMANCIPATION_UNHAPPINESS_TURNS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field EmancipationUnhappinessTurns missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_EmancipationUnhappinessAmount - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_EMANCIPATION_UNHAPPINESS_AMOUNT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field EmancipationUnhappinessAmount missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_CaptureCityAdvanceChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CAPTURE_CITY_ADVANCE_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field CaptureCityAdvanceChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_CityHealRate - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CITY_HEAL_RATE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field CityHealRate missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_NormalHealRate - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_NORMAL_HEAL_RATE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field NormalHealRate missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_LocalPollutionLevel - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_LOCAL_POLLUTION_LEVEL - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field LocalPollutionLevel missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_LocalPollutionChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_LOCAL_POLLUTION_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field LocalPollutionChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AssaultDestroyBuildingChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ASSAULT_DESTROY_BUILDING_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AssaultDestroyBuildingChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BombardDestroyBuildingChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BOMBARD_DESTROY_BUILDING_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BombardDestroyBuildingChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AdvanceChoicesMin - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ADVANCE_CHOICES_MIN - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AdvanceChoicesMin missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AdvanceChoicesMax - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ADVANCE_CHOICES_MAX - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AdvanceChoicesMax missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AttackConverterUnhappinessTurns - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ATTACK_CONVERTER_UNHAPPINESS_TURNS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AttackConverterUnhappinessTurns missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AttackConverterUnhappinessAmount - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ATTACK_CONVERTER_UNHAPPINESS_AMOUNT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AttackConverterUnhappinessAmount missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MinStartDistanceCoefficient - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MIN_START_DISTANCE_COEFFICIENT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MinStartDistanceCoefficient missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxStartDistanceCoefficient - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_START_DISTANCE_COEFFICIENT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxStartDistanceCoefficient missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxSameTiles - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_SAME_TILES - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxSameTiles missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_CombatVeteranChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_COMBAT_VETERAN_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field CombatVeteranChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_StopTradeRounds - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_STOP_TRADE_ROUNDS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field StopTradeRounds missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_LeaveOurLandsRounds - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_LEAVE_OUR_LANDS_ROUNDS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field LeaveOurLandsRounds missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ReducePollutionRounds - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_REDUCE_POLLUTION_ROUNDS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ReducePollutionRounds missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_CaptureCityRounds - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CAPTURE_CITY_ROUNDS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field CaptureCityRounds missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_EndPollutionRounds - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_END_POLLUTION_ROUNDS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field EndPollutionRounds missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AttackEnemyRounds - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ATTACK_ENEMY_ROUNDS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AttackEnemyRounds missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MinContinentStartSize - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MIN_CONTINENT_START_SIZE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MinContinentStartSize missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BombardKillPopChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BOMBARD_KILL_POP_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BombardKillPopChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AssaultKillPopChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_ASSAULT_KILL_POP_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AssaultKillPopChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_CaptureKillPopChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CAPTURE_KILL_POP_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field CaptureKillPopChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ScaledPopAncient - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SCALED_POP_ANCIENT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ScaledPopAncient missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ScaledPopRenaissance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SCALED_POP_RENAISSANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ScaledPopRenaissance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ScaledPopModern - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SCALED_POP_MODERN - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ScaledPopModern missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ScaledPopGenetic - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SCALED_POP_GENETIC - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ScaledPopGenetic missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_ScaledPopDiamond - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SCALED_POP_DIAMOND - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field ScaledPopDiamond missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PiracyKillsTraderChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PIRACY_KILLS_TRADER_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PiracyKillsTraderChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_UprisingChancePerUnguardedSlave - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_UPRISING_CHANCE_PER_UNGUARDED_SLAVE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field UprisingChancePerUnguardedSlave missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxDisbandSize - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_DISBAND_SIZE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxDisbandSize missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxRequestsPerPlayerPerTurn - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_REQUESTS_PER_PLAYER_PER_TURN - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxRequestsPerPlayerPerTurn missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_SlavesPerMilitaryUnit - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SLAVES_PER_MILITARY_UNIT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field SlavesPerMilitaryUnit missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MinAbsoluteStartDistance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MIN_ABSOLUTE_START_DISTANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MinAbsoluteStartDistance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RailLaunchPollution - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RAIL_LAUNCH_POLLUTION - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RailLaunchPollution missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_SpaceFuelCost - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SPACE_FUEL_COST - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field SpaceFuelCost missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_NonSpaceFuelCost - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_NON_SPACE_FUEL_COST - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field NonSpaceFuelCost missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_StarvationWarningFudgeFactor - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_STARVATION_WARNING_FUDGE_FACTOR - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field StarvationWarningFudgeFactor missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaintenanceWarningFudgeFactor - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAINTENANCE_WARNING_FUDGE_FACTOR - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaintenanceWarningFudgeFactor missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_SupportWarningFudgeFactor - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_SUPPORT_WARNING_FUDGE_FACTOR - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field SupportWarningFudgeFactor missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RelativeAIProductionCheatCoef - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RELATIVE_AI_PRODUCTION_CHEAT_COEF - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RelativeAIProductionCheatCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_RelativeAIScienceCheatCoef - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_RELATIVE_AI_SCIENCE_CHEAT_COEF - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field RelativeAIScienceCheatCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_NukeKillsTiles - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_NUKE_KILL_TILES - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field NukeKillsTiles missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_InciteRevolutionGoldCoefficient - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_INCITE_REVOLUTION_GOLD_COEFFICIENT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field InciteRevolutionGoldCoefficient missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_InciteRevolutionCapitolPenalty - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_INCITE_REVOLUTION_CAPITOL_PENALTY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field InciteRevolutionCapitolPenalty missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_InciteUprisingGoldCoefficient - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_INCITE_UPRISING_GOLD_COEFFICIENT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field InciteUprisingGoldCoefficient missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_InciteUprisingCapitolPenalty - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_INCITE_UPRISING_CAPITOL_PENALTY - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field InciteUprisingCapitolPenalty missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BioInfectionUnhappiness - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BIO_INFECTION_UNHAPPINESS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BioInfectionUnhappiness missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MinEcoPactViolationLevel - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MIN_ECO_PACT_VIOLATION_LEVEL - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MinEcoPactViolationLevel missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_NanoInfectionTerroristDeathChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_NANO_INFECTION_TERRORIST_DEATH_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field NanoInfectionTerroristDeathChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BioInfectionTerroristDeathChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BIO_INFECTION_TERRORIST_DEATH_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BioInfectionTerroristDeathChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_FloodChangesCoastToWaterChance - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_FLOOD_CHANGES_COAST_TO_WATER_CHANCE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field FloodChangesCoastToWaterChance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AICheatEcoPactMin - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_AI_CHEAT_ECO_PACT_MIN - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AICheatEcoPactMin missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_AICheatEcoPactMax - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_AI_CHEAT_ECO_PACT_MAx - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field AICheatEcoPactMax missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxAbsoluteGrowthRate - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_ABSOLUTE_GROWTH_RATE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxAbsoluteGrowthRate missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_TradeDistanceCoefficient - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_TRADE_DISTANCE_COEFFICIENT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field TradeDistanceCoefficient missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MinLikeTilesForGood - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MIN_LIKE_TILES_FOR_GOOD - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MinLikeTilesForGood missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MinGoodValue - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MIN_GOOD_VALUE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MinGoodValue missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_MaxGoodValue - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_MAX_GOOD_VALUE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field MaxGoodValue missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PiracyWasteCoefficient - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_PIRACY_WASTE_COEFFICIENT - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PiracyWasteCoefficient missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BorderIntRadius - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BORDER_INT_RADIUS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BorderIntRadius missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BorderSquaredRadius - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BORDER_SQUARED_RADIUS - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BorderSquaredRadius missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BioInfectionProductionCoef - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BIO_INFECTION_PRODUCTION_COEF - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BioInfectionProductionCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_NanoBuildingKillPercentage - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_NANO_BUILDING_KILL_PERCENTAGE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field NanoBuildingKillPercentage missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_BaseStarvationProtection - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_BASE_STARVATION_PROTECTION - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field BaseStarvationProtection missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_CaravanCoef - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_CARAVAN_COEF - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field CaravanCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Const_PollutionCausedByNuke - k_Token_Custom_Base)
    && !s_ParsedTokens.Bit(k_Token_Const_POLLUTION_CAUSED_BY_NUKE - k_Token_Custom_Base)
    ){
        DBERROR(("Warning: required field PollutionCausedByNuke missing"));
    }
}

sint32 ConstRecord::Parse(DBLexer *lex, sint32 numRecords)
{
    bool done = false;
    sint32 result = 0;
    sint32 tok;
    s_ParsedTokens.Clear();
    lex->SetTokens(g_Const_Tokens, k_Token_Const_Max);
    tok = lex->GetToken();
    if(tok == k_Token_Int) {
        tok = lex->GetToken(); // Accept number to make new db compatible with the old database format
    }
    if(tok != k_Token_Name) {
        char newName[256];
        sprintf(newName, "CONST_%i", numRecords);
        if(!g_theStringDB->GetStringID(newName, m_name)) {
            g_theStringDB->InsertStr(newName, newName);
            if(!g_theStringDB->GetStringID(newName, m_name))
                SetTextName(newName);
        }
    }
    else{
        if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name)) {
            g_theStringDB->InsertStr(lex->GetTokenText(), lex->GetTokenText());
            if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name))
                SetTextName(lex->GetTokenText());
        }
        tok = lex->GetToken();
    }


    if(tok != k_Token_OpenBrace) {
        // Well if you have more time, you may find something better
        goto BypassToken;
    }

    while(!done) {
        tok = lex->GetToken();
        BypassToken:
        if(tok >= k_Token_Custom_Base && tok < k_Token_Const_Max) {
            s_ParsedTokens.SetBit(tok - k_Token_Custom_Base);
        }
        switch(tok) {
            case k_Token_Const_PercentLand:
            case k_Token_Const_PERCENT_LAND:
                if(!lex->GetIntAssignment(m_PercentLand)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentContinent:
            case k_Token_Const_PERCENT_CONTINENT:
                if(!lex->GetIntAssignment(m_PercentContinent)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentHomogenious:
            case k_Token_Const_PERCENT_HOMOGENOUS:
                if(!lex->GetIntAssignment(m_PercentHomogenious)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MeridianA:
            case k_Token_Const_MERIDIANA:
                if(!lex->GetIntAssignment(m_MeridianA)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MeridianB:
            case k_Token_Const_MERIDIANB:
                if(!lex->GetIntAssignment(m_MeridianB)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MeridianC:
            case k_Token_Const_MERIDIANC:
                if(!lex->GetIntAssignment(m_MeridianC)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MeridianD:
            case k_Token_Const_MERIDIAND:
                if(!lex->GetIntAssignment(m_MeridianD)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MeridianE:
            case k_Token_Const_MERIDIANE:
                if(!lex->GetIntAssignment(m_MeridianE)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MeridianF:
            case k_Token_Const_MERIDIANF:
                if(!lex->GetIntAssignment(m_MeridianF)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_HLevelA:
            case k_Token_Const_HLEVELA:
                if(!lex->GetIntAssignment(m_HLevelA)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_HLevelB:
            case k_Token_Const_HLEVELB:
                if(!lex->GetIntAssignment(m_HLevelB)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_HLevelC:
            case k_Token_Const_HLEVELC:
                if(!lex->GetIntAssignment(m_HLevelC)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_HLevelD:
            case k_Token_Const_HLEVELD:
                if(!lex->GetIntAssignment(m_HLevelD)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ForestWet:
            case k_Token_Const_FORESTWET:
                if(!lex->GetIntAssignment(m_ForestWet)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_GrassWet:
            case k_Token_Const_GRASSWET:
                if(!lex->GetIntAssignment(m_GrassWet)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PlainsWet:
            case k_Token_Const_PLAINSWET:
                if(!lex->GetIntAssignment(m_PlainsWet)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_DesertWet:
            case k_Token_Const_DESERTWET:
                if(!lex->GetIntAssignment(m_DesertWet)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ForestDry:
            case k_Token_Const_FORESTDRY:
                if(!lex->GetIntAssignment(m_ForestDry)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_GrassDry:
            case k_Token_Const_GRASSDRY:
                if(!lex->GetIntAssignment(m_GrassDry)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PlainsDry:
            case k_Token_Const_PLAINSDRY:
                if(!lex->GetIntAssignment(m_PlainsDry)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_DesertDry:
            case k_Token_Const_DESERTDRY:
                if(!lex->GetIntAssignment(m_DesertDry)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_WhiteWarm:
            case k_Token_Const_WHITEWARM:
                if(!lex->GetIntAssignment(m_WhiteWarm)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BrownWarm:
            case k_Token_Const_BROWNWARM:
                if(!lex->GetIntAssignment(m_BrownWarm)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_TemperatureRangeAdjustWarm:
            case k_Token_Const_TEMPERATURERANGEADJUSTWARM:
                if(!lex->GetIntAssignment(m_TemperatureRangeAdjustWarm)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_WhiteCold:
            case k_Token_Const_WHITECOLD:
                if(!lex->GetIntAssignment(m_WhiteCold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BrownCold:
            case k_Token_Const_BROWNCOLD:
                if(!lex->GetIntAssignment(m_BrownCold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_TemperatureRangeAdjustCold:
            case k_Token_Const_TEMPERATURERANGEADJUSTCOLD:
                if(!lex->GetIntAssignment(m_TemperatureRangeAdjustCold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RichnessFewGoods:
            case k_Token_Const_RICHNESSFEWGOODS:
                if(!lex->GetIntAssignment(m_RichnessFewGoods)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RiverCellWidthFewGoods:
            case k_Token_Const_RIVERCELLWIDTHFEWGOODS:
                if(!lex->GetIntAssignment(m_RiverCellWidthFewGoods)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RiverCellHeightFewGoods:
            case k_Token_Const_RIVERCELLHEIGHTFEWGOODS:
                if(!lex->GetIntAssignment(m_RiverCellHeightFewGoods)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RichnessManyGoods:
            case k_Token_Const_RICHNESSMANYGOODS:
                if(!lex->GetIntAssignment(m_RichnessManyGoods)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RiverCellWidthManyGoods:
            case k_Token_Const_RIVERCELLWIDTHMANYGOODS:
                if(!lex->GetIntAssignment(m_RiverCellWidthManyGoods)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RiverCellHeightManyGoods:
            case k_Token_Const_RIVERCELLHEIGHTMANYGOODS:
                if(!lex->GetIntAssignment(m_RiverCellHeightManyGoods)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentMountain:
            case k_Token_Const_PERCENT_MOUNTAIN:
                if(!lex->GetIntAssignment(m_PercentMountain)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MountainCell:
            case k_Token_Const_MOUNTAIN_CELL:
                if(!lex->GetIntAssignment(m_MountainCell)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentHills:
            case k_Token_Const_PERCENT_HILLS:
                if(!lex->GetIntAssignment(m_PercentHills)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MountainSpread:
            case k_Token_Const_MOUNTAIN_SPREAD:
                if(!lex->GetIntAssignment(m_MountainSpread)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MountainLength:
            case k_Token_Const_MOUNTAIN_LENGTH:
                if(!lex->GetIntAssignment(m_MountainLength)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_GlacierExtend:
            case k_Token_Const_GLACIER_EXTENT:
                if(!lex->GetIntAssignment(m_GlacierExtend)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentVolcano:
            case k_Token_Const_PERCENT_VOLCANO:
                if(!lex->GetIntAssignment(m_PercentVolcano)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentTrench:
            case k_Token_Const_PERCENT_TRENCH:
                if(!lex->GetIntAssignment(m_PercentTrench)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentForest:
            case k_Token_Const_PERCENT_FOREST:
                if(!lex->GetIntAssignment(m_PercentForest)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentGras:
            case k_Token_Const_PERCENT_GRASS:
                if(!lex->GetIntAssignment(m_PercentGras)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentPlains:
            case k_Token_Const_PERCENT_PLAINS:
                if(!lex->GetIntAssignment(m_PercentPlains)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentDesert:
            case k_Token_Const_PERCENT_DESERT:
                if(!lex->GetIntAssignment(m_PercentDesert)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentWhite:
            case k_Token_Const_PERCENT_WHITE:
                if(!lex->GetIntAssignment(m_PercentWhite)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentBrown:
            case k_Token_Const_PERCENT_BROWN:
                if(!lex->GetIntAssignment(m_PercentBrown)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_TemperatureRangeAdjust:
            case k_Token_Const_TEMPERATURE_RANGE_ADJUST:
                if(!lex->GetIntAssignment(m_TemperatureRangeAdjust)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_NiceRadius:
            case k_Token_Const_NICE_RADIUS:
                if(!lex->GetIntAssignment(m_NiceRadius)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PercentRiver:
            case k_Token_Const_PERCENT_RIVER:
                if(!lex->GetIntAssignment(m_PercentRiver)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RiverLength:
            case k_Token_Const_RIVER_LENGTH:
                if(!lex->GetIntAssignment(m_RiverLength)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RiverCellWidth:
            case k_Token_Const_RIVER_CELL_WIDTH:
                if(!lex->GetIntAssignment(m_RiverCellWidth)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RiverCellHeight:
            case k_Token_Const_RIVER_CELL_HEIGHT:
                if(!lex->GetIntAssignment(m_RiverCellHeight)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_Richness:
            case k_Token_Const_RICHNESS:
                if(!lex->GetIntAssignment(m_Richness)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ChanceLostAtSea:
            case k_Token_Const_CHANCE_LOST_AT_SEA:
                if(!lex->GetIntAssignment(m_ChanceLostAtSea)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_VeteranCoef:
            case k_Token_Const_VETERAN_COEF:
                if(!lex->GetIntAssignment(m_VeteranCoef)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RevolutionLevel:
            case k_Token_Const_REVOLUTION_LEVEL:
                if(!lex->GetIntAssignment(m_RevolutionLevel)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_DiscoveriesPollutionSizeModifier:
            case k_Token_Const_DISCOVERIES_POLLUTION_SIZE_MODIFIER:
                if(!lex->GetFloatAssignment(m_DiscoveriesPollutionSizeModifier)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_DiscoveriesPollutionProductionModifier:
            case k_Token_Const_DISCOVERIES_POLLUTION_PRODUCTION_MODIFIER:
                if(!lex->GetFloatAssignment(m_DiscoveriesPollutionProductionModifier)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AveragePollutionTurns:
            case k_Token_Const_AVERAGE_POLLUTION_TURNS:
                if(!lex->GetIntAssignment(m_AveragePollutionTurns)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PopulationProducesPollutionThreshold:
            case k_Token_Const_POPULATION_PRODUCES_POLLUTION_THRESHOLD:
                if(!lex->GetIntAssignment(m_PopulationProducesPollutionThreshold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ProductionProducesPollutionThreshold:
            case k_Token_Const_PRODUCTION_PRODUCES_POLLUTION_THRESHOLD:
                if(!lex->GetIntAssignment(m_ProductionProducesPollutionThreshold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxEmpireDistCost:
            case k_Token_Const_MAX_EMPIRE_DIST_COST:
                if(!lex->GetFloatAssignment(m_MaxEmpireDistCost)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_HappinessLaunchCost:
            case k_Token_Const_HAPPINESS_LAUNCH_COST:
                if(!lex->GetFloatAssignment(m_HappinessLaunchCost)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_UnitWorkday:
            case k_Token_Const_UNIT_WORKDAY:
                if(!lex->GetFloatAssignment(m_UnitWorkday)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BaseWorkday:
            case k_Token_Const_BASE_WORKDAY:
                if(!lex->GetFloatAssignment(m_BaseWorkday)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_UnitWages:
            case k_Token_Const_UNIT_WAGES:
                if(!lex->GetFloatAssignment(m_UnitWages)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BaseWages:
            case k_Token_Const_BASE_WAGES:
                if(!lex->GetFloatAssignment(m_BaseWages)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_UnitRations:
            case k_Token_Const_UNIT_RATIONS:
                if(!lex->GetFloatAssignment(m_UnitRations)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BaseRations:
            case k_Token_Const_BASE_RATIONS:
                if(!lex->GetFloatAssignment(m_BaseRations)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ChangeCurrentlyBuildingItemPenalty:
            case k_Token_Const_CHANGE_CURRENTLY_BUILDING_ITEM_PENALTY:
                if(!lex->GetIntAssignment(m_ChangeCurrentlyBuildingItemPenalty)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_TariffReduction:
            case k_Token_Const_TARIFF_REDUCTION:
                if(!lex->GetIntAssignment(m_TariffReduction)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RevoltInfluenceDistance:
            case k_Token_Const_REVOLT_INFLUENCE_DISTANCE:
                if(!lex->GetIntAssignment(m_RevoltInfluenceDistance)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PactCaptureCityExpires:
            case k_Token_Const_PACT_CAPTURE_CITY_EXPIRES:
                if(!lex->GetIntAssignment(m_PactCaptureCityExpires)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RewardCaptureCityExpires:
            case k_Token_Const_REWARD_CAPTURE_CITY_EXPIRES:
                if(!lex->GetIntAssignment(m_RewardCaptureCityExpires)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CeaseFireExpires:
            case k_Token_Const_CEASE_FIRE_EXPIRES:
                if(!lex->GetIntAssignment(m_CeaseFireExpires)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ShortCeaseFireExpires:
            case k_Token_Const_SHORT_CEASE_FIRE_EXPIRES:
                if(!lex->GetIntAssignment(m_ShortCeaseFireExpires)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_EndOfGameYearEarlyWarning:
            case k_Token_Const_END_OF_GAME_YEAR_EARLY_WARNING:
                if(!lex->GetIntAssignment(m_EndOfGameYearEarlyWarning)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_EndOfGameYear:
            case k_Token_Const_END_OF_GAME_YEAR:
                if(!lex->GetIntAssignment(m_EndOfGameYear)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CaptureCityForGoldMultiplyer:
            case k_Token_Const_CAPTURE_CITY_FOR_GOLD_MULTIPLIER:
                if(!lex->GetIntAssignment(m_CaptureCityForGoldMultiplyer)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PactEndPollutionExpires:
            case k_Token_Const_PACT_END_POLLUTION_EXPIRES:
                if(!lex->GetIntAssignment(m_PactEndPollutionExpires)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_LeaveOurLandsExpires:
            case k_Token_Const_LEAVE_OUR_LANDS_EXPIRES:
                if(!lex->GetIntAssignment(m_LeaveOurLandsExpires)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ReducePollutionExpires:
            case k_Token_Const_REDUCE_POLLUTION_EXPIRES:
                if(!lex->GetIntAssignment(m_ReducePollutionExpires)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_DestroyEnemyForRewardExpires:
            case k_Token_Const_DESTROY_ENEMY_FOR_REWARD_EXPIRES:
                if(!lex->GetIntAssignment(m_DestroyEnemyForRewardExpires)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PatienceLostPerRequest:
            case k_Token_Const_PATIENCE_LOST_PER_REQUEST:
                if(!lex->GetIntAssignment(m_PatienceLostPerRequest)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PatienceRegainedPerRound:
            case k_Token_Const_PATIENCE_REGAINED_PER_ROUND:
                if(!lex->GetIntAssignment(m_PatienceRegainedPerRound)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RegainPatienceProbability:
            case k_Token_Const_REGAIN_PATIENCE_PROBABILITY:
                if(!lex->GetIntAssignment(m_RegainPatienceProbability)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PatienceLostThreshold:
            case k_Token_Const_PATIENCE_LOST_THRESHOLD:
                if(!lex->GetIntAssignment(m_PatienceLostThreshold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AIGoalTimeSlice:
            case k_Token_Const_AI_GOAL_TIME_SLICE:
                if(!lex->GetIntAssignment(m_AIGoalTimeSlice)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AIMaxTimeSlice:
            case k_Token_Const_AI_MAX_TIME_SLICE:
                if(!lex->GetIntAssignment(m_AIMaxTimeSlice)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AITotalTimeSlice:
            case k_Token_Const_AI_TOTAL_TIME_SLICE:
                if(!lex->GetIntAssignment(m_AITotalTimeSlice)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_EntrenchmentBonus:
            case k_Token_Const_ENTRENCHMENT_BONUS:
                if(!lex->GetFloatAssignment(m_EntrenchmentBonus)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ParadropDistance:
            case k_Token_Const_PARADROP_DISTANCE:
                if(!lex->GetIntAssignment(m_ParadropDistance)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ParadropSuccessPercent:
            case k_Token_Const_PARADROP_SUCCESS_PERCENT:
                if(!lex->GetIntAssignment(m_ParadropSuccessPercent)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_EliteSpyBonus:
            case k_Token_Const_ELITE_SPY_BONUS:
                if(!lex->GetFloatAssignment(m_EliteSpyBonus)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CitySecondAttemptSpyBonus:
            case k_Token_Const_CITY_SECOND_ATTEMPT_SPY_BONUS:
                if(!lex->GetFloatAssignment(m_CitySecondAttemptSpyBonus)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AssasinationHappinessEffect:
            case k_Token_Const_ASSASINATION_HAPPINESS_EFFECT:
                if(!lex->GetIntAssignment(m_AssasinationHappinessEffect)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AssasinationHappinessEffectTimer:
            case k_Token_Const_ASSASINATION_HAPPINESS_EFFECT_TIMER:
                if(!lex->GetIntAssignment(m_AssasinationHappinessEffectTimer)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_SpiedUponWarinessTimer:
            case k_Token_Const_SPIED_UPON_WARINESS_TIMER:
                if(!lex->GetIntAssignment(m_SpiedUponWarinessTimer)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxPartyCost:
            case k_Token_Const_MAX_PARTY_COST:
                if(!lex->GetIntAssignment(m_MaxPartyCost)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxPartyChance:
            case k_Token_Const_MAX_PARTY_CHANCE:
                if(!lex->GetFloatAssignment(m_MaxPartyChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_GossipMapRadius:
            case k_Token_Const_GOSSIP_MAP_RADIUS:
                if(!lex->GetIntAssignment(m_GossipMapRadius)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_HearGossipChance:
            case k_Token_Const_HEAR_GOSSIP_CHANCE:
                if(!lex->GetFloatAssignment(m_HearGossipChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_FranchiseEffect:
            case k_Token_Const_FRANCHISE_EFFECT:
                if(!lex->GetFloatAssignment(m_FranchiseEffect)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_TurnsFranchised:
            case k_Token_Const_TURNS_FRANCHISED:
                if(!lex->GetIntAssignment(m_TurnsFranchised)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_TurnsToSueFranchise:
            case k_Token_Const_TURNS_TO_SUE_FRANCHISE:
                if(!lex->GetIntAssignment(m_TurnsToSueFranchise)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_SlaverEliteChance:
            case k_Token_Const_SLAVER_ELITE_CHANCE:
                if(!lex->GetFloatAssignment(m_SlaverEliteChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_EliteSlaverBonus:
            case k_Token_Const_ELITE_SLAVER_BONUS:
                if(!lex->GetFloatAssignment(m_EliteSlaverBonus)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AbolitionistEliteChance:
            case k_Token_Const_ABOLITIONIST_ELITE_CHANCE:
                if(!lex->GetFloatAssignment(m_AbolitionistEliteChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_EliteAbolitionistBonus:
            case k_Token_Const_ELITE_ABOLITIONIST_BONUS:
                if(!lex->GetFloatAssignment(m_EliteAbolitionistBonus)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_WatchfulCitySuccessModifier:
            case k_Token_Const_WATCHFUL_CITY_SUCCESS_MODIFIER:
                if(!lex->GetFloatAssignment(m_WatchfulCitySuccessModifier)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_WatchfulCityDeathModifier:
            case k_Token_Const_WATCHFUL_CITY_DEATH_MODIFIER:
                if(!lex->GetFloatAssignment(m_WatchfulCityDeathModifier)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_WatchfulCityTurns:
            case k_Token_Const_WATCHFUL_CITY_TURNS:
                if(!lex->GetIntAssignment(m_WatchfulCityTurns)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BioInfectionTurns:
            case k_Token_Const_BIO_INFECTION_TURNS:
                if(!lex->GetIntAssignment(m_BioInfectionTurns)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_NanoInfectionTurns:
            case k_Token_Const_NANO_INFECTION_TURNS:
                if(!lex->GetIntAssignment(m_NanoInfectionTurns)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BioInfectionSpreadChance:
            case k_Token_Const_BIO_INFECTION_SPREAD_CHANCE:
                if(!lex->GetFloatAssignment(m_BioInfectionSpreadChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_NanoInfectionSpreadChance:
            case k_Token_Const_NANO_INFECTION_SPREAD_CHANCE:
                if(!lex->GetFloatAssignment(m_NanoInfectionSpreadChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PlagueKillPercentage:
            case k_Token_Const_PLAGUE_KILL_PERCENTAGE:
                if(!lex->GetFloatAssignment(m_PlagueKillPercentage)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_EliteTerroristBonus:
            case k_Token_Const_ELITE_TERRORIST_BONUS:
                if(!lex->GetFloatAssignment(m_EliteTerroristBonus)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_TerroistEliteChance:
            case k_Token_Const_TERRORIST_ELITE_CHANCE:
                if(!lex->GetFloatAssignment(m_TerroistEliteChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_NukePopulationPercentage:
            case k_Token_Const_NUKE_POPULATION_PERCENTAGE:
                if(!lex->GetFloatAssignment(m_NukePopulationPercentage)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_SpecialActionMoveCost:
            case k_Token_Const_SPECIAL_ACTION_MOVE_COST:
                if(!lex->GetFloatAssignment(m_SpecialActionMoveCost)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ClericConversionFactor:
            case k_Token_Const_CLERIC_CONVERSION_FACTOR:
                if(!lex->GetFloatAssignment(m_ClericConversionFactor)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_TelevangelistConversionFactor:
            case k_Token_Const_TELEVANGELIST_CONVERSION_FACTOR:
                if(!lex->GetFloatAssignment(m_TelevangelistConversionFactor)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ReformationChance:
            case k_Token_Const_REFORMATION_CHANCE:
                if(!lex->GetFloatAssignment(m_ReformationChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ReformationDeathChance:
            case k_Token_Const_REFORMATION_DEATH_CHANCE:
                if(!lex->GetFloatAssignment(m_ReformationDeathChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ReformationHappinessTime:
            case k_Token_Const_REFORMATION_HAPPINESS_TIME:
                if(!lex->GetIntAssignment(m_ReformationHappinessTime)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ReformationHappinessAmount:
            case k_Token_Const_REFORMATION_HAPPINESS_AMOUNT:
                if(!lex->GetIntAssignment(m_ReformationHappinessAmount)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_UnconvertedIndulgenceGold:
            case k_Token_Const_UNCONVERTED_INDULGENCE_GOLD:
                if(!lex->GetIntAssignment(m_UnconvertedIndulgenceGold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_UnconvertedIndulgenceHappiness:
            case k_Token_Const_UNCONVERTED_INDULGENCE_HAPPINESS:
                if(!lex->GetIntAssignment(m_UnconvertedIndulgenceHappiness)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ConvertedIndulgenceGold:
            case k_Token_Const_CONVERTED_INDULGENCE_GOLD:
                if(!lex->GetIntAssignment(m_ConvertedIndulgenceGold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ConvertedIndulgenceHappiness:
            case k_Token_Const_CONVERTED_INDULGENCE_HAPPINESS:
                if(!lex->GetIntAssignment(m_ConvertedIndulgenceHappiness)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_OtherFaithIndulgenceGold:
            case k_Token_Const_OTHER_FAITH_INDULGENCE_GOLD:
                if(!lex->GetIntAssignment(m_OtherFaithIndulgenceGold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_OtherFaithIndulgenceHappiness:
            case k_Token_Const_OTHER_FAITH_INDULGENCE_HAPPINESS:
                if(!lex->GetIntAssignment(m_OtherFaithIndulgenceHappiness)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_SoothsayHappyAmount:
            case k_Token_Const_SOOTHSAY_HAPPY_AMOUNT:
                if(!lex->GetIntAssignment(m_SoothsayHappyAmount)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RuinsBoxWidth:
            case k_Token_Const_RUINS_BOX_WIDTH:
                if(!lex->GetIntAssignment(m_RuinsBoxWidth)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RuinsBoxHeight:
            case k_Token_Const_RUINS_BOX_HEIGHT:
                if(!lex->GetIntAssignment(m_RuinsBoxHeight)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RuinsChancePerBox:
            case k_Token_Const_RUINS_CHANCE_PER_BOX:
                if(!lex->GetFloatAssignment(m_RuinsChancePerBox)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxRuinsGold:
            case k_Token_Const_MAX_RUINS_GOLD:
                if(!lex->GetIntAssignment(m_MaxRuinsGold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxRuinsAdvance:
            case k_Token_Const_MAX_RUINS_ADVANCE:
                if(!lex->GetIntAssignment(m_MaxRuinsAdvance)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxRuinsUnit:
            case k_Token_Const_MAX_RUINS_UNIT:
                if(!lex->GetIntAssignment(m_MaxRuinsUnit)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_UnitRushModifier:
            case k_Token_Const_UNIT_RUSH_MODIFIER:
                if(!lex->GetIntAssignment(m_UnitRushModifier)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BuildingRushModifier:
            case k_Token_Const_IMPROVEMENT_RUSH_MODIFIER:
                if(!lex->GetIntAssignment(m_BuildingRushModifier)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_WonderRushModifier:
            case k_Token_Const_WONDER_RUSH_MODIFIER:
                if(!lex->GetIntAssignment(m_WonderRushModifier)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BuildingProductionToValueModifier:
            case k_Token_Const_BUILDING_PRODUCTION_TO_VALUE_MODIFIER:
                if(!lex->GetFloatAssignment(m_BuildingProductionToValueModifier)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MonopolyThreshold:
            case k_Token_Const_MONOPOLY_THRESHOLD:
                if(!lex->GetIntAssignment(m_MonopolyThreshold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PopulationPollutionWarningThreshold:
            case k_Token_Const_POPULATION_POLLUTION_WARNING_THRESHOLD:
                if(!lex->GetIntAssignment(m_PopulationPollutionWarningThreshold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_IndustrialPollutionWarningThreshold:
            case k_Token_Const_INDUSTRIAL_POLLUTION_WARNING_THRESHOLD:
                if(!lex->GetIntAssignment(m_IndustrialPollutionWarningThreshold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_VeryHappyThreshold:
            case k_Token_Const_VERY_HAPPY_THRESHOLD:
                if(!lex->GetIntAssignment(m_VeryHappyThreshold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CityGrowthCoefficient:
            case k_Token_Const_CITY_GROWTH_COEFFICIENT:
                if(!lex->GetIntAssignment(m_CityGrowthCoefficient)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RiotLevel:
            case k_Token_Const_RIOT_LEVEL:
                if(!lex->GetIntAssignment(m_RiotLevel)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PowerPointsToMaterials:
            case k_Token_Const_POWER_POINTS_TO_MATERIALS:
                if(!lex->GetIntAssignment(m_PowerPointsToMaterials)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxAirliftStackSize:
            case k_Token_Const_MAX_AIRLIFT_STACK_SIZE:
                if(!lex->GetIntAssignment(m_MaxAirliftStackSize)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_GoldFromPiracy:
            case k_Token_Const_GOLD_FROM_PIRACY:
                if(!lex->GetIntAssignment(m_GoldFromPiracy)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_NoPiracyExpires:
            case k_Token_Const_NO_PIRACY_EXPIRES:
                if(!lex->GetIntAssignment(m_NoPiracyExpires)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_SpaceLaunchCost:
            case k_Token_Const_SPACE_LAUNCH_COST:
                if(!lex->GetIntAssignment(m_SpaceLaunchCost)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_SpaceLandCost:
            case k_Token_Const_SPACE_LAND_COST:
                if(!lex->GetIntAssignment(m_SpaceLandCost)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_WormholeOrbitHeightPercentage:
            case k_Token_Const_WORMHOLE_ORBIT_HEIGHT_PERCENTAGE:
                if(!lex->GetIntAssignment(m_WormholeOrbitHeightPercentage)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_WormholeSpeed:
            case k_Token_Const_WORMHOLE_SPEED:
                if(!lex->GetIntAssignment(m_WormholeSpeed)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_WormholeReturnTime:
            case k_Token_Const_WORMHOLE_RETURN_TIME:
                if(!lex->GetIntAssignment(m_WormholeReturnTime)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_WormholeVisibleToAllTurns:
            case k_Token_Const_WORMHOLE_VISIBLE_TO_ALL_TURNS:
                if(!lex->GetIntAssignment(m_WormholeVisibleToAllTurns)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxGovernmentChangeTurns:
            case k_Token_Const_MAX_GOVERNMENT_CHANGE_TURNS:
                if(!lex->GetIntAssignment(m_MaxGovernmentChangeTurns)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PollutionForcesAnarchy:
            case k_Token_Const_POLLUTION_FORCES_ANARCHY:
                if(!lex->GetIntAssignment(m_PollutionForcesAnarchy)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_FoodToPollutionCoef:
            case k_Token_Const_FOOD_TO_POLLUTION_COEF:
                if(!lex->GetFloatAssignment(m_FoodToPollutionCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_EmancipationUnhappinessTurns:
            case k_Token_Const_EMANCIPATION_UNHAPPINESS_TURNS:
                if(!lex->GetIntAssignment(m_EmancipationUnhappinessTurns)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_EmancipationUnhappinessAmount:
            case k_Token_Const_EMANCIPATION_UNHAPPINESS_AMOUNT:
                if(!lex->GetIntAssignment(m_EmancipationUnhappinessAmount)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CaptureCityAdvanceChance:
            case k_Token_Const_CAPTURE_CITY_ADVANCE_CHANCE:
                if(!lex->GetFloatAssignment(m_CaptureCityAdvanceChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CityHealRate:
            case k_Token_Const_CITY_HEAL_RATE:
                if(!lex->GetFloatAssignment(m_CityHealRate)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_NormalHealRate:
            case k_Token_Const_NORMAL_HEAL_RATE:
                if(!lex->GetFloatAssignment(m_NormalHealRate)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_LocalPollutionLevel:
            case k_Token_Const_LOCAL_POLLUTION_LEVEL:
                if(!lex->GetIntAssignment(m_LocalPollutionLevel)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_LocalPollutionChance:
            case k_Token_Const_LOCAL_POLLUTION_CHANCE:
                if(!lex->GetFloatAssignment(m_LocalPollutionChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AssaultDestroyBuildingChance:
            case k_Token_Const_ASSAULT_DESTROY_BUILDING_CHANCE:
                if(!lex->GetFloatAssignment(m_AssaultDestroyBuildingChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BombardDestroyBuildingChance:
            case k_Token_Const_BOMBARD_DESTROY_BUILDING_CHANCE:
                if(!lex->GetFloatAssignment(m_BombardDestroyBuildingChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AdvanceChoicesMin:
            case k_Token_Const_ADVANCE_CHOICES_MIN:
                if(!lex->GetIntAssignment(m_AdvanceChoicesMin)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AdvanceChoicesMax:
            case k_Token_Const_ADVANCE_CHOICES_MAX:
                if(!lex->GetIntAssignment(m_AdvanceChoicesMax)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AttackConverterUnhappinessTurns:
            case k_Token_Const_ATTACK_CONVERTER_UNHAPPINESS_TURNS:
                if(!lex->GetIntAssignment(m_AttackConverterUnhappinessTurns)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AttackConverterUnhappinessAmount:
            case k_Token_Const_ATTACK_CONVERTER_UNHAPPINESS_AMOUNT:
                if(!lex->GetFloatAssignment(m_AttackConverterUnhappinessAmount)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MinStartDistanceCoefficient:
            case k_Token_Const_MIN_START_DISTANCE_COEFFICIENT:
                if(!lex->GetFloatAssignment(m_MinStartDistanceCoefficient)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxStartDistanceCoefficient:
            case k_Token_Const_MAX_START_DISTANCE_COEFFICIENT:
                if(!lex->GetFloatAssignment(m_MaxStartDistanceCoefficient)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxSameTiles:
            case k_Token_Const_MAX_SAME_TILES:
                if(!lex->GetIntAssignment(m_MaxSameTiles)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CombatVeteranChance:
            case k_Token_Const_COMBAT_VETERAN_CHANCE:
                if(!lex->GetFloatAssignment(m_CombatVeteranChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_StopTradeRounds:
            case k_Token_Const_STOP_TRADE_ROUNDS:
                if(!lex->GetIntAssignment(m_StopTradeRounds)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_LeaveOurLandsRounds:
            case k_Token_Const_LEAVE_OUR_LANDS_ROUNDS:
                if(!lex->GetIntAssignment(m_LeaveOurLandsRounds)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ReducePollutionRounds:
            case k_Token_Const_REDUCE_POLLUTION_ROUNDS:
                if(!lex->GetIntAssignment(m_ReducePollutionRounds)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CaptureCityRounds:
            case k_Token_Const_CAPTURE_CITY_ROUNDS:
                if(!lex->GetIntAssignment(m_CaptureCityRounds)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_EndPollutionRounds:
            case k_Token_Const_END_POLLUTION_ROUNDS:
                if(!lex->GetIntAssignment(m_EndPollutionRounds)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AttackEnemyRounds:
            case k_Token_Const_ATTACK_ENEMY_ROUNDS:
                if(!lex->GetIntAssignment(m_AttackEnemyRounds)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MinContinentStartSize:
            case k_Token_Const_MIN_CONTINENT_START_SIZE:
                if(!lex->GetIntAssignment(m_MinContinentStartSize)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BombardKillPopChance:
            case k_Token_Const_BOMBARD_KILL_POP_CHANCE:
                if(!lex->GetFloatAssignment(m_BombardKillPopChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AssaultKillPopChance:
            case k_Token_Const_ASSAULT_KILL_POP_CHANCE:
                if(!lex->GetFloatAssignment(m_AssaultKillPopChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CaptureKillPopChance:
            case k_Token_Const_CAPTURE_KILL_POP_CHANCE:
                if(!lex->GetFloatAssignment(m_CaptureKillPopChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ScaledPopAncient:
            case k_Token_Const_SCALED_POP_ANCIENT:
                if(!lex->GetIntAssignment(m_ScaledPopAncient)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ScaledPopRenaissance:
            case k_Token_Const_SCALED_POP_RENAISSANCE:
                if(!lex->GetIntAssignment(m_ScaledPopRenaissance)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ScaledPopModern:
            case k_Token_Const_SCALED_POP_MODERN:
                if(!lex->GetIntAssignment(m_ScaledPopModern)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ScaledPopGenetic:
            case k_Token_Const_SCALED_POP_GENETIC:
                if(!lex->GetIntAssignment(m_ScaledPopGenetic)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_ScaledPopDiamond:
            case k_Token_Const_SCALED_POP_DIAMOND:
                if(!lex->GetIntAssignment(m_ScaledPopDiamond)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PiracyKillsTraderChance:
            case k_Token_Const_PIRACY_KILLS_TRADER_CHANCE:
                if(!lex->GetIntAssignment(m_PiracyKillsTraderChance)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_UprisingChancePerUnguardedSlave:
            case k_Token_Const_UPRISING_CHANCE_PER_UNGUARDED_SLAVE:
                if(!lex->GetIntAssignment(m_UprisingChancePerUnguardedSlave)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxDisbandSize:
            case k_Token_Const_MAX_DISBAND_SIZE:
                if(!lex->GetIntAssignment(m_MaxDisbandSize)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxRequestsPerPlayerPerTurn:
            case k_Token_Const_MAX_REQUESTS_PER_PLAYER_PER_TURN:
                if(!lex->GetIntAssignment(m_MaxRequestsPerPlayerPerTurn)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_SlavesPerMilitaryUnit:
            case k_Token_Const_SLAVES_PER_MILITARY_UNIT:
                if(!lex->GetIntAssignment(m_SlavesPerMilitaryUnit)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MinAbsoluteStartDistance:
            case k_Token_Const_MIN_ABSOLUTE_START_DISTANCE:
                if(!lex->GetIntAssignment(m_MinAbsoluteStartDistance)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MapSizeSmall:
            case k_Token_Const_MAP_SIZE_SMALL:
                if(!CTPRecord::ParseIntInArray(lex, (sint32 *)m_MapSizeSmall, &m_numMapSizeSmall, k_MAX_MapSizeSmall)) {
                    done = true; break;
                }
                break;
            case k_Token_Const_MapSizeMedium:
            case k_Token_Const_MAP_SIZE_MEDIUM:
                if(!CTPRecord::ParseIntInArray(lex, (sint32 *)m_MapSizeMedium, &m_numMapSizeMedium, k_MAX_MapSizeMedium)) {
                    done = true; break;
                }
                break;
            case k_Token_Const_MapSizeLarge:
            case k_Token_Const_MAP_SIZE_LARGE:
                if(!CTPRecord::ParseIntInArray(lex, (sint32 *)m_MapSizeLarge, &m_numMapSizeLarge, k_MAX_MapSizeLarge)) {
                    done = true; break;
                }
                break;
            case k_Token_Const_MapSizeGigantic:
            case k_Token_Const_MAP_SIZE_GIGANTIC:
                if(!CTPRecord::ParseIntInArray(lex, (sint32 *)m_MapSizeGigantic, &m_numMapSizeGigantic, k_MAX_MapSizeGigantic)) {
                    done = true; break;
                }
                break;
            case k_Token_Const_RailLaunchPollution:
            case k_Token_Const_RAIL_LAUNCH_POLLUTION:
                if(!lex->GetIntAssignment(m_RailLaunchPollution)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_SpaceFuelCost:
            case k_Token_Const_SPACE_FUEL_COST:
                if(!lex->GetIntAssignment(m_SpaceFuelCost)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_NonSpaceFuelCost:
            case k_Token_Const_NON_SPACE_FUEL_COST:
                if(!lex->GetIntAssignment(m_NonSpaceFuelCost)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_StarvationWarningFudgeFactor:
            case k_Token_Const_STARVATION_WARNING_FUDGE_FACTOR:
                if(!lex->GetIntAssignment(m_StarvationWarningFudgeFactor)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaintenanceWarningFudgeFactor:
            case k_Token_Const_MAINTENANCE_WARNING_FUDGE_FACTOR:
                if(!lex->GetIntAssignment(m_MaintenanceWarningFudgeFactor)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_SupportWarningFudgeFactor:
            case k_Token_Const_SUPPORT_WARNING_FUDGE_FACTOR:
                if(!lex->GetIntAssignment(m_SupportWarningFudgeFactor)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RelativeAIProductionCheatCoef:
            case k_Token_Const_RELATIVE_AI_PRODUCTION_CHEAT_COEF:
                if(!lex->GetFloatAssignment(m_RelativeAIProductionCheatCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RelativeAIScienceCheatCoef:
            case k_Token_Const_RELATIVE_AI_SCIENCE_CHEAT_COEF:
                if(!lex->GetFloatAssignment(m_RelativeAIScienceCheatCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_NukeKillsTiles:
            case k_Token_Const_NUKE_KILL_TILES:
                if(!lex->GetIntAssignment(m_NukeKillsTiles)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_InciteRevolutionGoldCoefficient:
            case k_Token_Const_INCITE_REVOLUTION_GOLD_COEFFICIENT:
                if(!lex->GetFloatAssignment(m_InciteRevolutionGoldCoefficient)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_InciteRevolutionCapitolPenalty:
            case k_Token_Const_INCITE_REVOLUTION_CAPITOL_PENALTY:
                if(!lex->GetFloatAssignment(m_InciteRevolutionCapitolPenalty)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_InciteUprisingGoldCoefficient:
            case k_Token_Const_INCITE_UPRISING_GOLD_COEFFICIENT:
                if(!lex->GetFloatAssignment(m_InciteUprisingGoldCoefficient)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_InciteUprisingCapitolPenalty:
            case k_Token_Const_INCITE_UPRISING_CAPITOL_PENALTY:
                if(!lex->GetFloatAssignment(m_InciteUprisingCapitolPenalty)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BioInfectionUnhappiness:
            case k_Token_Const_BIO_INFECTION_UNHAPPINESS:
                if(!lex->GetIntAssignment(m_BioInfectionUnhappiness)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MinEcoPactViolationLevel:
            case k_Token_Const_MIN_ECO_PACT_VIOLATION_LEVEL:
                if(!lex->GetIntAssignment(m_MinEcoPactViolationLevel)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_NanoInfectionTerroristDeathChance:
            case k_Token_Const_NANO_INFECTION_TERRORIST_DEATH_CHANCE:
                if(!lex->GetFloatAssignment(m_NanoInfectionTerroristDeathChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BioInfectionTerroristDeathChance:
            case k_Token_Const_BIO_INFECTION_TERRORIST_DEATH_CHANCE:
                if(!lex->GetFloatAssignment(m_BioInfectionTerroristDeathChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_FloodChangesCoastToWaterChance:
            case k_Token_Const_FLOOD_CHANGES_COAST_TO_WATER_CHANCE:
                if(!lex->GetFloatAssignment(m_FloodChangesCoastToWaterChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AICheatEcoPactMin:
            case k_Token_Const_AI_CHEAT_ECO_PACT_MIN:
                if(!lex->GetIntAssignment(m_AICheatEcoPactMin)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_AICheatEcoPactMax:
            case k_Token_Const_AI_CHEAT_ECO_PACT_MAx:
                if(!lex->GetIntAssignment(m_AICheatEcoPactMax)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxAbsoluteGrowthRate:
            case k_Token_Const_MAX_ABSOLUTE_GROWTH_RATE:
                if(!lex->GetIntAssignment(m_MaxAbsoluteGrowthRate)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_TradeDistanceCoefficient:
            case k_Token_Const_TRADE_DISTANCE_COEFFICIENT:
                if(!lex->GetFloatAssignment(m_TradeDistanceCoefficient)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MinLikeTilesForGood:
            case k_Token_Const_MIN_LIKE_TILES_FOR_GOOD:
                if(!lex->GetIntAssignment(m_MinLikeTilesForGood)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MinGoodValue:
            case k_Token_Const_MIN_GOOD_VALUE:
                if(!lex->GetFloatAssignment(m_MinGoodValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxGoodValue:
            case k_Token_Const_MAX_GOOD_VALUE:
                if(!lex->GetFloatAssignment(m_MaxGoodValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PiracyWasteCoefficient:
            case k_Token_Const_PIRACY_WASTE_COEFFICIENT:
                if(!lex->GetFloatAssignment(m_PiracyWasteCoefficient)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BorderIntRadius:
            case k_Token_Const_BORDER_INT_RADIUS:
                if(!lex->GetIntAssignment(m_BorderIntRadius)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BorderSquaredRadius:
            case k_Token_Const_BORDER_SQUARED_RADIUS:
                if(!lex->GetIntAssignment(m_BorderSquaredRadius)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BioInfectionProductionCoef:
            case k_Token_Const_BIO_INFECTION_PRODUCTION_COEF:
                if(!lex->GetFloatAssignment(m_BioInfectionProductionCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_NanoBuildingKillPercentage:
            case k_Token_Const_NANO_BUILDING_KILL_PERCENTAGE:
                if(!lex->GetFloatAssignment(m_NanoBuildingKillPercentage)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BaseStarvationProtection:
            case k_Token_Const_BASE_STARVATION_PROTECTION:
                if(!lex->GetIntAssignment(m_BaseStarvationProtection)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CaravanCoef:
            case k_Token_Const_CARAVAN_COEF:
                if(!lex->GetFloatAssignment(m_CaravanCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_DomesticTradeReduction:
            case k_Token_Const_DOMESTIC_TRADE_COEF:
                if(!lex->GetFloatAssignment(m_DomesticTradeReduction)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_TradePactCoef:
            case k_Token_Const_PACT_TRADE_COEF:
                if(!lex->GetFloatAssignment(m_TradePactCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_PollutionCausedByNuke:
            case k_Token_Const_POLLUTION_CAUSED_BY_NUKE:
                if(!lex->GetIntAssignment(m_PollutionCausedByNuke)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxMatchListCycles:
            case k_Token_Const_MAX_MATCH_LIST_CYCLES:
                if(!lex->GetIntAssignment(m_MaxMatchListCycles)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MinTurnsBetweenRevolts:
            case k_Token_Const_MIN_TURNS_BETWEEN_REVOLT:
                if(!lex->GetIntAssignment(m_MinTurnsBetweenRevolts)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxCityWonders:
            case k_Token_Const_MAX_CITY_WONDERS:
                if(!lex->GetIntAssignment(m_MaxCityWonders)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_MaxCityBuildings:
            case k_Token_Const_MAX_CITY_BUILDINGS:
                if(!lex->GetIntAssignment(m_MaxCityBuildings)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CapturedCityKillPop:
            case k_Token_Const_CAPTURED_CITY_KILL_POP:
                if(!lex->GetIntAssignment(m_CapturedCityKillPop)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CombatEliteChance:
            case k_Token_Const_COMBAT_ELITE_CHANCE:
                if(!lex->GetFloatAssignment(m_CombatEliteChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CombatLeaderChance:
            case k_Token_Const_COMBAT_LEADER_CHANCE:
                if(!lex->GetFloatAssignment(m_CombatLeaderChance)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CityOnTradeRouteCoeff:
            case k_Token_Const_CITY_ON_TRADE_ROUTE_BONUS:
                if(!lex->GetFloatAssignment(m_CityOnTradeRouteCoeff)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CityExpansionDenominator:
            case k_Token_Const_CITY_EXPANSION_DENOMINATOR:
                if(!lex->GetIntAssignment(m_CityExpansionDenominator)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_TurnsAcceptedForOnePop:
            case k_Token_Const_TURNS_ACCEPTED_FOR_ONE_POP:
                if(!lex->GetIntAssignment(m_TurnsAcceptedForOnePop)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_UseBaseMoveCostsForRoads:
                if(!lex->GetIntAssignment(m_UseBaseMoveCostsForRoads)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_RoadAlreadyThereCostsCoefficient:
                if(!lex->GetFloatAssignment(m_RoadAlreadyThereCostsCoefficient)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BuildRoadsToClosestCities:
                if(!lex->GetIntAssignment(m_BuildRoadsToClosestCities)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_BaseRoadPriorityVsThreatRank:
                if(!lex->GetFloatAssignment(m_BaseRoadPriorityVsThreatRank)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Const_CosiderNumCitiesForSlaves:
                if(!lex->GetIntAssignment(m_CosiderNumCitiesForSlaves)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Const_SmallCityImproveCoeff:
                if(!lex->GetFloatAssignment(m_SmallCityImproveCoeff)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Undefined:
            case k_Token_CloseBrace:
                done = true;
                result = 1;
                break;
            default:
                if(!lex->GetInt(m_PercentLand)) {
                    DBERROR(("Unknown token"));
                    done = true; break;
                }
                break;
        }
    }
    CheckRequiredFields(lex);
    lex->RestoreTokens();
    return result;
}

void ConstRecord::ResolveDBReferences()
{
}

void ConstRecord::Merge(const ConstRecord & rval){
    m_numMapSizeSmall = rval.m_numMapSizeSmall;
    std::copy(rval.m_MapSizeSmall, rval.m_MapSizeSmall + rval.m_numMapSizeSmall, m_MapSizeSmall);

    m_numMapSizeMedium = rval.m_numMapSizeMedium;
    std::copy(rval.m_MapSizeMedium, rval.m_MapSizeMedium + rval.m_numMapSizeMedium, m_MapSizeMedium);

    m_numMapSizeLarge = rval.m_numMapSizeLarge;
    std::copy(rval.m_MapSizeLarge, rval.m_MapSizeLarge + rval.m_numMapSizeLarge, m_MapSizeLarge);

    m_numMapSizeGigantic = rval.m_numMapSizeGigantic;
    std::copy(rval.m_MapSizeGigantic, rval.m_MapSizeGigantic + rval.m_numMapSizeGigantic, m_MapSizeGigantic);

}

sint32 ConstRecord::GetMapSizeSmall(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numMapSizeSmall);
    if((index < 0) || (index >= m_numMapSizeSmall)) {
        return 0;
    }
    return m_MapSizeSmall[index];
}

sint32 ConstRecord::GetMapSizeMedium(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numMapSizeMedium);
    if((index < 0) || (index >= m_numMapSizeMedium)) {
        return 0;
    }
    return m_MapSizeMedium[index];
}

sint32 ConstRecord::GetMapSizeLarge(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numMapSizeLarge);
    if((index < 0) || (index >= m_numMapSizeLarge)) {
        return 0;
    }
    return m_MapSizeLarge[index];
}

sint32 ConstRecord::GetMapSizeGigantic(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numMapSizeGigantic);
    if((index < 0) || (index >= m_numMapSizeGigantic)) {
        return 0;
    }
    return m_MapSizeGigantic[index];
}

