
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef ICON_RECORD_H__
#define ICON_RECORD_H__

class IconRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;

#define k_Num_IconRecord_Tokens 10


class IconRecord : public CTPRecord
{
public:
    typedef sint32 (IconRecord::*IntAccessor)() const;
    typedef bool   (IconRecord::*BoolAccessor)() const;
    typedef double (IconRecord::*FloatAccessor)() const ;
    typedef bool   (IconRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (IconRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (IconRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (IconRecord::*FloatArrayAccessor)(sint32 index) const;

private:
    char *            m_Icon;
    char *            m_Movie;
    char *            m_Gameplay;
    char *            m_Historical;
    char *            m_Prereq;
    char *            m_Vari;
    char *            m_FirstFrame;
    char *            m_StatText;
    char *            m_LargeIcon;
    char *            m_SmallIcon;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    IconRecord() { Init(); };
    IconRecord(CivArchive &archive) { Serialize(archive); };
    IconRecord(IconRecord const & rval) { Init(); *this = rval; }
    ~IconRecord();
    IconRecord const & operator = (IconRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const IconRecord & rval);

    char const * GetIcon() const { return m_Icon; }
    char const * GetMovie() const { return m_Movie; }
    char const * GetGameplay() const { return m_Gameplay; }
    char const * GetHistorical() const { return m_Historical; }
    char const * GetPrereq() const { return m_Prereq; }
    char const * GetVari() const { return m_Vari; }
    char const * GetFirstFrame() const { return m_FirstFrame; }
    char const * GetStatText() const { return m_StatText; }
    char const * GetLargeIcon() const { return m_LargeIcon; }
    char const * GetSmallIcon() const { return m_SmallIcon; }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* IconRecord */

struct IconRecordAccessorInfo
{
    IconRecord::IntAccessor        m_intAccessor;
    IconRecord::BoolAccessor       m_boolAccessor;
    IconRecord::FloatAccessor      m_floatAccessor;
    IconRecord::BitIntAccessor     m_bitIntAccessor;
    IconRecord::BitFloatAccessor   m_bitFloatAccessor;
    IconRecord::IntArrayAccessor   m_intArrayAccessor;
    IconRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern IconRecordAccessorInfo      g_IconRecord_Accessors[];
extern CTPDatabase<IconRecord> *   g_theIconDB;

extern const char * g_Icon_Tokens[];

#endif
