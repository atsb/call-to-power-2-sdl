
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef TERRAIN_RECORD_H__
#define TERRAIN_RECORD_H__

class TerrainRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class AdvanceRecord;
class IconRecord;
class ResourceRecord;

#define k_Num_TerrainRecord_Tokens 23

//
// m_flags0: Terrain
#define k_Terrain_CanDie_Bit                     0x00000001
#define k_Terrain_GLHidden_Bit                   0x00000002
#define k_Terrain_TransformAdd_Bit               0x00000004
#define k_Terrain_TransformRemove_Bit            0x00000008
#define k_Terrain_EnvCity_Bit                    0x00000010
#define k_Terrain_EnvRiver_Bit                   0x00000020
#define k_Terrain_HostileTerrainCost_Bit         0x00000040
#define k_Terrain_NoIndex_Bit                    0x00000080
//
// m_MovementType bit group
#define k_Terrain_MovementType_Land_Bit          0x00000001
#define k_Terrain_MovementType_Sea_Bit           0x00000002
#define k_Terrain_MovementType_Air_Bit           0x00000004
#define k_Terrain_MovementType_Mountain_Bit      0x00000008
#define k_Terrain_MovementType_Trade_Bit         0x00000010
#define k_Terrain_MovementType_ShallowWater_Bit  0x00000020
#define k_Terrain_MovementType_Space_Bit         0x00000040
//
// m_InternalType bit group
#define k_Terrain_InternalType_Forest_Bit        0x00000001
#define k_Terrain_InternalType_Plains_Bit        0x00000002
#define k_Terrain_InternalType_Tundra_Bit        0x00000004
#define k_Terrain_InternalType_Glacier_Bit       0x00000008
#define k_Terrain_InternalType_Grassland_Bit     0x00000010
#define k_Terrain_InternalType_Desert_Bit        0x00000020
#define k_Terrain_InternalType_Swamp_Bit         0x00000040
#define k_Terrain_InternalType_Jungle_Bit        0x00000080
#define k_Terrain_InternalType_Mountain_Bit      0x00000100
#define k_Terrain_InternalType_Hill_Bit          0x00000200
#define k_Terrain_InternalType_WaterShallow_Bit  0x00000400
#define k_Terrain_InternalType_WaterDeep_Bit     0x00000800
#define k_Terrain_InternalType_WaterVolcano_Bit  0x00001000
#define k_Terrain_InternalType_WaterBeach_Bit    0x00002000
#define k_Terrain_InternalType_WaterShelf_Bit    0x00004000
#define k_Terrain_InternalType_WaterTrench_Bit   0x00008000
#define k_Terrain_InternalType_WaterRift_Bit     0x00010000
#define k_Terrain_InternalType_Dead_Bit          0x00020000
#define k_Terrain_InternalType_BrownHill_Bit     0x00040000
#define k_Terrain_InternalType_BrownMountain_Bit 0x00080000
#define k_Terrain_InternalType_WhiteHill_Bit     0x00100000
#define k_Terrain_InternalType_WhiteMountain_Bit 0x00200000
#define k_Terrain_InternalType_WaterKelp_Bit     0x00400000
#define k_Terrain_InternalType_WaterReef_Bit     0x00800000
#define k_Terrain_InternalType_Special_Bit       0x01000000
//
// m_flags0: Modifiers
#define k_Modifiers_Movement_Bit                 0x00000001
#define k_Modifiers_CanUpgrade_Bit               0x00000002
#define k_MAX_Resources                      4

class TerrainRecord : public CTPRecord
{
public:
    typedef sint32 (TerrainRecord::*IntAccessor)() const;
    typedef bool   (TerrainRecord::*BoolAccessor)() const;
    typedef double (TerrainRecord::*FloatAccessor)() const ;
    typedef bool   (TerrainRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (TerrainRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (TerrainRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (TerrainRecord::*FloatArrayAccessor)(sint32 index) const;

    class TransformData {
    private:
        sint32            m_Time;
        sint32            m_Materials;

    public:
        TransformData();
        TransformData(CivArchive & archive){ Serialize(archive); };
        ~TransformData();
        TransformData const & operator = (TransformData const & rval);
        bool operator == (TransformData const & rval) {
          return false;
        }

        void Serialize(CivArchive &archive);
        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        sint32 ParseFullySequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, TransformData **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, TransformData *array, sint32 *numElements, sint32 maxSize);
        static sint32 ParseInArraySequential(DBLexer *lex, TransformData **array, sint32 *numElements);
        static sint32 ParseInArraySequential(DBLexer *lex, TransformData *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();

        sint32 GetTime() const { return m_Time; }
        sint32 GetMaterials() const { return m_Materials; }

    }; /* class TransformData */

    class Modifiers {
    private:
        uint32            m_flags0;
        sint32            m_Score;
        sint32            m_Gold;
        sint32            m_DeadGold;
        sint32            m_Food;
        sint32            m_Shield;
        sint32            m_MovementValue;
        sint32            m_Freight;
        sint32            m_Materials;
        sint32            m_Time;
        double            m_Defense;
        sint32            m_DeadFood;
        sint32            m_DeadShield;

    public:
        Modifiers();
        Modifiers(CivArchive & archive){ Serialize(archive); };
        ~Modifiers();
        Modifiers const & operator = (Modifiers const & rval);
        bool operator == (Modifiers const & rval) {
          return false;
        }

        void Serialize(CivArchive &archive);
        sint32 Parse(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, Modifiers **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, Modifiers *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();

        sint32 GetScore() const { return m_Score; }
        sint32 GetGold() const { return m_Gold; }
        sint32 GetDeadGold() const { return m_DeadGold; }
        sint32 GetFood() const { return m_Food; }
        sint32 GetShield() const { return m_Shield; }
        bool HasMovement() const { return (m_flags0 & k_Modifiers_Movement_Bit) != 0; }
        bool GetMovement(sint32 & value) const
        {
            if (m_flags0 & k_Modifiers_Movement_Bit)
            {
                value = m_MovementValue;
            }
            return (m_flags0 & k_Modifiers_Movement_Bit) != 0;
        }
        sint32 GetFreight() const { return m_Freight; }
        sint32 GetMaterials() const { return m_Materials; }
        sint32 GetTime() const { return m_Time; }
        double GetDefense() const { return m_Defense; }
        sint32 GetDeadFood() const { return m_DeadFood; }
        sint32 GetDeadShield() const { return m_DeadShield; }
        bool GetCanUpgrade() const { return (m_flags0 & k_Modifiers_CanUpgrade_Bit) != 0; }

    }; /* class Modifiers */

private:
    uint32 m_flags0;
    sint32            m_Icon; // Index into Icon database
    sint32            m_AddAdvance; // Index into Advance database
    sint32            m_RemoveAdvance; // Index into Advance database
    TransformData     m_TransformAddValue;
    TransformData     m_TransformRemoveValue;
    Modifiers         m_EnvBase;
    Modifiers         m_EnvCityValue;
    Modifiers         m_EnvRiverValue;
    sint32            m_HostileTerrainCostValue;
    sint32            m_Resources[k_MAX_Resources]; // Index into Resource database
    sint32            m_numResources;
    uint32            m_MovementType;
    uint32            m_InternalType;
    sint32            m_TilesetIndex;
    sint32            m_HutTilesetIndexA;
    sint32            m_HutTilesetIndexB;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    TerrainRecord() { Init(); };
    TerrainRecord(CivArchive &archive) { Serialize(archive); };
    TerrainRecord(TerrainRecord const & rval) { Init(); *this = rval; }
    ~TerrainRecord();
    TerrainRecord const & operator = (TerrainRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const TerrainRecord & rval);
    sint32 ParseMovementTypeBit(DBLexer *lex);
    sint32 ParseInternalTypeBit(DBLexer *lex);

    sint32           GetIconIndex() const { return m_Icon; }
    IconRecord const * GetIcon() const;
    sint32           GetAddAdvanceIndex() const { return m_AddAdvance; }
    AdvanceRecord const * GetAddAdvance() const;
    sint32           GetRemoveAdvanceIndex() const { return m_RemoveAdvance; }
    AdvanceRecord const * GetRemoveAdvance() const;
    bool GetCanDie() const { return (m_flags0 & k_Terrain_CanDie_Bit) != 0; }
    bool GetGLHidden() const { return (m_flags0 & k_Terrain_GLHidden_Bit) != 0; }
    bool HasTransformAdd() const { return (m_flags0 & k_Terrain_TransformAdd_Bit) != 0; }
    bool GetTransformAdd(const TransformData *&ptr) const
    {
        ptr = (m_flags0 & k_Terrain_TransformAdd_Bit) ? &m_TransformAddValue : NULL;
        return (m_flags0 & k_Terrain_TransformAdd_Bit) != 0;
    }
    const TransformData * GetTransformAddPtr() const
    {
        return (m_flags0 & k_Terrain_TransformAdd_Bit) ? &m_TransformAddValue : NULL;
    }
    bool HasTransformRemove() const { return (m_flags0 & k_Terrain_TransformRemove_Bit) != 0; }
    bool GetTransformRemove(const TransformData *&ptr) const
    {
        ptr = (m_flags0 & k_Terrain_TransformRemove_Bit) ? &m_TransformRemoveValue : NULL;
        return (m_flags0 & k_Terrain_TransformRemove_Bit) != 0;
    }
    const TransformData * GetTransformRemovePtr() const
    {
        return (m_flags0 & k_Terrain_TransformRemove_Bit) ? &m_TransformRemoveValue : NULL;
    }
    Modifiers const * GetEnvBase() const { return &m_EnvBase; }
    bool HasEnvCity() const { return (m_flags0 & k_Terrain_EnvCity_Bit) != 0; }
    bool GetEnvCity(const Modifiers *&ptr) const
    {
        ptr = (m_flags0 & k_Terrain_EnvCity_Bit) ? &m_EnvCityValue : NULL;
        return (m_flags0 & k_Terrain_EnvCity_Bit) != 0;
    }
    const Modifiers * GetEnvCityPtr() const
    {
        return (m_flags0 & k_Terrain_EnvCity_Bit) ? &m_EnvCityValue : NULL;
    }
    bool HasEnvRiver() const { return (m_flags0 & k_Terrain_EnvRiver_Bit) != 0; }
    bool GetEnvRiver(const Modifiers *&ptr) const
    {
        ptr = (m_flags0 & k_Terrain_EnvRiver_Bit) ? &m_EnvRiverValue : NULL;
        return (m_flags0 & k_Terrain_EnvRiver_Bit) != 0;
    }
    const Modifiers * GetEnvRiverPtr() const
    {
        return (m_flags0 & k_Terrain_EnvRiver_Bit) ? &m_EnvRiverValue : NULL;
    }
    bool HasHostileTerrainCost() const { return (m_flags0 & k_Terrain_HostileTerrainCost_Bit) != 0; }
    bool GetHostileTerrainCost(sint32 & value) const
    {
        if (m_flags0 & k_Terrain_HostileTerrainCost_Bit)
        {
            value = m_HostileTerrainCostValue;
        }
        return (m_flags0 & k_Terrain_HostileTerrainCost_Bit) != 0;
    }
    sint32 GetResourcesIndex(sint32 index) const;
    const ResourceRecord * GetResources(sint32 index) const;
    sint32 GetNumResources() const { return m_numResources;}
    bool GetNoIndex() const { return (m_flags0 & k_Terrain_NoIndex_Bit) != 0; }
    uint32           GetMovementType() const { return m_MovementType; }
    bool             GetMovementTypeLand() const { return (m_MovementType & k_Terrain_MovementType_Land_Bit) != 0; }
    bool             GetMovementTypeSea() const { return (m_MovementType & k_Terrain_MovementType_Sea_Bit) != 0; }
    bool             GetMovementTypeAir() const { return (m_MovementType & k_Terrain_MovementType_Air_Bit) != 0; }
    bool             GetMovementTypeMountain() const { return (m_MovementType & k_Terrain_MovementType_Mountain_Bit) != 0; }
    bool             GetMovementTypeTrade() const { return (m_MovementType & k_Terrain_MovementType_Trade_Bit) != 0; }
    bool             GetMovementTypeShallowWater() const { return (m_MovementType & k_Terrain_MovementType_ShallowWater_Bit) != 0; }
    bool             GetMovementTypeSpace() const { return (m_MovementType & k_Terrain_MovementType_Space_Bit) != 0; }
    uint32           GetInternalType() const { return m_InternalType; }
    bool             GetInternalTypeForest() const { return (m_InternalType & k_Terrain_InternalType_Forest_Bit) != 0; }
    bool             GetInternalTypePlains() const { return (m_InternalType & k_Terrain_InternalType_Plains_Bit) != 0; }
    bool             GetInternalTypeTundra() const { return (m_InternalType & k_Terrain_InternalType_Tundra_Bit) != 0; }
    bool             GetInternalTypeGlacier() const { return (m_InternalType & k_Terrain_InternalType_Glacier_Bit) != 0; }
    bool             GetInternalTypeGrassland() const { return (m_InternalType & k_Terrain_InternalType_Grassland_Bit) != 0; }
    bool             GetInternalTypeDesert() const { return (m_InternalType & k_Terrain_InternalType_Desert_Bit) != 0; }
    bool             GetInternalTypeSwamp() const { return (m_InternalType & k_Terrain_InternalType_Swamp_Bit) != 0; }
    bool             GetInternalTypeJungle() const { return (m_InternalType & k_Terrain_InternalType_Jungle_Bit) != 0; }
    bool             GetInternalTypeMountain() const { return (m_InternalType & k_Terrain_InternalType_Mountain_Bit) != 0; }
    bool             GetInternalTypeHill() const { return (m_InternalType & k_Terrain_InternalType_Hill_Bit) != 0; }
    bool             GetInternalTypeWaterShallow() const { return (m_InternalType & k_Terrain_InternalType_WaterShallow_Bit) != 0; }
    bool             GetInternalTypeWaterDeep() const { return (m_InternalType & k_Terrain_InternalType_WaterDeep_Bit) != 0; }
    bool             GetInternalTypeWaterVolcano() const { return (m_InternalType & k_Terrain_InternalType_WaterVolcano_Bit) != 0; }
    bool             GetInternalTypeWaterBeach() const { return (m_InternalType & k_Terrain_InternalType_WaterBeach_Bit) != 0; }
    bool             GetInternalTypeWaterShelf() const { return (m_InternalType & k_Terrain_InternalType_WaterShelf_Bit) != 0; }
    bool             GetInternalTypeWaterTrench() const { return (m_InternalType & k_Terrain_InternalType_WaterTrench_Bit) != 0; }
    bool             GetInternalTypeWaterRift() const { return (m_InternalType & k_Terrain_InternalType_WaterRift_Bit) != 0; }
    bool             GetInternalTypeDead() const { return (m_InternalType & k_Terrain_InternalType_Dead_Bit) != 0; }
    bool             GetInternalTypeBrownHill() const { return (m_InternalType & k_Terrain_InternalType_BrownHill_Bit) != 0; }
    bool             GetInternalTypeBrownMountain() const { return (m_InternalType & k_Terrain_InternalType_BrownMountain_Bit) != 0; }
    bool             GetInternalTypeWhiteHill() const { return (m_InternalType & k_Terrain_InternalType_WhiteHill_Bit) != 0; }
    bool             GetInternalTypeWhiteMountain() const { return (m_InternalType & k_Terrain_InternalType_WhiteMountain_Bit) != 0; }
    bool             GetInternalTypeWaterKelp() const { return (m_InternalType & k_Terrain_InternalType_WaterKelp_Bit) != 0; }
    bool             GetInternalTypeWaterReef() const { return (m_InternalType & k_Terrain_InternalType_WaterReef_Bit) != 0; }
    bool             GetInternalTypeSpecial() const { return (m_InternalType & k_Terrain_InternalType_Special_Bit) != 0; }
    sint32 GetTilesetIndex() const { return m_TilesetIndex; }
    sint32 GetHutTilesetIndexA() const { return m_HutTilesetIndexA; }
    sint32 GetHutTilesetIndexB() const { return m_HutTilesetIndexB; }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* TerrainRecord */

struct TerrainRecordAccessorInfo
{
    TerrainRecord::IntAccessor        m_intAccessor;
    TerrainRecord::BoolAccessor       m_boolAccessor;
    TerrainRecord::FloatAccessor      m_floatAccessor;
    TerrainRecord::BitIntAccessor     m_bitIntAccessor;
    TerrainRecord::BitFloatAccessor   m_bitFloatAccessor;
    TerrainRecord::IntArrayAccessor   m_intArrayAccessor;
    TerrainRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern TerrainRecordAccessorInfo      g_TerrainRecord_Accessors[];
extern CTPDatabase<TerrainRecord> *   g_theTerrainDB;

extern const char * g_Terrain_Tokens[];

#endif
