
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef GOVERNMENT_RECORD_H__
#define GOVERNMENT_RECORD_H__

class GovernmentRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class AdvanceRecord;
class CityStyleRecord;
class IconRecord;
class MapIconRecord;

#define k_Num_GovernmentRecord_Tokens 84

//
// m_flags0: Government
#define k_Government_GovtIcon_Bit                0x00000001
#define k_Government_IsEcotopia_Bit              0x00000002
#define k_Government_IsAnarchy_Bit               0x00000004
#define k_Government_IsXenophobic_Bit            0x00000008
#define k_Government_HasGulags_Bit               0x00000010
#define k_Government_IsCapitalist_Bit            0x00000020
#define k_Government_IsTechnocracy_Bit           0x00000040
#define k_Government_IsAgrarian_Bit              0x00000080
#define k_Government_HasMindlessTelevision_Bit   0x00000100
#define k_Government_RiotLevelModifier_Bit       0x00000200
#define k_Government_GLHidden_Bit                0x00000400
#define k_MAX_ObsoleteAdvance                5

class GovernmentRecord : public CTPRecord
{
public:
    typedef sint32 (GovernmentRecord::*IntAccessor)() const;
    typedef bool   (GovernmentRecord::*BoolAccessor)() const;
    typedef double (GovernmentRecord::*FloatAccessor)() const ;
    typedef bool   (GovernmentRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (GovernmentRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (GovernmentRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (GovernmentRecord::*FloatArrayAccessor)(sint32 index) const;

private:
    uint32 m_flags0;
    double            m_PositiveWorkdayCoef;
    double            m_NegativeWorkdayCoef;
    sint32            m_WorkdayExpectation;
    double            m_PositiveWagesCoef;
    double            m_NegativeWagesCoef;
    sint32            m_WagesExpectation;
    double            m_PositiveRationsCoef;
    double            m_NegativeRationsCoef;
    sint32            m_RationsExpectation;
    double            m_KnowledgeCoef;
    double            m_PollutionCoef;
    double            m_PollutionUnhappyCoef;
    double            m_ConquestDistress;
    double            m_ConquestDistressDecay;
    double            m_EmpireDistanceScale;
    sint32            m_MinEmpireDistance;
    sint32            m_MaxEmpireDistance;
    sint32            m_TooManyCitiesThreshold;
    double            m_TooManyCitiesCoefficient;
    sint32            m_MaxMartialLawUnits;
    double            m_MartialLawEffect;
    sint32            m_MartialLawThreshold;
    sint32            m_AtHomeRadius;
    double            m_OverseasCoef;
    double            m_OverseasDefeatDecay;
    double            m_OverseasDefeatCoef;
    double            m_HomeDefeatDecay;
    double            m_HomeDefeatCoef;
    double            m_CrimeCoef;
    sint32            m_CrimeOffset;
    sint32            m_ProfessionalUnits;
    sint32            m_TurnsToNewReadiness;
    double            m_ReadyPeaceCoef;
    double            m_ReadyPeaceHP;
    double            m_ReadyAlertCoef;
    double            m_ReadyAlertHP;
    double            m_ReadyWarCoef;
    double            m_ReadyWarHP;
    double            m_FoodCoef;
    double            m_GoldCoef;
    double            m_ProductionCoef;
    double            m_SupportCoef;
    double            m_DefenseCoef;
    sint32            m_EnableAdvance; // Index into Advance database
    sint32            m_ObsoleteAdvance[k_MAX_ObsoleteAdvance]; // Index into Advance database
    sint32            m_numObsoleteAdvance;
    sint32          * m_CultureOnly; // Index into CityStyle database
    sint32            m_numCultureOnly;
    sint32            m_GovtIconValue; // Index into MapIcon database
    sint32            m_Icon; // Index into Icon database
    sint32            m_GrowthRank;
    sint32            m_ProductionRank;
    sint32            m_ScienceRank;
    sint32            m_GoldRank;
    sint32            m_MilitaryRank;
    sint32            m_CommerceRank;
    sint32            m_PollutionRank;
    sint32            m_LoyaltyRank;
    sint32            m_MartialLawRank;
    double            m_MaxScienceRate;
    double            m_UnitRushModifier;
    double            m_BuildingRushModifier;
    double            m_WonderRushModifier;
    double            m_EndGameRushModifier;
    sint32            m_MaxIncomingTrade;
    sint32            m_MaxOutgoingTrade;
    double            m_InfrastructureCoefficient;
    double            m_CapitalizationCoefficient;
    sint32            m_WarDiscontentMaxUnits;
    double            m_WarDiscontentPerUnit;
    sint32            m_ParliamentaryVoteChance;
    sint32            m_RiotLevelModifierValue;
    sint32            m_Rank;
    sint32            m_SameRankAdvice;
    sint32            m_HigherRankAdvice;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    GovernmentRecord() { Init(); };
    GovernmentRecord(CivArchive &archive) { Serialize(archive); };
    GovernmentRecord(GovernmentRecord const & rval) { Init(); *this = rval; }
    ~GovernmentRecord();
    GovernmentRecord const & operator = (GovernmentRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const GovernmentRecord & rval);

    double GetPositiveWorkdayCoef() const { return m_PositiveWorkdayCoef; }
    double GetNegativeWorkdayCoef() const { return m_NegativeWorkdayCoef; }
    sint32 GetWorkdayExpectation() const { return m_WorkdayExpectation; }
    double GetPositiveWagesCoef() const { return m_PositiveWagesCoef; }
    double GetNegativeWagesCoef() const { return m_NegativeWagesCoef; }
    sint32 GetWagesExpectation() const { return m_WagesExpectation; }
    double GetPositiveRationsCoef() const { return m_PositiveRationsCoef; }
    double GetNegativeRationsCoef() const { return m_NegativeRationsCoef; }
    sint32 GetRationsExpectation() const { return m_RationsExpectation; }
    double GetKnowledgeCoef() const { return m_KnowledgeCoef; }
    double GetPollutionCoef() const { return m_PollutionCoef; }
    double GetPollutionUnhappyCoef() const { return m_PollutionUnhappyCoef; }
    double GetConquestDistress() const { return m_ConquestDistress; }
    double GetConquestDistressDecay() const { return m_ConquestDistressDecay; }
    double GetEmpireDistanceScale() const { return m_EmpireDistanceScale; }
    sint32 GetMinEmpireDistance() const { return m_MinEmpireDistance; }
    sint32 GetMaxEmpireDistance() const { return m_MaxEmpireDistance; }
    sint32 GetTooManyCitiesThreshold() const { return m_TooManyCitiesThreshold; }
    double GetTooManyCitiesCoefficient() const { return m_TooManyCitiesCoefficient; }
    sint32 GetMaxMartialLawUnits() const { return m_MaxMartialLawUnits; }
    double GetMartialLawEffect() const { return m_MartialLawEffect; }
    sint32 GetMartialLawThreshold() const { return m_MartialLawThreshold; }
    sint32 GetAtHomeRadius() const { return m_AtHomeRadius; }
    double GetOverseasCoef() const { return m_OverseasCoef; }
    double GetOverseasDefeatDecay() const { return m_OverseasDefeatDecay; }
    double GetOverseasDefeatCoef() const { return m_OverseasDefeatCoef; }
    double GetHomeDefeatDecay() const { return m_HomeDefeatDecay; }
    double GetHomeDefeatCoef() const { return m_HomeDefeatCoef; }
    double GetCrimeCoef() const { return m_CrimeCoef; }
    sint32 GetCrimeOffset() const { return m_CrimeOffset; }
    sint32 GetProfessionalUnits() const { return m_ProfessionalUnits; }
    sint32 GetTurnsToNewReadiness() const { return m_TurnsToNewReadiness; }
    double GetReadyPeaceCoef() const { return m_ReadyPeaceCoef; }
    double GetReadyPeaceHP() const { return m_ReadyPeaceHP; }
    double GetReadyAlertCoef() const { return m_ReadyAlertCoef; }
    double GetReadyAlertHP() const { return m_ReadyAlertHP; }
    double GetReadyWarCoef() const { return m_ReadyWarCoef; }
    double GetReadyWarHP() const { return m_ReadyWarHP; }
    double GetFoodCoef() const { return m_FoodCoef; }
    double GetGoldCoef() const { return m_GoldCoef; }
    double GetProductionCoef() const { return m_ProductionCoef; }
    double GetSupportCoef() const { return m_SupportCoef; }
    double GetDefenseCoef() const { return m_DefenseCoef; }
    sint32           GetEnableAdvanceIndex() const { return m_EnableAdvance; }
    AdvanceRecord const * GetEnableAdvance() const;
    sint32 GetObsoleteAdvanceIndex(sint32 index) const;
    const AdvanceRecord * GetObsoleteAdvance(sint32 index) const;
    sint32 GetNumObsoleteAdvance() const { return m_numObsoleteAdvance;}
    sint32 GetCultureOnlyIndex(sint32 index) const;
    const CityStyleRecord * GetCultureOnly(sint32 index) const;
    sint32 GetNumCultureOnly() const { return m_numCultureOnly;}
    bool HasGovtIcon() const { return (m_flags0 & k_Government_GovtIcon_Bit) != 0; }
    bool GetGovtIconIndex(sint32 & index) const
    {
        index = (m_flags0 & k_Government_GovtIcon_Bit) ? m_GovtIconValue : -1;
        return (m_flags0 & k_Government_GovtIcon_Bit) != 0;
    }
    bool GetGovtIcon(const MapIconRecord * & rec) const;
    const MapIconRecord * GetGovtIconPtr() const;
    sint32           GetIconIndex() const { return m_Icon; }
    IconRecord const * GetIcon() const;
    sint32 GetGrowthRank() const { return m_GrowthRank; }
    sint32 GetProductionRank() const { return m_ProductionRank; }
    sint32 GetScienceRank() const { return m_ScienceRank; }
    sint32 GetGoldRank() const { return m_GoldRank; }
    sint32 GetMilitaryRank() const { return m_MilitaryRank; }
    sint32 GetCommerceRank() const { return m_CommerceRank; }
    sint32 GetPollutionRank() const { return m_PollutionRank; }
    sint32 GetLoyaltyRank() const { return m_LoyaltyRank; }
    sint32 GetMartialLawRank() const { return m_MartialLawRank; }
    double GetMaxScienceRate() const { return m_MaxScienceRate; }
    double GetUnitRushModifier() const { return m_UnitRushModifier; }
    double GetBuildingRushModifier() const { return m_BuildingRushModifier; }
    double GetWonderRushModifier() const { return m_WonderRushModifier; }
    double GetEndGameRushModifier() const { return m_EndGameRushModifier; }
    sint32 GetMaxIncomingTrade() const { return m_MaxIncomingTrade; }
    sint32 GetMaxOutgoingTrade() const { return m_MaxOutgoingTrade; }
    double GetInfrastructureCoefficient() const { return m_InfrastructureCoefficient; }
    double GetCapitalizationCoefficient() const { return m_CapitalizationCoefficient; }
    sint32 GetWarDiscontentMaxUnits() const { return m_WarDiscontentMaxUnits; }
    double GetWarDiscontentPerUnit() const { return m_WarDiscontentPerUnit; }
    bool GetIsEcotopia() const { return (m_flags0 & k_Government_IsEcotopia_Bit) != 0; }
    sint32 GetParliamentaryVoteChance() const { return m_ParliamentaryVoteChance; }
    bool GetIsAnarchy() const { return (m_flags0 & k_Government_IsAnarchy_Bit) != 0; }
    bool GetIsXenophobic() const { return (m_flags0 & k_Government_IsXenophobic_Bit) != 0; }
    bool GetHasGulags() const { return (m_flags0 & k_Government_HasGulags_Bit) != 0; }
    bool GetIsCapitalist() const { return (m_flags0 & k_Government_IsCapitalist_Bit) != 0; }
    bool GetIsTechnocracy() const { return (m_flags0 & k_Government_IsTechnocracy_Bit) != 0; }
    bool GetIsAgrarian() const { return (m_flags0 & k_Government_IsAgrarian_Bit) != 0; }
    bool GetHasMindlessTelevision() const { return (m_flags0 & k_Government_HasMindlessTelevision_Bit) != 0; }
    bool HasRiotLevelModifier() const { return (m_flags0 & k_Government_RiotLevelModifier_Bit) != 0; }
    bool GetRiotLevelModifier(sint32 & value) const
    {
        if (m_flags0 & k_Government_RiotLevelModifier_Bit)
        {
            value = m_RiotLevelModifierValue;
        }
        return (m_flags0 & k_Government_RiotLevelModifier_Bit) != 0;
    }
    bool GetGLHidden() const { return (m_flags0 & k_Government_GLHidden_Bit) != 0; }
    sint32 GetRank() const { return m_Rank; }
    sint32 GetSameRankAdvice() const { return m_SameRankAdvice; }
    sint32 GetHigherRankAdvice() const { return m_HigherRankAdvice; }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* GovernmentRecord */

struct GovernmentRecordAccessorInfo
{
    GovernmentRecord::IntAccessor        m_intAccessor;
    GovernmentRecord::BoolAccessor       m_boolAccessor;
    GovernmentRecord::FloatAccessor      m_floatAccessor;
    GovernmentRecord::BitIntAccessor     m_bitIntAccessor;
    GovernmentRecord::BitFloatAccessor   m_bitFloatAccessor;
    GovernmentRecord::IntArrayAccessor   m_intArrayAccessor;
    GovernmentRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern GovernmentRecordAccessorInfo      g_GovernmentRecord_Accessors[];
extern CTPDatabase<GovernmentRecord> *   g_theGovernmentDB;

extern const char * g_Government_Tokens[];

#endif
