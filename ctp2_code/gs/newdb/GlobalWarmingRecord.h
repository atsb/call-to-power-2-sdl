
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

#if defined(HAVE_PRAGMA_ONCE)
#pragma once
#endif

#ifndef GLOBALWARMING_RECORD_H__
#define GLOBALWARMING_RECORD_H__

class GlobalWarmingRecord;

#include "CTPDatabase.h"
#include "CTPRecord.h"
class CivArchive;
class TerrainRecord;
class TerrainRecord;

#define k_Num_GlobalWarmingRecord_Tokens 4

//
// m_flags0: ChangeTypeProbability
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_PLAINS_Bit 0x00000001
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_JUNGLE_Bit 0x00000002
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_TUNDRA_Bit 0x00000004
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_FOREST_Bit 0x00000008
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_DESERT_Bit 0x00000010
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_SWAMP_Bit 0x00000020
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_MOUNTAIN_Bit 0x00000040
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_BROWN_HILL_Bit 0x00000080
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_BROWN_MOUNTAIN_Bit 0x00000100
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_WHITE_HILL_Bit 0x00000200
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_WHITE_MOUNTAIN_Bit 0x00000400
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_GRASSLAND_Bit 0x00000800
#define k_ChangeTypeProbability_POLLUTION_TILE_TO_OCEAN_Bit 0x00001000
#define k_ChangeTypeProbability_FromType_Bit     0x00002000
#define k_ChangeTypeProbability_ToType_Bit       0x00004000
#define k_ChangeTypeProbability_Probability_Bit  0x00008000

class GlobalWarmingRecord : public CTPRecord
{
public:
    typedef sint32 (GlobalWarmingRecord::*IntAccessor)() const;
    typedef bool   (GlobalWarmingRecord::*BoolAccessor)() const;
    typedef double (GlobalWarmingRecord::*FloatAccessor)() const ;
    typedef bool   (GlobalWarmingRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool   (GlobalWarmingRecord::*BitFloatAccessor)(double &val) const;
    typedef sint32 (GlobalWarmingRecord::*IntArrayAccessor)(sint32 index) const;
    typedef double (GlobalWarmingRecord::*FloatArrayAccessor)(sint32 index) const;

    class ChangeTypeProbability {
    private:
        uint32            m_flags0;
        double            m_POLLUTION_TILE_DESERT;
        double            m_POLLUTION_TILE_FOREST;
        double            m_POLLUTION_TILE_GLACIER;
        double            m_POLLUTION_TILE_GRASSLAND;
        double            m_POLLUTION_TILE_HILL;
        double            m_POLLUTION_TILE_JUNGLE;
        double            m_POLLUTION_TILE_MOUNTAIN;
        double            m_POLLUTION_TILE_BROWN_HILL;
        double            m_POLLUTION_TILE_BROWN_MOUNTAIN;
        double            m_POLLUTION_TILE_WHITE_HILL;
        double            m_POLLUTION_TILE_WHITE_MOUNTAIN;
        double            m_POLLUTION_TILE_PLAINS;
        double            m_POLLUTION_TILE_SWAMP;
        double            m_POLLUTION_TILE_TUNDRA;
        sint32            m_FromTypeValue; // Index into Terrain database
        sint32            m_ToTypeValue; // Index into Terrain database
        double            m_ProbabilityValue;

    public:
        ChangeTypeProbability();
        ChangeTypeProbability(CivArchive & archive){ Serialize(archive); };
        ~ChangeTypeProbability();
        ChangeTypeProbability const & operator = (ChangeTypeProbability const & rval);
        bool operator == (ChangeTypeProbability const & rval) {
          return false;
        }

        void Serialize(CivArchive &archive);
        sint32 Parse(DBLexer *lex);
        sint32 ParseNum(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, ChangeTypeProbability **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, ChangeTypeProbability *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();

        double GetPOLLUTION_TILE_DESERT() const { return m_POLLUTION_TILE_DESERT; }
        double GetPOLLUTION_TILE_FOREST() const { return m_POLLUTION_TILE_FOREST; }
        double GetPOLLUTION_TILE_GLACIER() const { return m_POLLUTION_TILE_GLACIER; }
        double GetPOLLUTION_TILE_GRASSLAND() const { return m_POLLUTION_TILE_GRASSLAND; }
        double GetPOLLUTION_TILE_HILL() const { return m_POLLUTION_TILE_HILL; }
        double GetPOLLUTION_TILE_JUNGLE() const { return m_POLLUTION_TILE_JUNGLE; }
        double GetPOLLUTION_TILE_MOUNTAIN() const { return m_POLLUTION_TILE_MOUNTAIN; }
        double GetPOLLUTION_TILE_BROWN_HILL() const { return m_POLLUTION_TILE_BROWN_HILL; }
        double GetPOLLUTION_TILE_BROWN_MOUNTAIN() const { return m_POLLUTION_TILE_BROWN_MOUNTAIN; }
        double GetPOLLUTION_TILE_WHITE_HILL() const { return m_POLLUTION_TILE_WHITE_HILL; }
        double GetPOLLUTION_TILE_WHITE_MOUNTAIN() const { return m_POLLUTION_TILE_WHITE_MOUNTAIN; }
        double GetPOLLUTION_TILE_PLAINS() const { return m_POLLUTION_TILE_PLAINS; }
        double GetPOLLUTION_TILE_SWAMP() const { return m_POLLUTION_TILE_SWAMP; }
        double GetPOLLUTION_TILE_TUNDRA() const { return m_POLLUTION_TILE_TUNDRA; }
        bool GetPOLLUTION_TILE_TO_PLAINS() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_PLAINS_Bit) != 0; }
        bool GetPOLLUTION_TILE_TO_JUNGLE() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_JUNGLE_Bit) != 0; }
        bool GetPOLLUTION_TILE_TO_TUNDRA() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_TUNDRA_Bit) != 0; }
        bool GetPOLLUTION_TILE_TO_FOREST() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_FOREST_Bit) != 0; }
        bool GetPOLLUTION_TILE_TO_DESERT() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_DESERT_Bit) != 0; }
        bool GetPOLLUTION_TILE_TO_SWAMP() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_SWAMP_Bit) != 0; }
        bool GetPOLLUTION_TILE_TO_MOUNTAIN() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_MOUNTAIN_Bit) != 0; }
        bool GetPOLLUTION_TILE_TO_BROWN_HILL() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_BROWN_HILL_Bit) != 0; }
        bool GetPOLLUTION_TILE_TO_BROWN_MOUNTAIN() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_BROWN_MOUNTAIN_Bit) != 0; }
        bool GetPOLLUTION_TILE_TO_WHITE_HILL() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_WHITE_HILL_Bit) != 0; }
        bool GetPOLLUTION_TILE_TO_WHITE_MOUNTAIN() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_WHITE_MOUNTAIN_Bit) != 0; }
        bool GetPOLLUTION_TILE_TO_GRASSLAND() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_GRASSLAND_Bit) != 0; }
        bool GetPOLLUTION_TILE_TO_OCEAN() const { return (m_flags0 & k_ChangeTypeProbability_POLLUTION_TILE_TO_OCEAN_Bit) != 0; }
        bool HasFromType() const { return (m_flags0 & k_ChangeTypeProbability_FromType_Bit) != 0; }
        bool GetFromTypeIndex(sint32 & index) const
        {
            index = (m_flags0 & k_ChangeTypeProbability_FromType_Bit) ? m_FromTypeValue : -1;
            return (m_flags0 & k_ChangeTypeProbability_FromType_Bit) != 0;
        }
        bool GetFromType(const TerrainRecord * & rec) const;
        const TerrainRecord * GetFromTypePtr() const;
        bool HasToType() const { return (m_flags0 & k_ChangeTypeProbability_ToType_Bit) != 0; }
        bool GetToTypeIndex(sint32 & index) const
        {
            index = (m_flags0 & k_ChangeTypeProbability_ToType_Bit) ? m_ToTypeValue : -1;
            return (m_flags0 & k_ChangeTypeProbability_ToType_Bit) != 0;
        }
        bool GetToType(const TerrainRecord * & rec) const;
        const TerrainRecord * GetToTypePtr() const;
        bool HasProbability() const { return (m_flags0 & k_ChangeTypeProbability_Probability_Bit) != 0; }
        bool GetProbability(double & value) const
        {
            if (m_flags0 & k_ChangeTypeProbability_Probability_Bit)
            {
                value = m_ProbabilityValue;
            }
            return (m_flags0 & k_ChangeTypeProbability_Probability_Bit) != 0;
        }

    }; /* class ChangeTypeProbability */

private:
    ChangeTypeProbability * m_ChangeTypeProbability;
    sint32            m_numChangeTypeProbability;
    sint32            m_PollutionNextToOcean;
    sint32            m_PollutionNeighbourBonus;
    sint32            m_PollutionMaxBonus;
    bool m_hasGovernmentsModified; // GovMod specific flag

public:
    GlobalWarmingRecord() { Init(); };
    GlobalWarmingRecord(CivArchive &archive) { Serialize(archive); };
    GlobalWarmingRecord(GlobalWarmingRecord const & rval) { Init(); *this = rval; }
    ~GlobalWarmingRecord();
    GlobalWarmingRecord const & operator = (GlobalWarmingRecord const & rval);

    void Init();
    void Serialize(CivArchive &archive);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex, sint32 numRecords);

    void ResolveDBReferences();
    void Merge(const GlobalWarmingRecord & rval);

    const ChangeTypeProbability * GetChangeTypeProbability(sint32 index) const;
    sint32 GetNumChangeTypeProbability() const { return m_numChangeTypeProbability;}
    sint32 GetPollutionNextToOcean() const { return m_PollutionNextToOcean; }
    sint32 GetPollutionNeighbourBonus() const { return m_PollutionNeighbourBonus; }
    sint32 GetPollutionMaxBonus() const { return m_PollutionMaxBonus; }
    bool GetHasGovernmentsModified() const { return m_hasGovernmentsModified; }
    sint32 GenericGetNumGovernmentsModified() const { return 0; }
    sint32 GenericGetGovernmentsModifiedIndex(sint32 index) const { return -1; }

}; /* GlobalWarmingRecord */

struct GlobalWarmingRecordAccessorInfo
{
    GlobalWarmingRecord::IntAccessor        m_intAccessor;
    GlobalWarmingRecord::BoolAccessor       m_boolAccessor;
    GlobalWarmingRecord::FloatAccessor      m_floatAccessor;
    GlobalWarmingRecord::BitIntAccessor     m_bitIntAccessor;
    GlobalWarmingRecord::BitFloatAccessor   m_bitFloatAccessor;
    GlobalWarmingRecord::IntArrayAccessor   m_intArrayAccessor;
    GlobalWarmingRecord::FloatArrayAccessor m_floatArrayAccessor;
};

extern GlobalWarmingRecordAccessorInfo      g_GlobalWarmingRecord_Accessors[];
extern CTPDatabase<GlobalWarmingRecord> *   g_theGlobalWarmingDB;

extern const char * g_GlobalWarming_Tokens[];

#endif
